// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arch-state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_arch_2dstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_arch_2dstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_arch_2dstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arch_2dstate_2eproto;
class ArchState;
class ArchStateDefaultTypeInternal;
extern ArchStateDefaultTypeInternal _ArchState_default_instance_;
class BaseStatusCSR;
class BaseStatusCSRDefaultTypeInternal;
extern BaseStatusCSRDefaultTypeInternal _BaseStatusCSR_default_instance_;
class BasicCSR;
class BasicCSRDefaultTypeInternal;
extern BasicCSRDefaultTypeInternal _BasicCSR_default_instance_;
class CSR;
class CSRDefaultTypeInternal;
extern CSRDefaultTypeInternal _CSR_default_instance_;
class DCSR;
class DCSRDefaultTypeInternal;
extern DCSRDefaultTypeInternal _DCSR_default_instance_;
class Float128;
class Float128DefaultTypeInternal;
extern Float128DefaultTypeInternal _Float128_default_instance_;
class HenvcfgCSR;
class HenvcfgCSRDefaultTypeInternal;
extern HenvcfgCSRDefaultTypeInternal _HenvcfgCSR_default_instance_;
class HidelegCSR;
class HidelegCSRDefaultTypeInternal;
extern HidelegCSRDefaultTypeInternal _HidelegCSR_default_instance_;
class HstateenCSR;
class HstateenCSRDefaultTypeInternal;
extern HstateenCSRDefaultTypeInternal _HstateenCSR_default_instance_;
class MaskedCSR;
class MaskedCSRDefaultTypeInternal;
extern MaskedCSRDefaultTypeInternal _MaskedCSR_default_instance_;
class McontextCSR;
class McontextCSRDefaultTypeInternal;
extern McontextCSRDefaultTypeInternal _McontextCSR_default_instance_;
class MedelegCSR;
class MedelegCSRDefaultTypeInternal;
extern MedelegCSRDefaultTypeInternal _MedelegCSR_default_instance_;
class MisaCSR;
class MisaCSRDefaultTypeInternal;
extern MisaCSRDefaultTypeInternal _MisaCSR_default_instance_;
class MstatusCSR;
class MstatusCSRDefaultTypeInternal;
extern MstatusCSRDefaultTypeInternal _MstatusCSR_default_instance_;
class OptionalUInt64;
class OptionalUInt64DefaultTypeInternal;
extern OptionalUInt64DefaultTypeInternal _OptionalUInt64_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
class PmpCSR;
class PmpCSRDefaultTypeInternal;
extern PmpCSRDefaultTypeInternal _PmpCSR_default_instance_;
class SatpCSR;
class SatpCSRDefaultTypeInternal;
extern SatpCSRDefaultTypeInternal _SatpCSR_default_instance_;
class SimState;
class SimStateDefaultTypeInternal;
extern SimStateDefaultTypeInternal _SimState_default_instance_;
class SmcntrpmfCSR;
class SmcntrpmfCSRDefaultTypeInternal;
extern SmcntrpmfCSRDefaultTypeInternal _SmcntrpmfCSR_default_instance_;
class SstatusCSR;
class SstatusCSRDefaultTypeInternal;
extern SstatusCSRDefaultTypeInternal _SstatusCSR_default_instance_;
class SstatusProxyCSR;
class SstatusProxyCSRDefaultTypeInternal;
extern SstatusProxyCSRDefaultTypeInternal _SstatusProxyCSR_default_instance_;
class StimecmpCSR;
class StimecmpCSRDefaultTypeInternal;
extern StimecmpCSRDefaultTypeInternal _StimecmpCSR_default_instance_;
class TimeProxyCSR;
class TimeProxyCSRDefaultTypeInternal;
extern TimeProxyCSRDefaultTypeInternal _TimeProxyCSR_default_instance_;
class VirtBasicCSR;
class VirtBasicCSRDefaultTypeInternal;
extern VirtBasicCSRDefaultTypeInternal _VirtBasicCSR_default_instance_;
class VsstatusCSR;
class VsstatusCSRDefaultTypeInternal;
extern VsstatusCSRDefaultTypeInternal _VsstatusCSR_default_instance_;
class WideCntrCSR;
class WideCntrCSRDefaultTypeInternal;
extern WideCntrCSRDefaultTypeInternal _WideCntrCSR_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ArchState* Arena::CreateMaybeMessage<::ArchState>(Arena*);
template<> ::BaseStatusCSR* Arena::CreateMaybeMessage<::BaseStatusCSR>(Arena*);
template<> ::BasicCSR* Arena::CreateMaybeMessage<::BasicCSR>(Arena*);
template<> ::CSR* Arena::CreateMaybeMessage<::CSR>(Arena*);
template<> ::DCSR* Arena::CreateMaybeMessage<::DCSR>(Arena*);
template<> ::Float128* Arena::CreateMaybeMessage<::Float128>(Arena*);
template<> ::HenvcfgCSR* Arena::CreateMaybeMessage<::HenvcfgCSR>(Arena*);
template<> ::HidelegCSR* Arena::CreateMaybeMessage<::HidelegCSR>(Arena*);
template<> ::HstateenCSR* Arena::CreateMaybeMessage<::HstateenCSR>(Arena*);
template<> ::MaskedCSR* Arena::CreateMaybeMessage<::MaskedCSR>(Arena*);
template<> ::McontextCSR* Arena::CreateMaybeMessage<::McontextCSR>(Arena*);
template<> ::MedelegCSR* Arena::CreateMaybeMessage<::MedelegCSR>(Arena*);
template<> ::MisaCSR* Arena::CreateMaybeMessage<::MisaCSR>(Arena*);
template<> ::MstatusCSR* Arena::CreateMaybeMessage<::MstatusCSR>(Arena*);
template<> ::OptionalUInt64* Arena::CreateMaybeMessage<::OptionalUInt64>(Arena*);
template<> ::Page* Arena::CreateMaybeMessage<::Page>(Arena*);
template<> ::PmpCSR* Arena::CreateMaybeMessage<::PmpCSR>(Arena*);
template<> ::SatpCSR* Arena::CreateMaybeMessage<::SatpCSR>(Arena*);
template<> ::SimState* Arena::CreateMaybeMessage<::SimState>(Arena*);
template<> ::SmcntrpmfCSR* Arena::CreateMaybeMessage<::SmcntrpmfCSR>(Arena*);
template<> ::SstatusCSR* Arena::CreateMaybeMessage<::SstatusCSR>(Arena*);
template<> ::SstatusProxyCSR* Arena::CreateMaybeMessage<::SstatusProxyCSR>(Arena*);
template<> ::StimecmpCSR* Arena::CreateMaybeMessage<::StimecmpCSR>(Arena*);
template<> ::TimeProxyCSR* Arena::CreateMaybeMessage<::TimeProxyCSR>(Arena*);
template<> ::VirtBasicCSR* Arena::CreateMaybeMessage<::VirtBasicCSR>(Arena*);
template<> ::VsstatusCSR* Arena::CreateMaybeMessage<::VsstatusCSR>(Arena*);
template<> ::WideCntrCSR* Arena::CreateMaybeMessage<::WideCntrCSR>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSR) */ {
 public:
  CSR();
  virtual ~CSR();

  CSR(const CSR& from);
  CSR(CSR&& from) noexcept
    : CSR() {
    *this = ::std::move(from);
  }

  inline CSR& operator=(const CSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSR& operator=(CSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSR* internal_default_instance() {
    return reinterpret_cast<const CSR*>(
               &_CSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSR& a, CSR& b) {
    a.Swap(&b);
  }
  inline void Swap(CSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSR* New() const final {
    return CreateMaybeMessage<CSR>(nullptr);
  }

  CSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSR& from);
  void MergeFrom(const CSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgAddrFieldNumber = 1,
    kMsgCsrPrivFieldNumber = 2,
    kMsgCsrReadOnlyFieldNumber = 3,
  };
  // uint64 msg_addr = 1;
  void clear_msg_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_addr() const;
  void set_msg_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_addr() const;
  void _internal_set_msg_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 msg_csr_priv = 2;
  void clear_msg_csr_priv();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_csr_priv() const;
  void set_msg_csr_priv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_csr_priv() const;
  void _internal_set_msg_csr_priv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool msg_csr_read_only = 3;
  void clear_msg_csr_read_only();
  bool msg_csr_read_only() const;
  void set_msg_csr_read_only(bool value);
  private:
  bool _internal_msg_csr_read_only() const;
  void _internal_set_msg_csr_read_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_csr_priv_;
  bool msg_csr_read_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class BasicCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasicCSR) */ {
 public:
  BasicCSR();
  virtual ~BasicCSR();

  BasicCSR(const BasicCSR& from);
  BasicCSR(BasicCSR&& from) noexcept
    : BasicCSR() {
    *this = ::std::move(from);
  }

  inline BasicCSR& operator=(const BasicCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicCSR& operator=(BasicCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicCSR* internal_default_instance() {
    return reinterpret_cast<const BasicCSR*>(
               &_BasicCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BasicCSR& a, BasicCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicCSR* New() const final {
    return CreateMaybeMessage<BasicCSR>(nullptr);
  }

  BasicCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicCSR& from);
  void MergeFrom(const BasicCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasicCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgValFieldNumber = 1,
  };
  // uint64 msg_val = 1;
  void clear_msg_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val() const;
  void set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_val() const;
  void _internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BasicCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class MisaCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MisaCSR) */ {
 public:
  MisaCSR();
  virtual ~MisaCSR();

  MisaCSR(const MisaCSR& from);
  MisaCSR(MisaCSR&& from) noexcept
    : MisaCSR() {
    *this = ::std::move(from);
  }

  inline MisaCSR& operator=(const MisaCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline MisaCSR& operator=(MisaCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MisaCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MisaCSR* internal_default_instance() {
    return reinterpret_cast<const MisaCSR*>(
               &_MisaCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MisaCSR& a, MisaCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(MisaCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MisaCSR* New() const final {
    return CreateMaybeMessage<MisaCSR>(nullptr);
  }

  MisaCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MisaCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MisaCSR& from);
  void MergeFrom(const MisaCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MisaCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MisaCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBasicCsrFieldNumber = 1,
    kMsgMaxIsaFieldNumber = 2,
    kMsgWriteMaskFieldNumber = 3,
  };
  // .BasicCSR msg_basic_csr = 1;
  bool has_msg_basic_csr() const;
  private:
  bool _internal_has_msg_basic_csr() const;
  public:
  void clear_msg_basic_csr();
  const ::BasicCSR& msg_basic_csr() const;
  ::BasicCSR* release_msg_basic_csr();
  ::BasicCSR* mutable_msg_basic_csr();
  void set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr);
  private:
  const ::BasicCSR& _internal_msg_basic_csr() const;
  ::BasicCSR* _internal_mutable_msg_basic_csr();
  public:

  // uint64 msg_max_isa = 2;
  void clear_msg_max_isa();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_max_isa() const;
  void set_msg_max_isa(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_max_isa() const;
  void _internal_set_msg_max_isa(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_write_mask = 3;
  void clear_msg_write_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_write_mask() const;
  void set_msg_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_write_mask() const;
  void _internal_set_msg_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MisaCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_basic_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_max_isa_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_write_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class SatpCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SatpCSR) */ {
 public:
  SatpCSR();
  virtual ~SatpCSR();

  SatpCSR(const SatpCSR& from);
  SatpCSR(SatpCSR&& from) noexcept
    : SatpCSR() {
    *this = ::std::move(from);
  }

  inline SatpCSR& operator=(const SatpCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SatpCSR& operator=(SatpCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SatpCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SatpCSR* internal_default_instance() {
    return reinterpret_cast<const SatpCSR*>(
               &_SatpCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SatpCSR& a, SatpCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(SatpCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SatpCSR* New() const final {
    return CreateMaybeMessage<SatpCSR>(nullptr);
  }

  SatpCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SatpCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SatpCSR& from);
  void MergeFrom(const SatpCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SatpCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SatpCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgNonvirtSatpCsrFieldNumber = 1,
    kMsgVirtSatpCsrFieldNumber = 2,
  };
  // .BasicCSR msg_nonvirt_satp_csr = 1;
  bool has_msg_nonvirt_satp_csr() const;
  private:
  bool _internal_has_msg_nonvirt_satp_csr() const;
  public:
  void clear_msg_nonvirt_satp_csr();
  const ::BasicCSR& msg_nonvirt_satp_csr() const;
  ::BasicCSR* release_msg_nonvirt_satp_csr();
  ::BasicCSR* mutable_msg_nonvirt_satp_csr();
  void set_allocated_msg_nonvirt_satp_csr(::BasicCSR* msg_nonvirt_satp_csr);
  private:
  const ::BasicCSR& _internal_msg_nonvirt_satp_csr() const;
  ::BasicCSR* _internal_mutable_msg_nonvirt_satp_csr();
  public:

  // .BasicCSR msg_virt_satp_csr = 2;
  bool has_msg_virt_satp_csr() const;
  private:
  bool _internal_has_msg_virt_satp_csr() const;
  public:
  void clear_msg_virt_satp_csr();
  const ::BasicCSR& msg_virt_satp_csr() const;
  ::BasicCSR* release_msg_virt_satp_csr();
  ::BasicCSR* mutable_msg_virt_satp_csr();
  void set_allocated_msg_virt_satp_csr(::BasicCSR* msg_virt_satp_csr);
  private:
  const ::BasicCSR& _internal_msg_virt_satp_csr() const;
  ::BasicCSR* _internal_mutable_msg_virt_satp_csr();
  public:

  // @@protoc_insertion_point(class_scope:SatpCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_nonvirt_satp_csr_;
  ::BasicCSR* msg_virt_satp_csr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class VirtBasicCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VirtBasicCSR) */ {
 public:
  VirtBasicCSR();
  virtual ~VirtBasicCSR();

  VirtBasicCSR(const VirtBasicCSR& from);
  VirtBasicCSR(VirtBasicCSR&& from) noexcept
    : VirtBasicCSR() {
    *this = ::std::move(from);
  }

  inline VirtBasicCSR& operator=(const VirtBasicCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtBasicCSR& operator=(VirtBasicCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VirtBasicCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtBasicCSR* internal_default_instance() {
    return reinterpret_cast<const VirtBasicCSR*>(
               &_VirtBasicCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VirtBasicCSR& a, VirtBasicCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtBasicCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirtBasicCSR* New() const final {
    return CreateMaybeMessage<VirtBasicCSR>(nullptr);
  }

  VirtBasicCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirtBasicCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VirtBasicCSR& from);
  void MergeFrom(const VirtBasicCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtBasicCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VirtBasicCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgNonvirtCsrFieldNumber = 1,
    kMsgVirtCsrFieldNumber = 2,
  };
  // .BasicCSR msg_nonvirt_csr = 1;
  bool has_msg_nonvirt_csr() const;
  private:
  bool _internal_has_msg_nonvirt_csr() const;
  public:
  void clear_msg_nonvirt_csr();
  const ::BasicCSR& msg_nonvirt_csr() const;
  ::BasicCSR* release_msg_nonvirt_csr();
  ::BasicCSR* mutable_msg_nonvirt_csr();
  void set_allocated_msg_nonvirt_csr(::BasicCSR* msg_nonvirt_csr);
  private:
  const ::BasicCSR& _internal_msg_nonvirt_csr() const;
  ::BasicCSR* _internal_mutable_msg_nonvirt_csr();
  public:

  // .BasicCSR msg_virt_csr = 2;
  bool has_msg_virt_csr() const;
  private:
  bool _internal_has_msg_virt_csr() const;
  public:
  void clear_msg_virt_csr();
  const ::BasicCSR& msg_virt_csr() const;
  ::BasicCSR* release_msg_virt_csr();
  ::BasicCSR* mutable_msg_virt_csr();
  void set_allocated_msg_virt_csr(::BasicCSR* msg_virt_csr);
  private:
  const ::BasicCSR& _internal_msg_virt_csr() const;
  ::BasicCSR* _internal_mutable_msg_virt_csr();
  public:

  // @@protoc_insertion_point(class_scope:VirtBasicCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_nonvirt_csr_;
  ::BasicCSR* msg_virt_csr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class BaseStatusCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BaseStatusCSR) */ {
 public:
  BaseStatusCSR();
  virtual ~BaseStatusCSR();

  BaseStatusCSR(const BaseStatusCSR& from);
  BaseStatusCSR(BaseStatusCSR&& from) noexcept
    : BaseStatusCSR() {
    *this = ::std::move(from);
  }

  inline BaseStatusCSR& operator=(const BaseStatusCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStatusCSR& operator=(BaseStatusCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseStatusCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseStatusCSR* internal_default_instance() {
    return reinterpret_cast<const BaseStatusCSR*>(
               &_BaseStatusCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BaseStatusCSR& a, BaseStatusCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStatusCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseStatusCSR* New() const final {
    return CreateMaybeMessage<BaseStatusCSR>(nullptr);
  }

  BaseStatusCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseStatusCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseStatusCSR& from);
  void MergeFrom(const BaseStatusCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStatusCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BaseStatusCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSstatusWriteMaskFieldNumber = 2,
    kMsgSstatusReadMaskFieldNumber = 3,
    kMsgHasPageFieldNumber = 1,
  };
  // uint64 msg_sstatus_write_mask = 2;
  void clear_msg_sstatus_write_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_sstatus_write_mask() const;
  void set_msg_sstatus_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_sstatus_write_mask() const;
  void _internal_set_msg_sstatus_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_sstatus_read_mask = 3;
  void clear_msg_sstatus_read_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_sstatus_read_mask() const;
  void set_msg_sstatus_read_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_sstatus_read_mask() const;
  void _internal_set_msg_sstatus_read_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool msg_has_page = 1;
  void clear_msg_has_page();
  bool msg_has_page() const;
  void set_msg_has_page(bool value);
  private:
  bool _internal_msg_has_page() const;
  void _internal_set_msg_has_page(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BaseStatusCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_sstatus_write_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_sstatus_read_mask_;
  bool msg_has_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class MstatusCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MstatusCSR) */ {
 public:
  MstatusCSR();
  virtual ~MstatusCSR();

  MstatusCSR(const MstatusCSR& from);
  MstatusCSR(MstatusCSR&& from) noexcept
    : MstatusCSR() {
    *this = ::std::move(from);
  }

  inline MstatusCSR& operator=(const MstatusCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline MstatusCSR& operator=(MstatusCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MstatusCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MstatusCSR* internal_default_instance() {
    return reinterpret_cast<const MstatusCSR*>(
               &_MstatusCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MstatusCSR& a, MstatusCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(MstatusCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MstatusCSR* New() const final {
    return CreateMaybeMessage<MstatusCSR>(nullptr);
  }

  MstatusCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MstatusCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MstatusCSR& from);
  void MergeFrom(const MstatusCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MstatusCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MstatusCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBaseStatusCsrFieldNumber = 1,
    kMsgValFieldNumber = 2,
  };
  // .BaseStatusCSR msg_base_status_csr = 1;
  bool has_msg_base_status_csr() const;
  private:
  bool _internal_has_msg_base_status_csr() const;
  public:
  void clear_msg_base_status_csr();
  const ::BaseStatusCSR& msg_base_status_csr() const;
  ::BaseStatusCSR* release_msg_base_status_csr();
  ::BaseStatusCSR* mutable_msg_base_status_csr();
  void set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr);
  private:
  const ::BaseStatusCSR& _internal_msg_base_status_csr() const;
  ::BaseStatusCSR* _internal_mutable_msg_base_status_csr();
  public:

  // uint64 msg_val = 2;
  void clear_msg_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val() const;
  void set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_val() const;
  void _internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MstatusCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BaseStatusCSR* msg_base_status_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class SstatusProxyCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SstatusProxyCSR) */ {
 public:
  SstatusProxyCSR();
  virtual ~SstatusProxyCSR();

  SstatusProxyCSR(const SstatusProxyCSR& from);
  SstatusProxyCSR(SstatusProxyCSR&& from) noexcept
    : SstatusProxyCSR() {
    *this = ::std::move(from);
  }

  inline SstatusProxyCSR& operator=(const SstatusProxyCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SstatusProxyCSR& operator=(SstatusProxyCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SstatusProxyCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SstatusProxyCSR* internal_default_instance() {
    return reinterpret_cast<const SstatusProxyCSR*>(
               &_SstatusProxyCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SstatusProxyCSR& a, SstatusProxyCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(SstatusProxyCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SstatusProxyCSR* New() const final {
    return CreateMaybeMessage<SstatusProxyCSR>(nullptr);
  }

  SstatusProxyCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SstatusProxyCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SstatusProxyCSR& from);
  void MergeFrom(const SstatusProxyCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SstatusProxyCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SstatusProxyCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBaseStatusCsrFieldNumber = 1,
    kMsgMstatusCsrFieldNumber = 2,
  };
  // .BaseStatusCSR msg_base_status_csr = 1;
  bool has_msg_base_status_csr() const;
  private:
  bool _internal_has_msg_base_status_csr() const;
  public:
  void clear_msg_base_status_csr();
  const ::BaseStatusCSR& msg_base_status_csr() const;
  ::BaseStatusCSR* release_msg_base_status_csr();
  ::BaseStatusCSR* mutable_msg_base_status_csr();
  void set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr);
  private:
  const ::BaseStatusCSR& _internal_msg_base_status_csr() const;
  ::BaseStatusCSR* _internal_mutable_msg_base_status_csr();
  public:

  // .MstatusCSR msg_mstatus_csr = 2;
  bool has_msg_mstatus_csr() const;
  private:
  bool _internal_has_msg_mstatus_csr() const;
  public:
  void clear_msg_mstatus_csr();
  const ::MstatusCSR& msg_mstatus_csr() const;
  ::MstatusCSR* release_msg_mstatus_csr();
  ::MstatusCSR* mutable_msg_mstatus_csr();
  void set_allocated_msg_mstatus_csr(::MstatusCSR* msg_mstatus_csr);
  private:
  const ::MstatusCSR& _internal_msg_mstatus_csr() const;
  ::MstatusCSR* _internal_mutable_msg_mstatus_csr();
  public:

  // @@protoc_insertion_point(class_scope:SstatusProxyCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BaseStatusCSR* msg_base_status_csr_;
  ::MstatusCSR* msg_mstatus_csr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class VsstatusCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VsstatusCSR) */ {
 public:
  VsstatusCSR();
  virtual ~VsstatusCSR();

  VsstatusCSR(const VsstatusCSR& from);
  VsstatusCSR(VsstatusCSR&& from) noexcept
    : VsstatusCSR() {
    *this = ::std::move(from);
  }

  inline VsstatusCSR& operator=(const VsstatusCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline VsstatusCSR& operator=(VsstatusCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VsstatusCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VsstatusCSR* internal_default_instance() {
    return reinterpret_cast<const VsstatusCSR*>(
               &_VsstatusCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VsstatusCSR& a, VsstatusCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(VsstatusCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VsstatusCSR* New() const final {
    return CreateMaybeMessage<VsstatusCSR>(nullptr);
  }

  VsstatusCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VsstatusCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VsstatusCSR& from);
  void MergeFrom(const VsstatusCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VsstatusCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VsstatusCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBaseStatusCsrFieldNumber = 1,
    kMsgValFieldNumber = 2,
  };
  // .BaseStatusCSR msg_base_status_csr = 1;
  bool has_msg_base_status_csr() const;
  private:
  bool _internal_has_msg_base_status_csr() const;
  public:
  void clear_msg_base_status_csr();
  const ::BaseStatusCSR& msg_base_status_csr() const;
  ::BaseStatusCSR* release_msg_base_status_csr();
  ::BaseStatusCSR* mutable_msg_base_status_csr();
  void set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr);
  private:
  const ::BaseStatusCSR& _internal_msg_base_status_csr() const;
  ::BaseStatusCSR* _internal_mutable_msg_base_status_csr();
  public:

  // uint64 msg_val = 2;
  void clear_msg_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val() const;
  void set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_val() const;
  void _internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VsstatusCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BaseStatusCSR* msg_base_status_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class SstatusCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SstatusCSR) */ {
 public:
  SstatusCSR();
  virtual ~SstatusCSR();

  SstatusCSR(const SstatusCSR& from);
  SstatusCSR(SstatusCSR&& from) noexcept
    : SstatusCSR() {
    *this = ::std::move(from);
  }

  inline SstatusCSR& operator=(const SstatusCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SstatusCSR& operator=(SstatusCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SstatusCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SstatusCSR* internal_default_instance() {
    return reinterpret_cast<const SstatusCSR*>(
               &_SstatusCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SstatusCSR& a, SstatusCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(SstatusCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SstatusCSR* New() const final {
    return CreateMaybeMessage<SstatusCSR>(nullptr);
  }

  SstatusCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SstatusCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SstatusCSR& from);
  void MergeFrom(const SstatusCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SstatusCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SstatusCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgOrigSstatusFieldNumber = 1,
    kMsgVirtSstatusFieldNumber = 2,
  };
  // .SstatusProxyCSR msg_orig_sstatus = 1;
  bool has_msg_orig_sstatus() const;
  private:
  bool _internal_has_msg_orig_sstatus() const;
  public:
  void clear_msg_orig_sstatus();
  const ::SstatusProxyCSR& msg_orig_sstatus() const;
  ::SstatusProxyCSR* release_msg_orig_sstatus();
  ::SstatusProxyCSR* mutable_msg_orig_sstatus();
  void set_allocated_msg_orig_sstatus(::SstatusProxyCSR* msg_orig_sstatus);
  private:
  const ::SstatusProxyCSR& _internal_msg_orig_sstatus() const;
  ::SstatusProxyCSR* _internal_mutable_msg_orig_sstatus();
  public:

  // .VsstatusCSR msg_virt_sstatus = 2;
  bool has_msg_virt_sstatus() const;
  private:
  bool _internal_has_msg_virt_sstatus() const;
  public:
  void clear_msg_virt_sstatus();
  const ::VsstatusCSR& msg_virt_sstatus() const;
  ::VsstatusCSR* release_msg_virt_sstatus();
  ::VsstatusCSR* mutable_msg_virt_sstatus();
  void set_allocated_msg_virt_sstatus(::VsstatusCSR* msg_virt_sstatus);
  private:
  const ::VsstatusCSR& _internal_msg_virt_sstatus() const;
  ::VsstatusCSR* _internal_mutable_msg_virt_sstatus();
  public:

  // @@protoc_insertion_point(class_scope:SstatusCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SstatusProxyCSR* msg_orig_sstatus_;
  ::VsstatusCSR* msg_virt_sstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class MaskedCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MaskedCSR) */ {
 public:
  MaskedCSR();
  virtual ~MaskedCSR();

  MaskedCSR(const MaskedCSR& from);
  MaskedCSR(MaskedCSR&& from) noexcept
    : MaskedCSR() {
    *this = ::std::move(from);
  }

  inline MaskedCSR& operator=(const MaskedCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaskedCSR& operator=(MaskedCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaskedCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaskedCSR* internal_default_instance() {
    return reinterpret_cast<const MaskedCSR*>(
               &_MaskedCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MaskedCSR& a, MaskedCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(MaskedCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaskedCSR* New() const final {
    return CreateMaybeMessage<MaskedCSR>(nullptr);
  }

  MaskedCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaskedCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaskedCSR& from);
  void MergeFrom(const MaskedCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaskedCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MaskedCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBasicCsrFieldNumber = 1,
    kMsgMaskFieldNumber = 2,
  };
  // .BasicCSR msg_basic_csr = 1;
  bool has_msg_basic_csr() const;
  private:
  bool _internal_has_msg_basic_csr() const;
  public:
  void clear_msg_basic_csr();
  const ::BasicCSR& msg_basic_csr() const;
  ::BasicCSR* release_msg_basic_csr();
  ::BasicCSR* mutable_msg_basic_csr();
  void set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr);
  private:
  const ::BasicCSR& _internal_msg_basic_csr() const;
  ::BasicCSR* _internal_mutable_msg_basic_csr();
  public:

  // uint64 msg_mask = 2;
  void clear_msg_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_mask() const;
  void set_msg_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_mask() const;
  void _internal_set_msg_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MaskedCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_basic_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class OptionalUInt64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptionalUInt64) */ {
 public:
  OptionalUInt64();
  virtual ~OptionalUInt64();

  OptionalUInt64(const OptionalUInt64& from);
  OptionalUInt64(OptionalUInt64&& from) noexcept
    : OptionalUInt64() {
    *this = ::std::move(from);
  }

  inline OptionalUInt64& operator=(const OptionalUInt64& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalUInt64& operator=(OptionalUInt64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OptionalUInt64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionalUInt64* internal_default_instance() {
    return reinterpret_cast<const OptionalUInt64*>(
               &_OptionalUInt64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OptionalUInt64& a, OptionalUInt64& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalUInt64* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionalUInt64* New() const final {
    return CreateMaybeMessage<OptionalUInt64>(nullptr);
  }

  OptionalUInt64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionalUInt64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionalUInt64& from);
  void MergeFrom(const OptionalUInt64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalUInt64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptionalUInt64";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgValFieldNumber = 1,
  };
  // uint64 msg_val = 1;
  void clear_msg_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val() const;
  void set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_val() const;
  void _internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:OptionalUInt64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class SmcntrpmfCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SmcntrpmfCSR) */ {
 public:
  SmcntrpmfCSR();
  virtual ~SmcntrpmfCSR();

  SmcntrpmfCSR(const SmcntrpmfCSR& from);
  SmcntrpmfCSR(SmcntrpmfCSR&& from) noexcept
    : SmcntrpmfCSR() {
    *this = ::std::move(from);
  }

  inline SmcntrpmfCSR& operator=(const SmcntrpmfCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmcntrpmfCSR& operator=(SmcntrpmfCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmcntrpmfCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmcntrpmfCSR* internal_default_instance() {
    return reinterpret_cast<const SmcntrpmfCSR*>(
               &_SmcntrpmfCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SmcntrpmfCSR& a, SmcntrpmfCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(SmcntrpmfCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmcntrpmfCSR* New() const final {
    return CreateMaybeMessage<SmcntrpmfCSR>(nullptr);
  }

  SmcntrpmfCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmcntrpmfCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmcntrpmfCSR& from);
  void MergeFrom(const SmcntrpmfCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmcntrpmfCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SmcntrpmfCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgMaskedCsrFieldNumber = 1,
    kMsgPrevValFieldNumber = 2,
  };
  // .MaskedCSR msg_masked_csr = 1;
  bool has_msg_masked_csr() const;
  private:
  bool _internal_has_msg_masked_csr() const;
  public:
  void clear_msg_masked_csr();
  const ::MaskedCSR& msg_masked_csr() const;
  ::MaskedCSR* release_msg_masked_csr();
  ::MaskedCSR* mutable_msg_masked_csr();
  void set_allocated_msg_masked_csr(::MaskedCSR* msg_masked_csr);
  private:
  const ::MaskedCSR& _internal_msg_masked_csr() const;
  ::MaskedCSR* _internal_mutable_msg_masked_csr();
  public:

  // .OptionalUInt64 msg_prev_val = 2;
  bool has_msg_prev_val() const;
  private:
  bool _internal_has_msg_prev_val() const;
  public:
  void clear_msg_prev_val();
  const ::OptionalUInt64& msg_prev_val() const;
  ::OptionalUInt64* release_msg_prev_val();
  ::OptionalUInt64* mutable_msg_prev_val();
  void set_allocated_msg_prev_val(::OptionalUInt64* msg_prev_val);
  private:
  const ::OptionalUInt64& _internal_msg_prev_val() const;
  ::OptionalUInt64* _internal_mutable_msg_prev_val();
  public:

  // @@protoc_insertion_point(class_scope:SmcntrpmfCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MaskedCSR* msg_masked_csr_;
  ::OptionalUInt64* msg_prev_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class WideCntrCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WideCntrCSR) */ {
 public:
  WideCntrCSR();
  virtual ~WideCntrCSR();

  WideCntrCSR(const WideCntrCSR& from);
  WideCntrCSR(WideCntrCSR&& from) noexcept
    : WideCntrCSR() {
    *this = ::std::move(from);
  }

  inline WideCntrCSR& operator=(const WideCntrCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline WideCntrCSR& operator=(WideCntrCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WideCntrCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WideCntrCSR* internal_default_instance() {
    return reinterpret_cast<const WideCntrCSR*>(
               &_WideCntrCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WideCntrCSR& a, WideCntrCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(WideCntrCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WideCntrCSR* New() const final {
    return CreateMaybeMessage<WideCntrCSR>(nullptr);
  }

  WideCntrCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WideCntrCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WideCntrCSR& from);
  void MergeFrom(const WideCntrCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WideCntrCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WideCntrCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgConfigCsrFieldNumber = 2,
    kMsgValFieldNumber = 1,
  };
  // .SmcntrpmfCSR msg_config_csr = 2;
  bool has_msg_config_csr() const;
  private:
  bool _internal_has_msg_config_csr() const;
  public:
  void clear_msg_config_csr();
  const ::SmcntrpmfCSR& msg_config_csr() const;
  ::SmcntrpmfCSR* release_msg_config_csr();
  ::SmcntrpmfCSR* mutable_msg_config_csr();
  void set_allocated_msg_config_csr(::SmcntrpmfCSR* msg_config_csr);
  private:
  const ::SmcntrpmfCSR& _internal_msg_config_csr() const;
  ::SmcntrpmfCSR* _internal_mutable_msg_config_csr();
  public:

  // uint64 msg_val = 1;
  void clear_msg_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val() const;
  void set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_val() const;
  void _internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:WideCntrCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::SmcntrpmfCSR* msg_config_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class MedelegCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MedelegCSR) */ {
 public:
  MedelegCSR();
  virtual ~MedelegCSR();

  MedelegCSR(const MedelegCSR& from);
  MedelegCSR(MedelegCSR&& from) noexcept
    : MedelegCSR() {
    *this = ::std::move(from);
  }

  inline MedelegCSR& operator=(const MedelegCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline MedelegCSR& operator=(MedelegCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MedelegCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedelegCSR* internal_default_instance() {
    return reinterpret_cast<const MedelegCSR*>(
               &_MedelegCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MedelegCSR& a, MedelegCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(MedelegCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MedelegCSR* New() const final {
    return CreateMaybeMessage<MedelegCSR>(nullptr);
  }

  MedelegCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MedelegCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MedelegCSR& from);
  void MergeFrom(const MedelegCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedelegCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MedelegCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBasicCsrFieldNumber = 1,
    kMsgHypervisorExceptionsFieldNumber = 2,
  };
  // .BasicCSR msg_basic_csr = 1;
  bool has_msg_basic_csr() const;
  private:
  bool _internal_has_msg_basic_csr() const;
  public:
  void clear_msg_basic_csr();
  const ::BasicCSR& msg_basic_csr() const;
  ::BasicCSR* release_msg_basic_csr();
  ::BasicCSR* mutable_msg_basic_csr();
  void set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr);
  private:
  const ::BasicCSR& _internal_msg_basic_csr() const;
  ::BasicCSR* _internal_mutable_msg_basic_csr();
  public:

  // uint64 msg_hypervisor_exceptions = 2;
  void clear_msg_hypervisor_exceptions();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_hypervisor_exceptions() const;
  void set_msg_hypervisor_exceptions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_hypervisor_exceptions() const;
  void _internal_set_msg_hypervisor_exceptions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MedelegCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_basic_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_hypervisor_exceptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class HstateenCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HstateenCSR) */ {
 public:
  HstateenCSR();
  virtual ~HstateenCSR();

  HstateenCSR(const HstateenCSR& from);
  HstateenCSR(HstateenCSR&& from) noexcept
    : HstateenCSR() {
    *this = ::std::move(from);
  }

  inline HstateenCSR& operator=(const HstateenCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline HstateenCSR& operator=(HstateenCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HstateenCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HstateenCSR* internal_default_instance() {
    return reinterpret_cast<const HstateenCSR*>(
               &_HstateenCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(HstateenCSR& a, HstateenCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(HstateenCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HstateenCSR* New() const final {
    return CreateMaybeMessage<HstateenCSR>(nullptr);
  }

  HstateenCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HstateenCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HstateenCSR& from);
  void MergeFrom(const HstateenCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HstateenCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HstateenCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgMaskedCsrFieldNumber = 1,
    kMsgIndexFieldNumber = 2,
  };
  // .MaskedCSR msg_masked_csr = 1;
  bool has_msg_masked_csr() const;
  private:
  bool _internal_has_msg_masked_csr() const;
  public:
  void clear_msg_masked_csr();
  const ::MaskedCSR& msg_masked_csr() const;
  ::MaskedCSR* release_msg_masked_csr();
  ::MaskedCSR* mutable_msg_masked_csr();
  void set_allocated_msg_masked_csr(::MaskedCSR* msg_masked_csr);
  private:
  const ::MaskedCSR& _internal_msg_masked_csr() const;
  ::MaskedCSR* _internal_mutable_msg_masked_csr();
  public:

  // uint32 msg_index = 2;
  void clear_msg_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_index() const;
  void set_msg_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_index() const;
  void _internal_set_msg_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:HstateenCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MaskedCSR* msg_masked_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class TimeProxyCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimeProxyCSR) */ {
 public:
  TimeProxyCSR();
  virtual ~TimeProxyCSR();

  TimeProxyCSR(const TimeProxyCSR& from);
  TimeProxyCSR(TimeProxyCSR&& from) noexcept
    : TimeProxyCSR() {
    *this = ::std::move(from);
  }

  inline TimeProxyCSR& operator=(const TimeProxyCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeProxyCSR& operator=(TimeProxyCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeProxyCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeProxyCSR* internal_default_instance() {
    return reinterpret_cast<const TimeProxyCSR*>(
               &_TimeProxyCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TimeProxyCSR& a, TimeProxyCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeProxyCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeProxyCSR* New() const final {
    return CreateMaybeMessage<TimeProxyCSR>(nullptr);
  }

  TimeProxyCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeProxyCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeProxyCSR& from);
  void MergeFrom(const TimeProxyCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeProxyCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimeProxyCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTimeFieldNumber = 1,
  };
  // .BasicCSR msg_time = 1;
  bool has_msg_time() const;
  private:
  bool _internal_has_msg_time() const;
  public:
  void clear_msg_time();
  const ::BasicCSR& msg_time() const;
  ::BasicCSR* release_msg_time();
  ::BasicCSR* mutable_msg_time();
  void set_allocated_msg_time(::BasicCSR* msg_time);
  private:
  const ::BasicCSR& _internal_msg_time() const;
  ::BasicCSR* _internal_mutable_msg_time();
  public:

  // @@protoc_insertion_point(class_scope:TimeProxyCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class DCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DCSR) */ {
 public:
  DCSR();
  virtual ~DCSR();

  DCSR(const DCSR& from);
  DCSR(DCSR&& from) noexcept
    : DCSR() {
    *this = ::std::move(from);
  }

  inline DCSR& operator=(const DCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCSR& operator=(DCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DCSR* internal_default_instance() {
    return reinterpret_cast<const DCSR*>(
               &_DCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DCSR& a, DCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(DCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCSR* New() const final {
    return CreateMaybeMessage<DCSR>(nullptr);
  }

  DCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCSR& from);
  void MergeFrom(const DCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgPrvFieldNumber = 1,
    kMsgStepFieldNumber = 2,
    kMsgEbreakmFieldNumber = 3,
    kMsgEbreaksFieldNumber = 4,
    kMsgEbreakuFieldNumber = 5,
    kMsgEbreakvsFieldNumber = 6,
    kMsgEbreakvuFieldNumber = 7,
    kMsgHaltFieldNumber = 8,
    kMsgVFieldNumber = 9,
    kMsgCauseFieldNumber = 10,
  };
  // uint32 msg_prv = 1;
  void clear_msg_prv();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_prv() const;
  void set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_prv() const;
  void _internal_set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool msg_step = 2;
  void clear_msg_step();
  bool msg_step() const;
  void set_msg_step(bool value);
  private:
  bool _internal_msg_step() const;
  void _internal_set_msg_step(bool value);
  public:

  // bool msg_ebreakm = 3;
  void clear_msg_ebreakm();
  bool msg_ebreakm() const;
  void set_msg_ebreakm(bool value);
  private:
  bool _internal_msg_ebreakm() const;
  void _internal_set_msg_ebreakm(bool value);
  public:

  // bool msg_ebreaks = 4;
  void clear_msg_ebreaks();
  bool msg_ebreaks() const;
  void set_msg_ebreaks(bool value);
  private:
  bool _internal_msg_ebreaks() const;
  void _internal_set_msg_ebreaks(bool value);
  public:

  // bool msg_ebreaku = 5;
  void clear_msg_ebreaku();
  bool msg_ebreaku() const;
  void set_msg_ebreaku(bool value);
  private:
  bool _internal_msg_ebreaku() const;
  void _internal_set_msg_ebreaku(bool value);
  public:

  // bool msg_ebreakvs = 6;
  void clear_msg_ebreakvs();
  bool msg_ebreakvs() const;
  void set_msg_ebreakvs(bool value);
  private:
  bool _internal_msg_ebreakvs() const;
  void _internal_set_msg_ebreakvs(bool value);
  public:

  // bool msg_ebreakvu = 7;
  void clear_msg_ebreakvu();
  bool msg_ebreakvu() const;
  void set_msg_ebreakvu(bool value);
  private:
  bool _internal_msg_ebreakvu() const;
  void _internal_set_msg_ebreakvu(bool value);
  public:

  // bool msg_halt = 8;
  void clear_msg_halt();
  bool msg_halt() const;
  void set_msg_halt(bool value);
  private:
  bool _internal_msg_halt() const;
  void _internal_set_msg_halt(bool value);
  public:

  // bool msg_v = 9;
  void clear_msg_v();
  bool msg_v() const;
  void set_msg_v(bool value);
  private:
  bool _internal_msg_v() const;
  void _internal_set_msg_v(bool value);
  public:

  // uint32 msg_cause = 10;
  void clear_msg_cause();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cause() const;
  void set_msg_cause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_cause() const;
  void _internal_set_msg_cause(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_prv_;
  bool msg_step_;
  bool msg_ebreakm_;
  bool msg_ebreaks_;
  bool msg_ebreaku_;
  bool msg_ebreakvs_;
  bool msg_ebreakvu_;
  bool msg_halt_;
  bool msg_v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class PmpCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PmpCSR) */ {
 public:
  PmpCSR();
  virtual ~PmpCSR();

  PmpCSR(const PmpCSR& from);
  PmpCSR(PmpCSR&& from) noexcept
    : PmpCSR() {
    *this = ::std::move(from);
  }

  inline PmpCSR& operator=(const PmpCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline PmpCSR& operator=(PmpCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PmpCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PmpCSR* internal_default_instance() {
    return reinterpret_cast<const PmpCSR*>(
               &_PmpCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PmpCSR& a, PmpCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(PmpCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PmpCSR* New() const final {
    return CreateMaybeMessage<PmpCSR>(nullptr);
  }

  PmpCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PmpCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PmpCSR& from);
  void MergeFrom(const PmpCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PmpCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PmpCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBasicCsrFieldNumber = 1,
    kMsgPmpidxFieldNumber = 3,
    kMsgCfgFieldNumber = 2,
  };
  // .BasicCSR msg_basic_csr = 1;
  bool has_msg_basic_csr() const;
  private:
  bool _internal_has_msg_basic_csr() const;
  public:
  void clear_msg_basic_csr();
  const ::BasicCSR& msg_basic_csr() const;
  ::BasicCSR* release_msg_basic_csr();
  ::BasicCSR* mutable_msg_basic_csr();
  void set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr);
  private:
  const ::BasicCSR& _internal_msg_basic_csr() const;
  ::BasicCSR* _internal_mutable_msg_basic_csr();
  public:

  // uint64 msg_pmpidx = 3;
  void clear_msg_pmpidx();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_pmpidx() const;
  void set_msg_pmpidx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_pmpidx() const;
  void _internal_set_msg_pmpidx(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 msg_cfg = 2;
  void clear_msg_cfg();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cfg() const;
  void set_msg_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_cfg() const;
  void _internal_set_msg_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PmpCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_basic_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_pmpidx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class StimecmpCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StimecmpCSR) */ {
 public:
  StimecmpCSR();
  virtual ~StimecmpCSR();

  StimecmpCSR(const StimecmpCSR& from);
  StimecmpCSR(StimecmpCSR&& from) noexcept
    : StimecmpCSR() {
    *this = ::std::move(from);
  }

  inline StimecmpCSR& operator=(const StimecmpCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline StimecmpCSR& operator=(StimecmpCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StimecmpCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StimecmpCSR* internal_default_instance() {
    return reinterpret_cast<const StimecmpCSR*>(
               &_StimecmpCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StimecmpCSR& a, StimecmpCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(StimecmpCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StimecmpCSR* New() const final {
    return CreateMaybeMessage<StimecmpCSR>(nullptr);
  }

  StimecmpCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StimecmpCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StimecmpCSR& from);
  void MergeFrom(const StimecmpCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StimecmpCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StimecmpCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBasicCsrFieldNumber = 1,
    kMsgIntrMaskFieldNumber = 2,
  };
  // .BasicCSR msg_basic_csr = 1;
  bool has_msg_basic_csr() const;
  private:
  bool _internal_has_msg_basic_csr() const;
  public:
  void clear_msg_basic_csr();
  const ::BasicCSR& msg_basic_csr() const;
  ::BasicCSR* release_msg_basic_csr();
  ::BasicCSR* mutable_msg_basic_csr();
  void set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr);
  private:
  const ::BasicCSR& _internal_msg_basic_csr() const;
  ::BasicCSR* _internal_mutable_msg_basic_csr();
  public:

  // uint64 msg_intr_mask = 2;
  void clear_msg_intr_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_intr_mask() const;
  void set_msg_intr_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_intr_mask() const;
  void _internal_set_msg_intr_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:StimecmpCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasicCSR* msg_basic_csr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_intr_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class HidelegCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HidelegCSR) */ {
 public:
  HidelegCSR();
  virtual ~HidelegCSR();

  HidelegCSR(const HidelegCSR& from);
  HidelegCSR(HidelegCSR&& from) noexcept
    : HidelegCSR() {
    *this = ::std::move(from);
  }

  inline HidelegCSR& operator=(const HidelegCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline HidelegCSR& operator=(HidelegCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HidelegCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HidelegCSR* internal_default_instance() {
    return reinterpret_cast<const HidelegCSR*>(
               &_HidelegCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(HidelegCSR& a, HidelegCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(HidelegCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HidelegCSR* New() const final {
    return CreateMaybeMessage<HidelegCSR>(nullptr);
  }

  HidelegCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HidelegCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HidelegCSR& from);
  void MergeFrom(const HidelegCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HidelegCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HidelegCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHidelegCsrFieldNumber = 1,
    kMsgMidelegCsrFieldNumber = 2,
  };
  // .MaskedCSR msg_hideleg_csr = 1;
  bool has_msg_hideleg_csr() const;
  private:
  bool _internal_has_msg_hideleg_csr() const;
  public:
  void clear_msg_hideleg_csr();
  const ::MaskedCSR& msg_hideleg_csr() const;
  ::MaskedCSR* release_msg_hideleg_csr();
  ::MaskedCSR* mutable_msg_hideleg_csr();
  void set_allocated_msg_hideleg_csr(::MaskedCSR* msg_hideleg_csr);
  private:
  const ::MaskedCSR& _internal_msg_hideleg_csr() const;
  ::MaskedCSR* _internal_mutable_msg_hideleg_csr();
  public:

  // .BasicCSR msg_mideleg_csr = 2;
  bool has_msg_mideleg_csr() const;
  private:
  bool _internal_has_msg_mideleg_csr() const;
  public:
  void clear_msg_mideleg_csr();
  const ::BasicCSR& msg_mideleg_csr() const;
  ::BasicCSR* release_msg_mideleg_csr();
  ::BasicCSR* mutable_msg_mideleg_csr();
  void set_allocated_msg_mideleg_csr(::BasicCSR* msg_mideleg_csr);
  private:
  const ::BasicCSR& _internal_msg_mideleg_csr() const;
  ::BasicCSR* _internal_mutable_msg_mideleg_csr();
  public:

  // @@protoc_insertion_point(class_scope:HidelegCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MaskedCSR* msg_hideleg_csr_;
  ::BasicCSR* msg_mideleg_csr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class McontextCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:McontextCSR) */ {
 public:
  McontextCSR();
  virtual ~McontextCSR();

  McontextCSR(const McontextCSR& from);
  McontextCSR(McontextCSR&& from) noexcept
    : McontextCSR() {
    *this = ::std::move(from);
  }

  inline McontextCSR& operator=(const McontextCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline McontextCSR& operator=(McontextCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const McontextCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const McontextCSR* internal_default_instance() {
    return reinterpret_cast<const McontextCSR*>(
               &_McontextCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(McontextCSR& a, McontextCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(McontextCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline McontextCSR* New() const final {
    return CreateMaybeMessage<McontextCSR>(nullptr);
  }

  McontextCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<McontextCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const McontextCSR& from);
  void MergeFrom(const McontextCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(McontextCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "McontextCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgDelegateFieldNumber = 2,
  };
  // .MaskedCSR msg_delegate = 2;
  bool has_msg_delegate() const;
  private:
  bool _internal_has_msg_delegate() const;
  public:
  void clear_msg_delegate();
  const ::MaskedCSR& msg_delegate() const;
  ::MaskedCSR* release_msg_delegate();
  ::MaskedCSR* mutable_msg_delegate();
  void set_allocated_msg_delegate(::MaskedCSR* msg_delegate);
  private:
  const ::MaskedCSR& _internal_msg_delegate() const;
  ::MaskedCSR* _internal_mutable_msg_delegate();
  public:

  // @@protoc_insertion_point(class_scope:McontextCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MaskedCSR* msg_delegate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class HenvcfgCSR :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HenvcfgCSR) */ {
 public:
  HenvcfgCSR();
  virtual ~HenvcfgCSR();

  HenvcfgCSR(const HenvcfgCSR& from);
  HenvcfgCSR(HenvcfgCSR&& from) noexcept
    : HenvcfgCSR() {
    *this = ::std::move(from);
  }

  inline HenvcfgCSR& operator=(const HenvcfgCSR& from) {
    CopyFrom(from);
    return *this;
  }
  inline HenvcfgCSR& operator=(HenvcfgCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HenvcfgCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HenvcfgCSR* internal_default_instance() {
    return reinterpret_cast<const HenvcfgCSR*>(
               &_HenvcfgCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(HenvcfgCSR& a, HenvcfgCSR& b) {
    a.Swap(&b);
  }
  inline void Swap(HenvcfgCSR* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HenvcfgCSR* New() const final {
    return CreateMaybeMessage<HenvcfgCSR>(nullptr);
  }

  HenvcfgCSR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HenvcfgCSR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HenvcfgCSR& from);
  void MergeFrom(const HenvcfgCSR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HenvcfgCSR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HenvcfgCSR";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHenvcfgFieldNumber = 1,
    kMsgMenvcfgFieldNumber = 2,
  };
  // .MaskedCSR msg_henvcfg = 1;
  bool has_msg_henvcfg() const;
  private:
  bool _internal_has_msg_henvcfg() const;
  public:
  void clear_msg_henvcfg();
  const ::MaskedCSR& msg_henvcfg() const;
  ::MaskedCSR* release_msg_henvcfg();
  ::MaskedCSR* mutable_msg_henvcfg();
  void set_allocated_msg_henvcfg(::MaskedCSR* msg_henvcfg);
  private:
  const ::MaskedCSR& _internal_msg_henvcfg() const;
  ::MaskedCSR* _internal_mutable_msg_henvcfg();
  public:

  // .MaskedCSR msg_menvcfg = 2;
  bool has_msg_menvcfg() const;
  private:
  bool _internal_has_msg_menvcfg() const;
  public:
  void clear_msg_menvcfg();
  const ::MaskedCSR& msg_menvcfg() const;
  ::MaskedCSR* release_msg_menvcfg();
  ::MaskedCSR* mutable_msg_menvcfg();
  void set_allocated_msg_menvcfg(::MaskedCSR* msg_menvcfg);
  private:
  const ::MaskedCSR& _internal_msg_menvcfg() const;
  ::MaskedCSR* _internal_mutable_msg_menvcfg();
  public:

  // @@protoc_insertion_point(class_scope:HenvcfgCSR)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MaskedCSR* msg_henvcfg_;
  ::MaskedCSR* msg_menvcfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class Float128 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Float128) */ {
 public:
  Float128();
  virtual ~Float128();

  Float128(const Float128& from);
  Float128(Float128&& from) noexcept
    : Float128() {
    *this = ::std::move(from);
  }

  inline Float128& operator=(const Float128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float128& operator=(Float128&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Float128& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float128* internal_default_instance() {
    return reinterpret_cast<const Float128*>(
               &_Float128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Float128& a, Float128& b) {
    a.Swap(&b);
  }
  inline void Swap(Float128* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Float128* New() const final {
    return CreateMaybeMessage<Float128>(nullptr);
  }

  Float128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Float128>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Float128& from);
  void MergeFrom(const Float128& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float128* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Float128";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsg0FieldNumber = 1,
    kMsg1FieldNumber = 2,
  };
  // uint64 msg_0 = 1;
  void clear_msg_0();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_0() const;
  void set_msg_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_0() const;
  void _internal_set_msg_0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_1 = 2;
  void clear_msg_1();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_1() const;
  void set_msg_1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_1() const;
  void _internal_set_msg_1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Float128)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class ArchState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ArchState) */ {
 public:
  ArchState();
  virtual ~ArchState();

  ArchState(const ArchState& from);
  ArchState(ArchState&& from) noexcept
    : ArchState() {
    *this = ::std::move(from);
  }

  inline ArchState& operator=(const ArchState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchState& operator=(ArchState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArchState* internal_default_instance() {
    return reinterpret_cast<const ArchState*>(
               &_ArchState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ArchState& a, ArchState& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchState* New() const final {
    return CreateMaybeMessage<ArchState>(nullptr);
  }

  ArchState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchState& from);
  void MergeFrom(const ArchState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ArchState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgXPRFieldNumber = 2,
    kMsgFPRFieldNumber = 3,
    kMsgMeventFieldNumber = 20,
    kMsgPmpaddrFieldNumber = 70,
    kMsgMstateenFieldNumber = 84,
    kMsgSstateenFieldNumber = 85,
    kMsgHstateenFieldNumber = 86,
    kMsgMisaFieldNumber = 10,
    kMsgMstatusFieldNumber = 11,
    kMsgMepcFieldNumber = 12,
    kMsgMtvalFieldNumber = 13,
    kMsgMscratchFieldNumber = 14,
    kMsgMtvecFieldNumber = 15,
    kMsgMcauseFieldNumber = 16,
    kMsgMinstretFieldNumber = 17,
    kMsgMcycleFieldNumber = 18,
    kMsgTimeFieldNumber = 19,
    kMsgMieFieldNumber = 25,
    kMsgMipFieldNumber = 26,
    kMsgMedelegFieldNumber = 34,
    kMsgMcounterenFieldNumber = 36,
    kMsgScounterenFieldNumber = 37,
    kMsgSepcFieldNumber = 38,
    kMsgStvalFieldNumber = 39,
    kMsgSscratchFieldNumber = 40,
    kMsgStvecFieldNumber = 41,
    kMsgSatpFieldNumber = 42,
    kMsgScauseFieldNumber = 43,
    kMsgMtval2FieldNumber = 44,
    kMsgMtinstFieldNumber = 45,
    kMsgHstatusFieldNumber = 46,
    kMsgHidelegFieldNumber = 49,
    kMsgHedelegFieldNumber = 50,
    kMsgHcounterenFieldNumber = 51,
    kMsgHtimedeltaFieldNumber = 52,
    kMsgHtvalFieldNumber = 53,
    kMsgHtinstFieldNumber = 54,
    kMsgHgatpFieldNumber = 55,
    kMsgSstatusFieldNumber = 56,
    kMsgDpcFieldNumber = 57,
    kMsgDscratch0FieldNumber = 58,
    kMsgDscratch1FieldNumber = 59,
    kMsgDcsrFieldNumber = 60,
    kMsgTselectFieldNumber = 61,
    kMsgScontextFieldNumber = 66,
    kMsgHcontextFieldNumber = 67,
    kMsgMseccfgFieldNumber = 69,
    kMsgFflagsFieldNumber = 72,
    kMsgFrmFieldNumber = 73,
    kMsgSenvcfgFieldNumber = 82,
    kMsgHenvcfgFieldNumber = 83,
    kMsgMnscratchFieldNumber = 87,
    kMsgMnepcFieldNumber = 88,
    kMsgMnstatusFieldNumber = 90,
    kMsgStimecmpFieldNumber = 91,
    kMsgVstimecmpFieldNumber = 92,
    kMsgJvtFieldNumber = 93,
    kMsgMiselectFieldNumber = 94,
    kMsgSiselectFieldNumber = 101,
    kMsgPcFieldNumber = 1,
    kMsgPrvFieldNumber = 4,
    kMsgPrevPrvFieldNumber = 5,
    kMsgPrvChangedFieldNumber = 6,
    kMsgVChangedFieldNumber = 7,
    kMsgVFieldNumber = 8,
    kMsgPrevVFieldNumber = 9,
    kMsgDebugModeFieldNumber = 116,
    kMsgSerializedFieldNumber = 117,
    kMsgLastInstFlenFieldNumber = 121,
    kMsgLastInstPrivFieldNumber = 119,
    kMsgSingleStepFieldNumber = 118,
    kMsgLastInstXlenFieldNumber = 120,
  };
  // repeated uint64 msg_XPR = 2;
  int msg_xpr_size() const;
  private:
  int _internal_msg_xpr_size() const;
  public:
  void clear_msg_xpr();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_xpr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_msg_xpr() const;
  void _internal_add_msg_xpr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_msg_xpr();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_xpr(int index) const;
  void set_msg_xpr(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_msg_xpr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      msg_xpr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_msg_xpr();

  // repeated .Float128 msg_FPR = 3;
  int msg_fpr_size() const;
  private:
  int _internal_msg_fpr_size() const;
  public:
  void clear_msg_fpr();
  ::Float128* mutable_msg_fpr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Float128 >*
      mutable_msg_fpr();
  private:
  const ::Float128& _internal_msg_fpr(int index) const;
  ::Float128* _internal_add_msg_fpr();
  public:
  const ::Float128& msg_fpr(int index) const;
  ::Float128* add_msg_fpr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Float128 >&
      msg_fpr() const;

  // repeated .BasicCSR msg_mevent = 20;
  int msg_mevent_size() const;
  private:
  int _internal_msg_mevent_size() const;
  public:
  void clear_msg_mevent();
  ::BasicCSR* mutable_msg_mevent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicCSR >*
      mutable_msg_mevent();
  private:
  const ::BasicCSR& _internal_msg_mevent(int index) const;
  ::BasicCSR* _internal_add_msg_mevent();
  public:
  const ::BasicCSR& msg_mevent(int index) const;
  ::BasicCSR* add_msg_mevent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicCSR >&
      msg_mevent() const;

  // repeated .PmpCSR msg_pmpaddr = 70;
  int msg_pmpaddr_size() const;
  private:
  int _internal_msg_pmpaddr_size() const;
  public:
  void clear_msg_pmpaddr();
  ::PmpCSR* mutable_msg_pmpaddr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PmpCSR >*
      mutable_msg_pmpaddr();
  private:
  const ::PmpCSR& _internal_msg_pmpaddr(int index) const;
  ::PmpCSR* _internal_add_msg_pmpaddr();
  public:
  const ::PmpCSR& msg_pmpaddr(int index) const;
  ::PmpCSR* add_msg_pmpaddr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PmpCSR >&
      msg_pmpaddr() const;

  // repeated .MaskedCSR msg_mstateen = 84;
  int msg_mstateen_size() const;
  private:
  int _internal_msg_mstateen_size() const;
  public:
  void clear_msg_mstateen();
  ::MaskedCSR* mutable_msg_mstateen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MaskedCSR >*
      mutable_msg_mstateen();
  private:
  const ::MaskedCSR& _internal_msg_mstateen(int index) const;
  ::MaskedCSR* _internal_add_msg_mstateen();
  public:
  const ::MaskedCSR& msg_mstateen(int index) const;
  ::MaskedCSR* add_msg_mstateen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MaskedCSR >&
      msg_mstateen() const;

  // repeated .HstateenCSR msg_sstateen = 85;
  int msg_sstateen_size() const;
  private:
  int _internal_msg_sstateen_size() const;
  public:
  void clear_msg_sstateen();
  ::HstateenCSR* mutable_msg_sstateen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >*
      mutable_msg_sstateen();
  private:
  const ::HstateenCSR& _internal_msg_sstateen(int index) const;
  ::HstateenCSR* _internal_add_msg_sstateen();
  public:
  const ::HstateenCSR& msg_sstateen(int index) const;
  ::HstateenCSR* add_msg_sstateen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >&
      msg_sstateen() const;

  // repeated .HstateenCSR msg_hstateen = 86;
  int msg_hstateen_size() const;
  private:
  int _internal_msg_hstateen_size() const;
  public:
  void clear_msg_hstateen();
  ::HstateenCSR* mutable_msg_hstateen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >*
      mutable_msg_hstateen();
  private:
  const ::HstateenCSR& _internal_msg_hstateen(int index) const;
  ::HstateenCSR* _internal_add_msg_hstateen();
  public:
  const ::HstateenCSR& msg_hstateen(int index) const;
  ::HstateenCSR* add_msg_hstateen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >&
      msg_hstateen() const;

  // .MisaCSR msg_misa = 10;
  bool has_msg_misa() const;
  private:
  bool _internal_has_msg_misa() const;
  public:
  void clear_msg_misa();
  const ::MisaCSR& msg_misa() const;
  ::MisaCSR* release_msg_misa();
  ::MisaCSR* mutable_msg_misa();
  void set_allocated_msg_misa(::MisaCSR* msg_misa);
  private:
  const ::MisaCSR& _internal_msg_misa() const;
  ::MisaCSR* _internal_mutable_msg_misa();
  public:

  // .MstatusCSR msg_mstatus = 11;
  bool has_msg_mstatus() const;
  private:
  bool _internal_has_msg_mstatus() const;
  public:
  void clear_msg_mstatus();
  const ::MstatusCSR& msg_mstatus() const;
  ::MstatusCSR* release_msg_mstatus();
  ::MstatusCSR* mutable_msg_mstatus();
  void set_allocated_msg_mstatus(::MstatusCSR* msg_mstatus);
  private:
  const ::MstatusCSR& _internal_msg_mstatus() const;
  ::MstatusCSR* _internal_mutable_msg_mstatus();
  public:

  // .BasicCSR msg_mepc = 12;
  bool has_msg_mepc() const;
  private:
  bool _internal_has_msg_mepc() const;
  public:
  void clear_msg_mepc();
  const ::BasicCSR& msg_mepc() const;
  ::BasicCSR* release_msg_mepc();
  ::BasicCSR* mutable_msg_mepc();
  void set_allocated_msg_mepc(::BasicCSR* msg_mepc);
  private:
  const ::BasicCSR& _internal_msg_mepc() const;
  ::BasicCSR* _internal_mutable_msg_mepc();
  public:

  // .BasicCSR msg_mtval = 13;
  bool has_msg_mtval() const;
  private:
  bool _internal_has_msg_mtval() const;
  public:
  void clear_msg_mtval();
  const ::BasicCSR& msg_mtval() const;
  ::BasicCSR* release_msg_mtval();
  ::BasicCSR* mutable_msg_mtval();
  void set_allocated_msg_mtval(::BasicCSR* msg_mtval);
  private:
  const ::BasicCSR& _internal_msg_mtval() const;
  ::BasicCSR* _internal_mutable_msg_mtval();
  public:

  // .BasicCSR msg_mscratch = 14;
  bool has_msg_mscratch() const;
  private:
  bool _internal_has_msg_mscratch() const;
  public:
  void clear_msg_mscratch();
  const ::BasicCSR& msg_mscratch() const;
  ::BasicCSR* release_msg_mscratch();
  ::BasicCSR* mutable_msg_mscratch();
  void set_allocated_msg_mscratch(::BasicCSR* msg_mscratch);
  private:
  const ::BasicCSR& _internal_msg_mscratch() const;
  ::BasicCSR* _internal_mutable_msg_mscratch();
  public:

  // .BasicCSR msg_mtvec = 15;
  bool has_msg_mtvec() const;
  private:
  bool _internal_has_msg_mtvec() const;
  public:
  void clear_msg_mtvec();
  const ::BasicCSR& msg_mtvec() const;
  ::BasicCSR* release_msg_mtvec();
  ::BasicCSR* mutable_msg_mtvec();
  void set_allocated_msg_mtvec(::BasicCSR* msg_mtvec);
  private:
  const ::BasicCSR& _internal_msg_mtvec() const;
  ::BasicCSR* _internal_mutable_msg_mtvec();
  public:

  // .BasicCSR msg_mcause = 16;
  bool has_msg_mcause() const;
  private:
  bool _internal_has_msg_mcause() const;
  public:
  void clear_msg_mcause();
  const ::BasicCSR& msg_mcause() const;
  ::BasicCSR* release_msg_mcause();
  ::BasicCSR* mutable_msg_mcause();
  void set_allocated_msg_mcause(::BasicCSR* msg_mcause);
  private:
  const ::BasicCSR& _internal_msg_mcause() const;
  ::BasicCSR* _internal_mutable_msg_mcause();
  public:

  // .WideCntrCSR msg_minstret = 17;
  bool has_msg_minstret() const;
  private:
  bool _internal_has_msg_minstret() const;
  public:
  void clear_msg_minstret();
  const ::WideCntrCSR& msg_minstret() const;
  ::WideCntrCSR* release_msg_minstret();
  ::WideCntrCSR* mutable_msg_minstret();
  void set_allocated_msg_minstret(::WideCntrCSR* msg_minstret);
  private:
  const ::WideCntrCSR& _internal_msg_minstret() const;
  ::WideCntrCSR* _internal_mutable_msg_minstret();
  public:

  // .WideCntrCSR msg_mcycle = 18;
  bool has_msg_mcycle() const;
  private:
  bool _internal_has_msg_mcycle() const;
  public:
  void clear_msg_mcycle();
  const ::WideCntrCSR& msg_mcycle() const;
  ::WideCntrCSR* release_msg_mcycle();
  ::WideCntrCSR* mutable_msg_mcycle();
  void set_allocated_msg_mcycle(::WideCntrCSR* msg_mcycle);
  private:
  const ::WideCntrCSR& _internal_msg_mcycle() const;
  ::WideCntrCSR* _internal_mutable_msg_mcycle();
  public:

  // .BasicCSR msg_time = 19;
  bool has_msg_time() const;
  private:
  bool _internal_has_msg_time() const;
  public:
  void clear_msg_time();
  const ::BasicCSR& msg_time() const;
  ::BasicCSR* release_msg_time();
  ::BasicCSR* mutable_msg_time();
  void set_allocated_msg_time(::BasicCSR* msg_time);
  private:
  const ::BasicCSR& _internal_msg_time() const;
  ::BasicCSR* _internal_mutable_msg_time();
  public:

  // .BasicCSR msg_mie = 25;
  bool has_msg_mie() const;
  private:
  bool _internal_has_msg_mie() const;
  public:
  void clear_msg_mie();
  const ::BasicCSR& msg_mie() const;
  ::BasicCSR* release_msg_mie();
  ::BasicCSR* mutable_msg_mie();
  void set_allocated_msg_mie(::BasicCSR* msg_mie);
  private:
  const ::BasicCSR& _internal_msg_mie() const;
  ::BasicCSR* _internal_mutable_msg_mie();
  public:

  // .BasicCSR msg_mip = 26;
  bool has_msg_mip() const;
  private:
  bool _internal_has_msg_mip() const;
  public:
  void clear_msg_mip();
  const ::BasicCSR& msg_mip() const;
  ::BasicCSR* release_msg_mip();
  ::BasicCSR* mutable_msg_mip();
  void set_allocated_msg_mip(::BasicCSR* msg_mip);
  private:
  const ::BasicCSR& _internal_msg_mip() const;
  ::BasicCSR* _internal_mutable_msg_mip();
  public:

  // .MedelegCSR msg_medeleg = 34;
  bool has_msg_medeleg() const;
  private:
  bool _internal_has_msg_medeleg() const;
  public:
  void clear_msg_medeleg();
  const ::MedelegCSR& msg_medeleg() const;
  ::MedelegCSR* release_msg_medeleg();
  ::MedelegCSR* mutable_msg_medeleg();
  void set_allocated_msg_medeleg(::MedelegCSR* msg_medeleg);
  private:
  const ::MedelegCSR& _internal_msg_medeleg() const;
  ::MedelegCSR* _internal_mutable_msg_medeleg();
  public:

  // .MaskedCSR msg_mcounteren = 36;
  bool has_msg_mcounteren() const;
  private:
  bool _internal_has_msg_mcounteren() const;
  public:
  void clear_msg_mcounteren();
  const ::MaskedCSR& msg_mcounteren() const;
  ::MaskedCSR* release_msg_mcounteren();
  ::MaskedCSR* mutable_msg_mcounteren();
  void set_allocated_msg_mcounteren(::MaskedCSR* msg_mcounteren);
  private:
  const ::MaskedCSR& _internal_msg_mcounteren() const;
  ::MaskedCSR* _internal_mutable_msg_mcounteren();
  public:

  // .MaskedCSR msg_scounteren = 37;
  bool has_msg_scounteren() const;
  private:
  bool _internal_has_msg_scounteren() const;
  public:
  void clear_msg_scounteren();
  const ::MaskedCSR& msg_scounteren() const;
  ::MaskedCSR* release_msg_scounteren();
  ::MaskedCSR* mutable_msg_scounteren();
  void set_allocated_msg_scounteren(::MaskedCSR* msg_scounteren);
  private:
  const ::MaskedCSR& _internal_msg_scounteren() const;
  ::MaskedCSR* _internal_mutable_msg_scounteren();
  public:

  // .VirtBasicCSR msg_sepc = 38;
  bool has_msg_sepc() const;
  private:
  bool _internal_has_msg_sepc() const;
  public:
  void clear_msg_sepc();
  const ::VirtBasicCSR& msg_sepc() const;
  ::VirtBasicCSR* release_msg_sepc();
  ::VirtBasicCSR* mutable_msg_sepc();
  void set_allocated_msg_sepc(::VirtBasicCSR* msg_sepc);
  private:
  const ::VirtBasicCSR& _internal_msg_sepc() const;
  ::VirtBasicCSR* _internal_mutable_msg_sepc();
  public:

  // .VirtBasicCSR msg_stval = 39;
  bool has_msg_stval() const;
  private:
  bool _internal_has_msg_stval() const;
  public:
  void clear_msg_stval();
  const ::VirtBasicCSR& msg_stval() const;
  ::VirtBasicCSR* release_msg_stval();
  ::VirtBasicCSR* mutable_msg_stval();
  void set_allocated_msg_stval(::VirtBasicCSR* msg_stval);
  private:
  const ::VirtBasicCSR& _internal_msg_stval() const;
  ::VirtBasicCSR* _internal_mutable_msg_stval();
  public:

  // .VirtBasicCSR msg_sscratch = 40;
  bool has_msg_sscratch() const;
  private:
  bool _internal_has_msg_sscratch() const;
  public:
  void clear_msg_sscratch();
  const ::VirtBasicCSR& msg_sscratch() const;
  ::VirtBasicCSR* release_msg_sscratch();
  ::VirtBasicCSR* mutable_msg_sscratch();
  void set_allocated_msg_sscratch(::VirtBasicCSR* msg_sscratch);
  private:
  const ::VirtBasicCSR& _internal_msg_sscratch() const;
  ::VirtBasicCSR* _internal_mutable_msg_sscratch();
  public:

  // .VirtBasicCSR msg_stvec = 41;
  bool has_msg_stvec() const;
  private:
  bool _internal_has_msg_stvec() const;
  public:
  void clear_msg_stvec();
  const ::VirtBasicCSR& msg_stvec() const;
  ::VirtBasicCSR* release_msg_stvec();
  ::VirtBasicCSR* mutable_msg_stvec();
  void set_allocated_msg_stvec(::VirtBasicCSR* msg_stvec);
  private:
  const ::VirtBasicCSR& _internal_msg_stvec() const;
  ::VirtBasicCSR* _internal_mutable_msg_stvec();
  public:

  // .VirtBasicCSR msg_satp = 42;
  bool has_msg_satp() const;
  private:
  bool _internal_has_msg_satp() const;
  public:
  void clear_msg_satp();
  const ::VirtBasicCSR& msg_satp() const;
  ::VirtBasicCSR* release_msg_satp();
  ::VirtBasicCSR* mutable_msg_satp();
  void set_allocated_msg_satp(::VirtBasicCSR* msg_satp);
  private:
  const ::VirtBasicCSR& _internal_msg_satp() const;
  ::VirtBasicCSR* _internal_mutable_msg_satp();
  public:

  // .VirtBasicCSR msg_scause = 43;
  bool has_msg_scause() const;
  private:
  bool _internal_has_msg_scause() const;
  public:
  void clear_msg_scause();
  const ::VirtBasicCSR& msg_scause() const;
  ::VirtBasicCSR* release_msg_scause();
  ::VirtBasicCSR* mutable_msg_scause();
  void set_allocated_msg_scause(::VirtBasicCSR* msg_scause);
  private:
  const ::VirtBasicCSR& _internal_msg_scause() const;
  ::VirtBasicCSR* _internal_mutable_msg_scause();
  public:

  // .BasicCSR msg_mtval2 = 44;
  bool has_msg_mtval2() const;
  private:
  bool _internal_has_msg_mtval2() const;
  public:
  void clear_msg_mtval2();
  const ::BasicCSR& msg_mtval2() const;
  ::BasicCSR* release_msg_mtval2();
  ::BasicCSR* mutable_msg_mtval2();
  void set_allocated_msg_mtval2(::BasicCSR* msg_mtval2);
  private:
  const ::BasicCSR& _internal_msg_mtval2() const;
  ::BasicCSR* _internal_mutable_msg_mtval2();
  public:

  // .BasicCSR msg_mtinst = 45;
  bool has_msg_mtinst() const;
  private:
  bool _internal_has_msg_mtinst() const;
  public:
  void clear_msg_mtinst();
  const ::BasicCSR& msg_mtinst() const;
  ::BasicCSR* release_msg_mtinst();
  ::BasicCSR* mutable_msg_mtinst();
  void set_allocated_msg_mtinst(::BasicCSR* msg_mtinst);
  private:
  const ::BasicCSR& _internal_msg_mtinst() const;
  ::BasicCSR* _internal_mutable_msg_mtinst();
  public:

  // .MaskedCSR msg_hstatus = 46;
  bool has_msg_hstatus() const;
  private:
  bool _internal_has_msg_hstatus() const;
  public:
  void clear_msg_hstatus();
  const ::MaskedCSR& msg_hstatus() const;
  ::MaskedCSR* release_msg_hstatus();
  ::MaskedCSR* mutable_msg_hstatus();
  void set_allocated_msg_hstatus(::MaskedCSR* msg_hstatus);
  private:
  const ::MaskedCSR& _internal_msg_hstatus() const;
  ::MaskedCSR* _internal_mutable_msg_hstatus();
  public:

  // .HidelegCSR msg_hideleg = 49;
  bool has_msg_hideleg() const;
  private:
  bool _internal_has_msg_hideleg() const;
  public:
  void clear_msg_hideleg();
  const ::HidelegCSR& msg_hideleg() const;
  ::HidelegCSR* release_msg_hideleg();
  ::HidelegCSR* mutable_msg_hideleg();
  void set_allocated_msg_hideleg(::HidelegCSR* msg_hideleg);
  private:
  const ::HidelegCSR& _internal_msg_hideleg() const;
  ::HidelegCSR* _internal_mutable_msg_hideleg();
  public:

  // .MaskedCSR msg_hedeleg = 50;
  bool has_msg_hedeleg() const;
  private:
  bool _internal_has_msg_hedeleg() const;
  public:
  void clear_msg_hedeleg();
  const ::MaskedCSR& msg_hedeleg() const;
  ::MaskedCSR* release_msg_hedeleg();
  ::MaskedCSR* mutable_msg_hedeleg();
  void set_allocated_msg_hedeleg(::MaskedCSR* msg_hedeleg);
  private:
  const ::MaskedCSR& _internal_msg_hedeleg() const;
  ::MaskedCSR* _internal_mutable_msg_hedeleg();
  public:

  // .MaskedCSR msg_hcounteren = 51;
  bool has_msg_hcounteren() const;
  private:
  bool _internal_has_msg_hcounteren() const;
  public:
  void clear_msg_hcounteren();
  const ::MaskedCSR& msg_hcounteren() const;
  ::MaskedCSR* release_msg_hcounteren();
  ::MaskedCSR* mutable_msg_hcounteren();
  void set_allocated_msg_hcounteren(::MaskedCSR* msg_hcounteren);
  private:
  const ::MaskedCSR& _internal_msg_hcounteren() const;
  ::MaskedCSR* _internal_mutable_msg_hcounteren();
  public:

  // .BasicCSR msg_htimedelta = 52;
  bool has_msg_htimedelta() const;
  private:
  bool _internal_has_msg_htimedelta() const;
  public:
  void clear_msg_htimedelta();
  const ::BasicCSR& msg_htimedelta() const;
  ::BasicCSR* release_msg_htimedelta();
  ::BasicCSR* mutable_msg_htimedelta();
  void set_allocated_msg_htimedelta(::BasicCSR* msg_htimedelta);
  private:
  const ::BasicCSR& _internal_msg_htimedelta() const;
  ::BasicCSR* _internal_mutable_msg_htimedelta();
  public:

  // .BasicCSR msg_htval = 53;
  bool has_msg_htval() const;
  private:
  bool _internal_has_msg_htval() const;
  public:
  void clear_msg_htval();
  const ::BasicCSR& msg_htval() const;
  ::BasicCSR* release_msg_htval();
  ::BasicCSR* mutable_msg_htval();
  void set_allocated_msg_htval(::BasicCSR* msg_htval);
  private:
  const ::BasicCSR& _internal_msg_htval() const;
  ::BasicCSR* _internal_mutable_msg_htval();
  public:

  // .BasicCSR msg_htinst = 54;
  bool has_msg_htinst() const;
  private:
  bool _internal_has_msg_htinst() const;
  public:
  void clear_msg_htinst();
  const ::BasicCSR& msg_htinst() const;
  ::BasicCSR* release_msg_htinst();
  ::BasicCSR* mutable_msg_htinst();
  void set_allocated_msg_htinst(::BasicCSR* msg_htinst);
  private:
  const ::BasicCSR& _internal_msg_htinst() const;
  ::BasicCSR* _internal_mutable_msg_htinst();
  public:

  // .BasicCSR msg_hgatp = 55;
  bool has_msg_hgatp() const;
  private:
  bool _internal_has_msg_hgatp() const;
  public:
  void clear_msg_hgatp();
  const ::BasicCSR& msg_hgatp() const;
  ::BasicCSR* release_msg_hgatp();
  ::BasicCSR* mutable_msg_hgatp();
  void set_allocated_msg_hgatp(::BasicCSR* msg_hgatp);
  private:
  const ::BasicCSR& _internal_msg_hgatp() const;
  ::BasicCSR* _internal_mutable_msg_hgatp();
  public:

  // .SstatusCSR msg_sstatus = 56;
  bool has_msg_sstatus() const;
  private:
  bool _internal_has_msg_sstatus() const;
  public:
  void clear_msg_sstatus();
  const ::SstatusCSR& msg_sstatus() const;
  ::SstatusCSR* release_msg_sstatus();
  ::SstatusCSR* mutable_msg_sstatus();
  void set_allocated_msg_sstatus(::SstatusCSR* msg_sstatus);
  private:
  const ::SstatusCSR& _internal_msg_sstatus() const;
  ::SstatusCSR* _internal_mutable_msg_sstatus();
  public:

  // .BasicCSR msg_dpc = 57;
  bool has_msg_dpc() const;
  private:
  bool _internal_has_msg_dpc() const;
  public:
  void clear_msg_dpc();
  const ::BasicCSR& msg_dpc() const;
  ::BasicCSR* release_msg_dpc();
  ::BasicCSR* mutable_msg_dpc();
  void set_allocated_msg_dpc(::BasicCSR* msg_dpc);
  private:
  const ::BasicCSR& _internal_msg_dpc() const;
  ::BasicCSR* _internal_mutable_msg_dpc();
  public:

  // .BasicCSR msg_dscratch0 = 58;
  bool has_msg_dscratch0() const;
  private:
  bool _internal_has_msg_dscratch0() const;
  public:
  void clear_msg_dscratch0();
  const ::BasicCSR& msg_dscratch0() const;
  ::BasicCSR* release_msg_dscratch0();
  ::BasicCSR* mutable_msg_dscratch0();
  void set_allocated_msg_dscratch0(::BasicCSR* msg_dscratch0);
  private:
  const ::BasicCSR& _internal_msg_dscratch0() const;
  ::BasicCSR* _internal_mutable_msg_dscratch0();
  public:

  // .BasicCSR msg_dscratch1 = 59;
  bool has_msg_dscratch1() const;
  private:
  bool _internal_has_msg_dscratch1() const;
  public:
  void clear_msg_dscratch1();
  const ::BasicCSR& msg_dscratch1() const;
  ::BasicCSR* release_msg_dscratch1();
  ::BasicCSR* mutable_msg_dscratch1();
  void set_allocated_msg_dscratch1(::BasicCSR* msg_dscratch1);
  private:
  const ::BasicCSR& _internal_msg_dscratch1() const;
  ::BasicCSR* _internal_mutable_msg_dscratch1();
  public:

  // .DCSR msg_dcsr = 60;
  bool has_msg_dcsr() const;
  private:
  bool _internal_has_msg_dcsr() const;
  public:
  void clear_msg_dcsr();
  const ::DCSR& msg_dcsr() const;
  ::DCSR* release_msg_dcsr();
  ::DCSR* mutable_msg_dcsr();
  void set_allocated_msg_dcsr(::DCSR* msg_dcsr);
  private:
  const ::DCSR& _internal_msg_dcsr() const;
  ::DCSR* _internal_mutable_msg_dcsr();
  public:

  // .BasicCSR msg_tselect = 61;
  bool has_msg_tselect() const;
  private:
  bool _internal_has_msg_tselect() const;
  public:
  void clear_msg_tselect();
  const ::BasicCSR& msg_tselect() const;
  ::BasicCSR* release_msg_tselect();
  ::BasicCSR* mutable_msg_tselect();
  void set_allocated_msg_tselect(::BasicCSR* msg_tselect);
  private:
  const ::BasicCSR& _internal_msg_tselect() const;
  ::BasicCSR* _internal_mutable_msg_tselect();
  public:

  // .MaskedCSR msg_scontext = 66;
  bool has_msg_scontext() const;
  private:
  bool _internal_has_msg_scontext() const;
  public:
  void clear_msg_scontext();
  const ::MaskedCSR& msg_scontext() const;
  ::MaskedCSR* release_msg_scontext();
  ::MaskedCSR* mutable_msg_scontext();
  void set_allocated_msg_scontext(::MaskedCSR* msg_scontext);
  private:
  const ::MaskedCSR& _internal_msg_scontext() const;
  ::MaskedCSR* _internal_mutable_msg_scontext();
  public:

  // .MaskedCSR msg_hcontext = 67;
  bool has_msg_hcontext() const;
  private:
  bool _internal_has_msg_hcontext() const;
  public:
  void clear_msg_hcontext();
  const ::MaskedCSR& msg_hcontext() const;
  ::MaskedCSR* release_msg_hcontext();
  ::MaskedCSR* mutable_msg_hcontext();
  void set_allocated_msg_hcontext(::MaskedCSR* msg_hcontext);
  private:
  const ::MaskedCSR& _internal_msg_hcontext() const;
  ::MaskedCSR* _internal_mutable_msg_hcontext();
  public:

  // .BasicCSR msg_mseccfg = 69;
  bool has_msg_mseccfg() const;
  private:
  bool _internal_has_msg_mseccfg() const;
  public:
  void clear_msg_mseccfg();
  const ::BasicCSR& msg_mseccfg() const;
  ::BasicCSR* release_msg_mseccfg();
  ::BasicCSR* mutable_msg_mseccfg();
  void set_allocated_msg_mseccfg(::BasicCSR* msg_mseccfg);
  private:
  const ::BasicCSR& _internal_msg_mseccfg() const;
  ::BasicCSR* _internal_mutable_msg_mseccfg();
  public:

  // .MaskedCSR msg_fflags = 72;
  bool has_msg_fflags() const;
  private:
  bool _internal_has_msg_fflags() const;
  public:
  void clear_msg_fflags();
  const ::MaskedCSR& msg_fflags() const;
  ::MaskedCSR* release_msg_fflags();
  ::MaskedCSR* mutable_msg_fflags();
  void set_allocated_msg_fflags(::MaskedCSR* msg_fflags);
  private:
  const ::MaskedCSR& _internal_msg_fflags() const;
  ::MaskedCSR* _internal_mutable_msg_fflags();
  public:

  // .MaskedCSR msg_frm = 73;
  bool has_msg_frm() const;
  private:
  bool _internal_has_msg_frm() const;
  public:
  void clear_msg_frm();
  const ::MaskedCSR& msg_frm() const;
  ::MaskedCSR* release_msg_frm();
  ::MaskedCSR* mutable_msg_frm();
  void set_allocated_msg_frm(::MaskedCSR* msg_frm);
  private:
  const ::MaskedCSR& _internal_msg_frm() const;
  ::MaskedCSR* _internal_mutable_msg_frm();
  public:

  // .MaskedCSR msg_senvcfg = 82;
  bool has_msg_senvcfg() const;
  private:
  bool _internal_has_msg_senvcfg() const;
  public:
  void clear_msg_senvcfg();
  const ::MaskedCSR& msg_senvcfg() const;
  ::MaskedCSR* release_msg_senvcfg();
  ::MaskedCSR* mutable_msg_senvcfg();
  void set_allocated_msg_senvcfg(::MaskedCSR* msg_senvcfg);
  private:
  const ::MaskedCSR& _internal_msg_senvcfg() const;
  ::MaskedCSR* _internal_mutable_msg_senvcfg();
  public:

  // .HenvcfgCSR msg_henvcfg = 83;
  bool has_msg_henvcfg() const;
  private:
  bool _internal_has_msg_henvcfg() const;
  public:
  void clear_msg_henvcfg();
  const ::HenvcfgCSR& msg_henvcfg() const;
  ::HenvcfgCSR* release_msg_henvcfg();
  ::HenvcfgCSR* mutable_msg_henvcfg();
  void set_allocated_msg_henvcfg(::HenvcfgCSR* msg_henvcfg);
  private:
  const ::HenvcfgCSR& _internal_msg_henvcfg() const;
  ::HenvcfgCSR* _internal_mutable_msg_henvcfg();
  public:

  // .BasicCSR msg_mnscratch = 87;
  bool has_msg_mnscratch() const;
  private:
  bool _internal_has_msg_mnscratch() const;
  public:
  void clear_msg_mnscratch();
  const ::BasicCSR& msg_mnscratch() const;
  ::BasicCSR* release_msg_mnscratch();
  ::BasicCSR* mutable_msg_mnscratch();
  void set_allocated_msg_mnscratch(::BasicCSR* msg_mnscratch);
  private:
  const ::BasicCSR& _internal_msg_mnscratch() const;
  ::BasicCSR* _internal_mutable_msg_mnscratch();
  public:

  // .BasicCSR msg_mnepc = 88;
  bool has_msg_mnepc() const;
  private:
  bool _internal_has_msg_mnepc() const;
  public:
  void clear_msg_mnepc();
  const ::BasicCSR& msg_mnepc() const;
  ::BasicCSR* release_msg_mnepc();
  ::BasicCSR* mutable_msg_mnepc();
  void set_allocated_msg_mnepc(::BasicCSR* msg_mnepc);
  private:
  const ::BasicCSR& _internal_msg_mnepc() const;
  ::BasicCSR* _internal_mutable_msg_mnepc();
  public:

  // .BasicCSR msg_mnstatus = 90;
  bool has_msg_mnstatus() const;
  private:
  bool _internal_has_msg_mnstatus() const;
  public:
  void clear_msg_mnstatus();
  const ::BasicCSR& msg_mnstatus() const;
  ::BasicCSR* release_msg_mnstatus();
  ::BasicCSR* mutable_msg_mnstatus();
  void set_allocated_msg_mnstatus(::BasicCSR* msg_mnstatus);
  private:
  const ::BasicCSR& _internal_msg_mnstatus() const;
  ::BasicCSR* _internal_mutable_msg_mnstatus();
  public:

  // .StimecmpCSR msg_stimecmp = 91;
  bool has_msg_stimecmp() const;
  private:
  bool _internal_has_msg_stimecmp() const;
  public:
  void clear_msg_stimecmp();
  const ::StimecmpCSR& msg_stimecmp() const;
  ::StimecmpCSR* release_msg_stimecmp();
  ::StimecmpCSR* mutable_msg_stimecmp();
  void set_allocated_msg_stimecmp(::StimecmpCSR* msg_stimecmp);
  private:
  const ::StimecmpCSR& _internal_msg_stimecmp() const;
  ::StimecmpCSR* _internal_mutable_msg_stimecmp();
  public:

  // .StimecmpCSR msg_vstimecmp = 92;
  bool has_msg_vstimecmp() const;
  private:
  bool _internal_has_msg_vstimecmp() const;
  public:
  void clear_msg_vstimecmp();
  const ::StimecmpCSR& msg_vstimecmp() const;
  ::StimecmpCSR* release_msg_vstimecmp();
  ::StimecmpCSR* mutable_msg_vstimecmp();
  void set_allocated_msg_vstimecmp(::StimecmpCSR* msg_vstimecmp);
  private:
  const ::StimecmpCSR& _internal_msg_vstimecmp() const;
  ::StimecmpCSR* _internal_mutable_msg_vstimecmp();
  public:

  // .BasicCSR msg_jvt = 93;
  bool has_msg_jvt() const;
  private:
  bool _internal_has_msg_jvt() const;
  public:
  void clear_msg_jvt();
  const ::BasicCSR& msg_jvt() const;
  ::BasicCSR* release_msg_jvt();
  ::BasicCSR* mutable_msg_jvt();
  void set_allocated_msg_jvt(::BasicCSR* msg_jvt);
  private:
  const ::BasicCSR& _internal_msg_jvt() const;
  ::BasicCSR* _internal_mutable_msg_jvt();
  public:

  // .BasicCSR msg_miselect = 94;
  bool has_msg_miselect() const;
  private:
  bool _internal_has_msg_miselect() const;
  public:
  void clear_msg_miselect();
  const ::BasicCSR& msg_miselect() const;
  ::BasicCSR* release_msg_miselect();
  ::BasicCSR* mutable_msg_miselect();
  void set_allocated_msg_miselect(::BasicCSR* msg_miselect);
  private:
  const ::BasicCSR& _internal_msg_miselect() const;
  ::BasicCSR* _internal_mutable_msg_miselect();
  public:

  // .VirtBasicCSR msg_siselect = 101;
  bool has_msg_siselect() const;
  private:
  bool _internal_has_msg_siselect() const;
  public:
  void clear_msg_siselect();
  const ::VirtBasicCSR& msg_siselect() const;
  ::VirtBasicCSR* release_msg_siselect();
  ::VirtBasicCSR* mutable_msg_siselect();
  void set_allocated_msg_siselect(::VirtBasicCSR* msg_siselect);
  private:
  const ::VirtBasicCSR& _internal_msg_siselect() const;
  ::VirtBasicCSR* _internal_mutable_msg_siselect();
  public:

  // uint64 msg_pc = 1;
  void clear_msg_pc();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_pc() const;
  void set_msg_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_pc() const;
  void _internal_set_msg_pc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_prv = 4;
  void clear_msg_prv();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_prv() const;
  void set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_prv() const;
  void _internal_set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msg_prev_prv = 5;
  void clear_msg_prev_prv();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_prev_prv() const;
  void set_msg_prev_prv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_prev_prv() const;
  void _internal_set_msg_prev_prv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool msg_prv_changed = 6;
  void clear_msg_prv_changed();
  bool msg_prv_changed() const;
  void set_msg_prv_changed(bool value);
  private:
  bool _internal_msg_prv_changed() const;
  void _internal_set_msg_prv_changed(bool value);
  public:

  // bool msg_v_changed = 7;
  void clear_msg_v_changed();
  bool msg_v_changed() const;
  void set_msg_v_changed(bool value);
  private:
  bool _internal_msg_v_changed() const;
  void _internal_set_msg_v_changed(bool value);
  public:

  // bool msg_v = 8;
  void clear_msg_v();
  bool msg_v() const;
  void set_msg_v(bool value);
  private:
  bool _internal_msg_v() const;
  void _internal_set_msg_v(bool value);
  public:

  // bool msg_prev_v = 9;
  void clear_msg_prev_v();
  bool msg_prev_v() const;
  void set_msg_prev_v(bool value);
  private:
  bool _internal_msg_prev_v() const;
  void _internal_set_msg_prev_v(bool value);
  public:

  // bool msg_debug_mode = 116;
  void clear_msg_debug_mode();
  bool msg_debug_mode() const;
  void set_msg_debug_mode(bool value);
  private:
  bool _internal_msg_debug_mode() const;
  void _internal_set_msg_debug_mode(bool value);
  public:

  // bool msg_serialized = 117;
  void clear_msg_serialized();
  bool msg_serialized() const;
  void set_msg_serialized(bool value);
  private:
  bool _internal_msg_serialized() const;
  void _internal_set_msg_serialized(bool value);
  public:

  // int32 msg_last_inst_flen = 121;
  void clear_msg_last_inst_flen();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_last_inst_flen() const;
  void set_msg_last_inst_flen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_last_inst_flen() const;
  void _internal_set_msg_last_inst_flen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 msg_last_inst_priv = 119;
  void clear_msg_last_inst_priv();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_last_inst_priv() const;
  void set_msg_last_inst_priv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_last_inst_priv() const;
  void _internal_set_msg_last_inst_priv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 msg_single_step = 118;
  void clear_msg_single_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_single_step() const;
  void set_msg_single_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_single_step() const;
  void _internal_set_msg_single_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 msg_last_inst_xlen = 120;
  void clear_msg_last_inst_xlen();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_last_inst_xlen() const;
  void set_msg_last_inst_xlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_last_inst_xlen() const;
  void _internal_set_msg_last_inst_xlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ArchState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > msg_xpr_;
  mutable std::atomic<int> _msg_xpr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Float128 > msg_fpr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicCSR > msg_mevent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PmpCSR > msg_pmpaddr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MaskedCSR > msg_mstateen_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR > msg_sstateen_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR > msg_hstateen_;
  ::MisaCSR* msg_misa_;
  ::MstatusCSR* msg_mstatus_;
  ::BasicCSR* msg_mepc_;
  ::BasicCSR* msg_mtval_;
  ::BasicCSR* msg_mscratch_;
  ::BasicCSR* msg_mtvec_;
  ::BasicCSR* msg_mcause_;
  ::WideCntrCSR* msg_minstret_;
  ::WideCntrCSR* msg_mcycle_;
  ::BasicCSR* msg_time_;
  ::BasicCSR* msg_mie_;
  ::BasicCSR* msg_mip_;
  ::MedelegCSR* msg_medeleg_;
  ::MaskedCSR* msg_mcounteren_;
  ::MaskedCSR* msg_scounteren_;
  ::VirtBasicCSR* msg_sepc_;
  ::VirtBasicCSR* msg_stval_;
  ::VirtBasicCSR* msg_sscratch_;
  ::VirtBasicCSR* msg_stvec_;
  ::VirtBasicCSR* msg_satp_;
  ::VirtBasicCSR* msg_scause_;
  ::BasicCSR* msg_mtval2_;
  ::BasicCSR* msg_mtinst_;
  ::MaskedCSR* msg_hstatus_;
  ::HidelegCSR* msg_hideleg_;
  ::MaskedCSR* msg_hedeleg_;
  ::MaskedCSR* msg_hcounteren_;
  ::BasicCSR* msg_htimedelta_;
  ::BasicCSR* msg_htval_;
  ::BasicCSR* msg_htinst_;
  ::BasicCSR* msg_hgatp_;
  ::SstatusCSR* msg_sstatus_;
  ::BasicCSR* msg_dpc_;
  ::BasicCSR* msg_dscratch0_;
  ::BasicCSR* msg_dscratch1_;
  ::DCSR* msg_dcsr_;
  ::BasicCSR* msg_tselect_;
  ::MaskedCSR* msg_scontext_;
  ::MaskedCSR* msg_hcontext_;
  ::BasicCSR* msg_mseccfg_;
  ::MaskedCSR* msg_fflags_;
  ::MaskedCSR* msg_frm_;
  ::MaskedCSR* msg_senvcfg_;
  ::HenvcfgCSR* msg_henvcfg_;
  ::BasicCSR* msg_mnscratch_;
  ::BasicCSR* msg_mnepc_;
  ::BasicCSR* msg_mnstatus_;
  ::StimecmpCSR* msg_stimecmp_;
  ::StimecmpCSR* msg_vstimecmp_;
  ::BasicCSR* msg_jvt_;
  ::BasicCSR* msg_miselect_;
  ::VirtBasicCSR* msg_siselect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_pc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_prv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_prev_prv_;
  bool msg_prv_changed_;
  bool msg_v_changed_;
  bool msg_v_;
  bool msg_prev_v_;
  bool msg_debug_mode_;
  bool msg_serialized_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_last_inst_flen_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_last_inst_priv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_single_step_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_last_inst_xlen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class Page :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }
  inline void Swap(Page* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const final {
    return CreateMaybeMessage<Page>(nullptr);
  }

  Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Page";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgBytesFieldNumber = 2,
    kMsgPpnFieldNumber = 1,
  };
  // bytes msg_bytes = 2;
  void clear_msg_bytes();
  const std::string& msg_bytes() const;
  void set_msg_bytes(const std::string& value);
  void set_msg_bytes(std::string&& value);
  void set_msg_bytes(const char* value);
  void set_msg_bytes(const void* value, size_t size);
  std::string* mutable_msg_bytes();
  std::string* release_msg_bytes();
  void set_allocated_msg_bytes(std::string* msg_bytes);
  private:
  const std::string& _internal_msg_bytes() const;
  void _internal_set_msg_bytes(const std::string& value);
  std::string* _internal_mutable_msg_bytes();
  public:

  // uint64 msg_ppn = 1;
  void clear_msg_ppn();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_ppn() const;
  void set_msg_ppn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msg_ppn() const;
  void _internal_set_msg_ppn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Page)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_ppn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// -------------------------------------------------------------------

class SimState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimState) */ {
 public:
  SimState();
  virtual ~SimState();

  SimState(const SimState& from);
  SimState(SimState&& from) noexcept
    : SimState() {
    *this = ::std::move(from);
  }

  inline SimState& operator=(const SimState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimState& operator=(SimState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimState* internal_default_instance() {
    return reinterpret_cast<const SimState*>(
               &_SimState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SimState& a, SimState& b) {
    a.Swap(&b);
  }
  inline void Swap(SimState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimState* New() const final {
    return CreateMaybeMessage<SimState>(nullptr);
  }

  SimState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimState& from);
  void MergeFrom(const SimState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_arch_2dstate_2eproto);
    return ::descriptor_table_arch_2dstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgArchStateFieldNumber = 1,
    kMsgSparseMmFieldNumber = 2,
  };
  // repeated .ArchState msg_arch_state = 1;
  int msg_arch_state_size() const;
  private:
  int _internal_msg_arch_state_size() const;
  public:
  void clear_msg_arch_state();
  ::ArchState* mutable_msg_arch_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArchState >*
      mutable_msg_arch_state();
  private:
  const ::ArchState& _internal_msg_arch_state(int index) const;
  ::ArchState* _internal_add_msg_arch_state();
  public:
  const ::ArchState& msg_arch_state(int index) const;
  ::ArchState* add_msg_arch_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArchState >&
      msg_arch_state() const;

  // repeated .Page msg_sparse_mm = 2;
  int msg_sparse_mm_size() const;
  private:
  int _internal_msg_sparse_mm_size() const;
  public:
  void clear_msg_sparse_mm();
  ::Page* mutable_msg_sparse_mm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Page >*
      mutable_msg_sparse_mm();
  private:
  const ::Page& _internal_msg_sparse_mm(int index) const;
  ::Page* _internal_add_msg_sparse_mm();
  public:
  const ::Page& msg_sparse_mm(int index) const;
  ::Page* add_msg_sparse_mm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Page >&
      msg_sparse_mm() const;

  // @@protoc_insertion_point(class_scope:SimState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArchState > msg_arch_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Page > msg_sparse_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_arch_2dstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSR

// uint64 msg_addr = 1;
inline void CSR::clear_msg_addr() {
  msg_addr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSR::_internal_msg_addr() const {
  return msg_addr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSR::msg_addr() const {
  // @@protoc_insertion_point(field_get:CSR.msg_addr)
  return _internal_msg_addr();
}
inline void CSR::_internal_set_msg_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_addr_ = value;
}
inline void CSR::set_msg_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_addr(value);
  // @@protoc_insertion_point(field_set:CSR.msg_addr)
}

// uint32 msg_csr_priv = 2;
inline void CSR::clear_msg_csr_priv() {
  msg_csr_priv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSR::_internal_msg_csr_priv() const {
  return msg_csr_priv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSR::msg_csr_priv() const {
  // @@protoc_insertion_point(field_get:CSR.msg_csr_priv)
  return _internal_msg_csr_priv();
}
inline void CSR::_internal_set_msg_csr_priv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_csr_priv_ = value;
}
inline void CSR::set_msg_csr_priv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_csr_priv(value);
  // @@protoc_insertion_point(field_set:CSR.msg_csr_priv)
}

// bool msg_csr_read_only = 3;
inline void CSR::clear_msg_csr_read_only() {
  msg_csr_read_only_ = false;
}
inline bool CSR::_internal_msg_csr_read_only() const {
  return msg_csr_read_only_;
}
inline bool CSR::msg_csr_read_only() const {
  // @@protoc_insertion_point(field_get:CSR.msg_csr_read_only)
  return _internal_msg_csr_read_only();
}
inline void CSR::_internal_set_msg_csr_read_only(bool value) {
  
  msg_csr_read_only_ = value;
}
inline void CSR::set_msg_csr_read_only(bool value) {
  _internal_set_msg_csr_read_only(value);
  // @@protoc_insertion_point(field_set:CSR.msg_csr_read_only)
}

// -------------------------------------------------------------------

// BasicCSR

// uint64 msg_val = 1;
inline void BasicCSR::clear_msg_val() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicCSR::_internal_msg_val() const {
  return msg_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicCSR::msg_val() const {
  // @@protoc_insertion_point(field_get:BasicCSR.msg_val)
  return _internal_msg_val();
}
inline void BasicCSR::_internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_val_ = value;
}
inline void BasicCSR::set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_val(value);
  // @@protoc_insertion_point(field_set:BasicCSR.msg_val)
}

// -------------------------------------------------------------------

// MisaCSR

// .BasicCSR msg_basic_csr = 1;
inline bool MisaCSR::_internal_has_msg_basic_csr() const {
  return this != internal_default_instance() && msg_basic_csr_ != nullptr;
}
inline bool MisaCSR::has_msg_basic_csr() const {
  return _internal_has_msg_basic_csr();
}
inline void MisaCSR::clear_msg_basic_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
}
inline const ::BasicCSR& MisaCSR::_internal_msg_basic_csr() const {
  const ::BasicCSR* p = msg_basic_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& MisaCSR::msg_basic_csr() const {
  // @@protoc_insertion_point(field_get:MisaCSR.msg_basic_csr)
  return _internal_msg_basic_csr();
}
inline ::BasicCSR* MisaCSR::release_msg_basic_csr() {
  // @@protoc_insertion_point(field_release:MisaCSR.msg_basic_csr)
  
  ::BasicCSR* temp = msg_basic_csr_;
  msg_basic_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* MisaCSR::_internal_mutable_msg_basic_csr() {
  
  if (msg_basic_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_basic_csr_ = p;
  }
  return msg_basic_csr_;
}
inline ::BasicCSR* MisaCSR::mutable_msg_basic_csr() {
  // @@protoc_insertion_point(field_mutable:MisaCSR.msg_basic_csr)
  return _internal_mutable_msg_basic_csr();
}
inline void MisaCSR::set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_basic_csr_;
  }
  if (msg_basic_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_basic_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_basic_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_basic_csr_ = msg_basic_csr;
  // @@protoc_insertion_point(field_set_allocated:MisaCSR.msg_basic_csr)
}

// uint64 msg_max_isa = 2;
inline void MisaCSR::clear_msg_max_isa() {
  msg_max_isa_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MisaCSR::_internal_msg_max_isa() const {
  return msg_max_isa_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MisaCSR::msg_max_isa() const {
  // @@protoc_insertion_point(field_get:MisaCSR.msg_max_isa)
  return _internal_msg_max_isa();
}
inline void MisaCSR::_internal_set_msg_max_isa(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_max_isa_ = value;
}
inline void MisaCSR::set_msg_max_isa(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_max_isa(value);
  // @@protoc_insertion_point(field_set:MisaCSR.msg_max_isa)
}

// uint64 msg_write_mask = 3;
inline void MisaCSR::clear_msg_write_mask() {
  msg_write_mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MisaCSR::_internal_msg_write_mask() const {
  return msg_write_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MisaCSR::msg_write_mask() const {
  // @@protoc_insertion_point(field_get:MisaCSR.msg_write_mask)
  return _internal_msg_write_mask();
}
inline void MisaCSR::_internal_set_msg_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_write_mask_ = value;
}
inline void MisaCSR::set_msg_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_write_mask(value);
  // @@protoc_insertion_point(field_set:MisaCSR.msg_write_mask)
}

// -------------------------------------------------------------------

// SatpCSR

// .BasicCSR msg_nonvirt_satp_csr = 1;
inline bool SatpCSR::_internal_has_msg_nonvirt_satp_csr() const {
  return this != internal_default_instance() && msg_nonvirt_satp_csr_ != nullptr;
}
inline bool SatpCSR::has_msg_nonvirt_satp_csr() const {
  return _internal_has_msg_nonvirt_satp_csr();
}
inline void SatpCSR::clear_msg_nonvirt_satp_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_nonvirt_satp_csr_ != nullptr) {
    delete msg_nonvirt_satp_csr_;
  }
  msg_nonvirt_satp_csr_ = nullptr;
}
inline const ::BasicCSR& SatpCSR::_internal_msg_nonvirt_satp_csr() const {
  const ::BasicCSR* p = msg_nonvirt_satp_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& SatpCSR::msg_nonvirt_satp_csr() const {
  // @@protoc_insertion_point(field_get:SatpCSR.msg_nonvirt_satp_csr)
  return _internal_msg_nonvirt_satp_csr();
}
inline ::BasicCSR* SatpCSR::release_msg_nonvirt_satp_csr() {
  // @@protoc_insertion_point(field_release:SatpCSR.msg_nonvirt_satp_csr)
  
  ::BasicCSR* temp = msg_nonvirt_satp_csr_;
  msg_nonvirt_satp_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* SatpCSR::_internal_mutable_msg_nonvirt_satp_csr() {
  
  if (msg_nonvirt_satp_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_nonvirt_satp_csr_ = p;
  }
  return msg_nonvirt_satp_csr_;
}
inline ::BasicCSR* SatpCSR::mutable_msg_nonvirt_satp_csr() {
  // @@protoc_insertion_point(field_mutable:SatpCSR.msg_nonvirt_satp_csr)
  return _internal_mutable_msg_nonvirt_satp_csr();
}
inline void SatpCSR::set_allocated_msg_nonvirt_satp_csr(::BasicCSR* msg_nonvirt_satp_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_nonvirt_satp_csr_;
  }
  if (msg_nonvirt_satp_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_nonvirt_satp_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_nonvirt_satp_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_nonvirt_satp_csr_ = msg_nonvirt_satp_csr;
  // @@protoc_insertion_point(field_set_allocated:SatpCSR.msg_nonvirt_satp_csr)
}

// .BasicCSR msg_virt_satp_csr = 2;
inline bool SatpCSR::_internal_has_msg_virt_satp_csr() const {
  return this != internal_default_instance() && msg_virt_satp_csr_ != nullptr;
}
inline bool SatpCSR::has_msg_virt_satp_csr() const {
  return _internal_has_msg_virt_satp_csr();
}
inline void SatpCSR::clear_msg_virt_satp_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_virt_satp_csr_ != nullptr) {
    delete msg_virt_satp_csr_;
  }
  msg_virt_satp_csr_ = nullptr;
}
inline const ::BasicCSR& SatpCSR::_internal_msg_virt_satp_csr() const {
  const ::BasicCSR* p = msg_virt_satp_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& SatpCSR::msg_virt_satp_csr() const {
  // @@protoc_insertion_point(field_get:SatpCSR.msg_virt_satp_csr)
  return _internal_msg_virt_satp_csr();
}
inline ::BasicCSR* SatpCSR::release_msg_virt_satp_csr() {
  // @@protoc_insertion_point(field_release:SatpCSR.msg_virt_satp_csr)
  
  ::BasicCSR* temp = msg_virt_satp_csr_;
  msg_virt_satp_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* SatpCSR::_internal_mutable_msg_virt_satp_csr() {
  
  if (msg_virt_satp_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_virt_satp_csr_ = p;
  }
  return msg_virt_satp_csr_;
}
inline ::BasicCSR* SatpCSR::mutable_msg_virt_satp_csr() {
  // @@protoc_insertion_point(field_mutable:SatpCSR.msg_virt_satp_csr)
  return _internal_mutable_msg_virt_satp_csr();
}
inline void SatpCSR::set_allocated_msg_virt_satp_csr(::BasicCSR* msg_virt_satp_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_virt_satp_csr_;
  }
  if (msg_virt_satp_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_virt_satp_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_virt_satp_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_virt_satp_csr_ = msg_virt_satp_csr;
  // @@protoc_insertion_point(field_set_allocated:SatpCSR.msg_virt_satp_csr)
}

// -------------------------------------------------------------------

// VirtBasicCSR

// .BasicCSR msg_nonvirt_csr = 1;
inline bool VirtBasicCSR::_internal_has_msg_nonvirt_csr() const {
  return this != internal_default_instance() && msg_nonvirt_csr_ != nullptr;
}
inline bool VirtBasicCSR::has_msg_nonvirt_csr() const {
  return _internal_has_msg_nonvirt_csr();
}
inline void VirtBasicCSR::clear_msg_nonvirt_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_nonvirt_csr_ != nullptr) {
    delete msg_nonvirt_csr_;
  }
  msg_nonvirt_csr_ = nullptr;
}
inline const ::BasicCSR& VirtBasicCSR::_internal_msg_nonvirt_csr() const {
  const ::BasicCSR* p = msg_nonvirt_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& VirtBasicCSR::msg_nonvirt_csr() const {
  // @@protoc_insertion_point(field_get:VirtBasicCSR.msg_nonvirt_csr)
  return _internal_msg_nonvirt_csr();
}
inline ::BasicCSR* VirtBasicCSR::release_msg_nonvirt_csr() {
  // @@protoc_insertion_point(field_release:VirtBasicCSR.msg_nonvirt_csr)
  
  ::BasicCSR* temp = msg_nonvirt_csr_;
  msg_nonvirt_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* VirtBasicCSR::_internal_mutable_msg_nonvirt_csr() {
  
  if (msg_nonvirt_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_nonvirt_csr_ = p;
  }
  return msg_nonvirt_csr_;
}
inline ::BasicCSR* VirtBasicCSR::mutable_msg_nonvirt_csr() {
  // @@protoc_insertion_point(field_mutable:VirtBasicCSR.msg_nonvirt_csr)
  return _internal_mutable_msg_nonvirt_csr();
}
inline void VirtBasicCSR::set_allocated_msg_nonvirt_csr(::BasicCSR* msg_nonvirt_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_nonvirt_csr_;
  }
  if (msg_nonvirt_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_nonvirt_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_nonvirt_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_nonvirt_csr_ = msg_nonvirt_csr;
  // @@protoc_insertion_point(field_set_allocated:VirtBasicCSR.msg_nonvirt_csr)
}

// .BasicCSR msg_virt_csr = 2;
inline bool VirtBasicCSR::_internal_has_msg_virt_csr() const {
  return this != internal_default_instance() && msg_virt_csr_ != nullptr;
}
inline bool VirtBasicCSR::has_msg_virt_csr() const {
  return _internal_has_msg_virt_csr();
}
inline void VirtBasicCSR::clear_msg_virt_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_virt_csr_ != nullptr) {
    delete msg_virt_csr_;
  }
  msg_virt_csr_ = nullptr;
}
inline const ::BasicCSR& VirtBasicCSR::_internal_msg_virt_csr() const {
  const ::BasicCSR* p = msg_virt_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& VirtBasicCSR::msg_virt_csr() const {
  // @@protoc_insertion_point(field_get:VirtBasicCSR.msg_virt_csr)
  return _internal_msg_virt_csr();
}
inline ::BasicCSR* VirtBasicCSR::release_msg_virt_csr() {
  // @@protoc_insertion_point(field_release:VirtBasicCSR.msg_virt_csr)
  
  ::BasicCSR* temp = msg_virt_csr_;
  msg_virt_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* VirtBasicCSR::_internal_mutable_msg_virt_csr() {
  
  if (msg_virt_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_virt_csr_ = p;
  }
  return msg_virt_csr_;
}
inline ::BasicCSR* VirtBasicCSR::mutable_msg_virt_csr() {
  // @@protoc_insertion_point(field_mutable:VirtBasicCSR.msg_virt_csr)
  return _internal_mutable_msg_virt_csr();
}
inline void VirtBasicCSR::set_allocated_msg_virt_csr(::BasicCSR* msg_virt_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_virt_csr_;
  }
  if (msg_virt_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_virt_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_virt_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_virt_csr_ = msg_virt_csr;
  // @@protoc_insertion_point(field_set_allocated:VirtBasicCSR.msg_virt_csr)
}

// -------------------------------------------------------------------

// BaseStatusCSR

// bool msg_has_page = 1;
inline void BaseStatusCSR::clear_msg_has_page() {
  msg_has_page_ = false;
}
inline bool BaseStatusCSR::_internal_msg_has_page() const {
  return msg_has_page_;
}
inline bool BaseStatusCSR::msg_has_page() const {
  // @@protoc_insertion_point(field_get:BaseStatusCSR.msg_has_page)
  return _internal_msg_has_page();
}
inline void BaseStatusCSR::_internal_set_msg_has_page(bool value) {
  
  msg_has_page_ = value;
}
inline void BaseStatusCSR::set_msg_has_page(bool value) {
  _internal_set_msg_has_page(value);
  // @@protoc_insertion_point(field_set:BaseStatusCSR.msg_has_page)
}

// uint64 msg_sstatus_write_mask = 2;
inline void BaseStatusCSR::clear_msg_sstatus_write_mask() {
  msg_sstatus_write_mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStatusCSR::_internal_msg_sstatus_write_mask() const {
  return msg_sstatus_write_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStatusCSR::msg_sstatus_write_mask() const {
  // @@protoc_insertion_point(field_get:BaseStatusCSR.msg_sstatus_write_mask)
  return _internal_msg_sstatus_write_mask();
}
inline void BaseStatusCSR::_internal_set_msg_sstatus_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_sstatus_write_mask_ = value;
}
inline void BaseStatusCSR::set_msg_sstatus_write_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_sstatus_write_mask(value);
  // @@protoc_insertion_point(field_set:BaseStatusCSR.msg_sstatus_write_mask)
}

// uint64 msg_sstatus_read_mask = 3;
inline void BaseStatusCSR::clear_msg_sstatus_read_mask() {
  msg_sstatus_read_mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStatusCSR::_internal_msg_sstatus_read_mask() const {
  return msg_sstatus_read_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStatusCSR::msg_sstatus_read_mask() const {
  // @@protoc_insertion_point(field_get:BaseStatusCSR.msg_sstatus_read_mask)
  return _internal_msg_sstatus_read_mask();
}
inline void BaseStatusCSR::_internal_set_msg_sstatus_read_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_sstatus_read_mask_ = value;
}
inline void BaseStatusCSR::set_msg_sstatus_read_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_sstatus_read_mask(value);
  // @@protoc_insertion_point(field_set:BaseStatusCSR.msg_sstatus_read_mask)
}

// -------------------------------------------------------------------

// MstatusCSR

// .BaseStatusCSR msg_base_status_csr = 1;
inline bool MstatusCSR::_internal_has_msg_base_status_csr() const {
  return this != internal_default_instance() && msg_base_status_csr_ != nullptr;
}
inline bool MstatusCSR::has_msg_base_status_csr() const {
  return _internal_has_msg_base_status_csr();
}
inline void MstatusCSR::clear_msg_base_status_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
}
inline const ::BaseStatusCSR& MstatusCSR::_internal_msg_base_status_csr() const {
  const ::BaseStatusCSR* p = msg_base_status_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BaseStatusCSR*>(
      &::_BaseStatusCSR_default_instance_);
}
inline const ::BaseStatusCSR& MstatusCSR::msg_base_status_csr() const {
  // @@protoc_insertion_point(field_get:MstatusCSR.msg_base_status_csr)
  return _internal_msg_base_status_csr();
}
inline ::BaseStatusCSR* MstatusCSR::release_msg_base_status_csr() {
  // @@protoc_insertion_point(field_release:MstatusCSR.msg_base_status_csr)
  
  ::BaseStatusCSR* temp = msg_base_status_csr_;
  msg_base_status_csr_ = nullptr;
  return temp;
}
inline ::BaseStatusCSR* MstatusCSR::_internal_mutable_msg_base_status_csr() {
  
  if (msg_base_status_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseStatusCSR>(GetArenaNoVirtual());
    msg_base_status_csr_ = p;
  }
  return msg_base_status_csr_;
}
inline ::BaseStatusCSR* MstatusCSR::mutable_msg_base_status_csr() {
  // @@protoc_insertion_point(field_mutable:MstatusCSR.msg_base_status_csr)
  return _internal_mutable_msg_base_status_csr();
}
inline void MstatusCSR::set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_base_status_csr_;
  }
  if (msg_base_status_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_base_status_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_base_status_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_base_status_csr_ = msg_base_status_csr;
  // @@protoc_insertion_point(field_set_allocated:MstatusCSR.msg_base_status_csr)
}

// uint64 msg_val = 2;
inline void MstatusCSR::clear_msg_val() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MstatusCSR::_internal_msg_val() const {
  return msg_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MstatusCSR::msg_val() const {
  // @@protoc_insertion_point(field_get:MstatusCSR.msg_val)
  return _internal_msg_val();
}
inline void MstatusCSR::_internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_val_ = value;
}
inline void MstatusCSR::set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_val(value);
  // @@protoc_insertion_point(field_set:MstatusCSR.msg_val)
}

// -------------------------------------------------------------------

// SstatusProxyCSR

// .BaseStatusCSR msg_base_status_csr = 1;
inline bool SstatusProxyCSR::_internal_has_msg_base_status_csr() const {
  return this != internal_default_instance() && msg_base_status_csr_ != nullptr;
}
inline bool SstatusProxyCSR::has_msg_base_status_csr() const {
  return _internal_has_msg_base_status_csr();
}
inline void SstatusProxyCSR::clear_msg_base_status_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
}
inline const ::BaseStatusCSR& SstatusProxyCSR::_internal_msg_base_status_csr() const {
  const ::BaseStatusCSR* p = msg_base_status_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BaseStatusCSR*>(
      &::_BaseStatusCSR_default_instance_);
}
inline const ::BaseStatusCSR& SstatusProxyCSR::msg_base_status_csr() const {
  // @@protoc_insertion_point(field_get:SstatusProxyCSR.msg_base_status_csr)
  return _internal_msg_base_status_csr();
}
inline ::BaseStatusCSR* SstatusProxyCSR::release_msg_base_status_csr() {
  // @@protoc_insertion_point(field_release:SstatusProxyCSR.msg_base_status_csr)
  
  ::BaseStatusCSR* temp = msg_base_status_csr_;
  msg_base_status_csr_ = nullptr;
  return temp;
}
inline ::BaseStatusCSR* SstatusProxyCSR::_internal_mutable_msg_base_status_csr() {
  
  if (msg_base_status_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseStatusCSR>(GetArenaNoVirtual());
    msg_base_status_csr_ = p;
  }
  return msg_base_status_csr_;
}
inline ::BaseStatusCSR* SstatusProxyCSR::mutable_msg_base_status_csr() {
  // @@protoc_insertion_point(field_mutable:SstatusProxyCSR.msg_base_status_csr)
  return _internal_mutable_msg_base_status_csr();
}
inline void SstatusProxyCSR::set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_base_status_csr_;
  }
  if (msg_base_status_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_base_status_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_base_status_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_base_status_csr_ = msg_base_status_csr;
  // @@protoc_insertion_point(field_set_allocated:SstatusProxyCSR.msg_base_status_csr)
}

// .MstatusCSR msg_mstatus_csr = 2;
inline bool SstatusProxyCSR::_internal_has_msg_mstatus_csr() const {
  return this != internal_default_instance() && msg_mstatus_csr_ != nullptr;
}
inline bool SstatusProxyCSR::has_msg_mstatus_csr() const {
  return _internal_has_msg_mstatus_csr();
}
inline void SstatusProxyCSR::clear_msg_mstatus_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_mstatus_csr_ != nullptr) {
    delete msg_mstatus_csr_;
  }
  msg_mstatus_csr_ = nullptr;
}
inline const ::MstatusCSR& SstatusProxyCSR::_internal_msg_mstatus_csr() const {
  const ::MstatusCSR* p = msg_mstatus_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MstatusCSR*>(
      &::_MstatusCSR_default_instance_);
}
inline const ::MstatusCSR& SstatusProxyCSR::msg_mstatus_csr() const {
  // @@protoc_insertion_point(field_get:SstatusProxyCSR.msg_mstatus_csr)
  return _internal_msg_mstatus_csr();
}
inline ::MstatusCSR* SstatusProxyCSR::release_msg_mstatus_csr() {
  // @@protoc_insertion_point(field_release:SstatusProxyCSR.msg_mstatus_csr)
  
  ::MstatusCSR* temp = msg_mstatus_csr_;
  msg_mstatus_csr_ = nullptr;
  return temp;
}
inline ::MstatusCSR* SstatusProxyCSR::_internal_mutable_msg_mstatus_csr() {
  
  if (msg_mstatus_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::MstatusCSR>(GetArenaNoVirtual());
    msg_mstatus_csr_ = p;
  }
  return msg_mstatus_csr_;
}
inline ::MstatusCSR* SstatusProxyCSR::mutable_msg_mstatus_csr() {
  // @@protoc_insertion_point(field_mutable:SstatusProxyCSR.msg_mstatus_csr)
  return _internal_mutable_msg_mstatus_csr();
}
inline void SstatusProxyCSR::set_allocated_msg_mstatus_csr(::MstatusCSR* msg_mstatus_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mstatus_csr_;
  }
  if (msg_mstatus_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mstatus_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mstatus_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_mstatus_csr_ = msg_mstatus_csr;
  // @@protoc_insertion_point(field_set_allocated:SstatusProxyCSR.msg_mstatus_csr)
}

// -------------------------------------------------------------------

// VsstatusCSR

// .BaseStatusCSR msg_base_status_csr = 1;
inline bool VsstatusCSR::_internal_has_msg_base_status_csr() const {
  return this != internal_default_instance() && msg_base_status_csr_ != nullptr;
}
inline bool VsstatusCSR::has_msg_base_status_csr() const {
  return _internal_has_msg_base_status_csr();
}
inline void VsstatusCSR::clear_msg_base_status_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
}
inline const ::BaseStatusCSR& VsstatusCSR::_internal_msg_base_status_csr() const {
  const ::BaseStatusCSR* p = msg_base_status_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BaseStatusCSR*>(
      &::_BaseStatusCSR_default_instance_);
}
inline const ::BaseStatusCSR& VsstatusCSR::msg_base_status_csr() const {
  // @@protoc_insertion_point(field_get:VsstatusCSR.msg_base_status_csr)
  return _internal_msg_base_status_csr();
}
inline ::BaseStatusCSR* VsstatusCSR::release_msg_base_status_csr() {
  // @@protoc_insertion_point(field_release:VsstatusCSR.msg_base_status_csr)
  
  ::BaseStatusCSR* temp = msg_base_status_csr_;
  msg_base_status_csr_ = nullptr;
  return temp;
}
inline ::BaseStatusCSR* VsstatusCSR::_internal_mutable_msg_base_status_csr() {
  
  if (msg_base_status_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseStatusCSR>(GetArenaNoVirtual());
    msg_base_status_csr_ = p;
  }
  return msg_base_status_csr_;
}
inline ::BaseStatusCSR* VsstatusCSR::mutable_msg_base_status_csr() {
  // @@protoc_insertion_point(field_mutable:VsstatusCSR.msg_base_status_csr)
  return _internal_mutable_msg_base_status_csr();
}
inline void VsstatusCSR::set_allocated_msg_base_status_csr(::BaseStatusCSR* msg_base_status_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_base_status_csr_;
  }
  if (msg_base_status_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_base_status_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_base_status_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_base_status_csr_ = msg_base_status_csr;
  // @@protoc_insertion_point(field_set_allocated:VsstatusCSR.msg_base_status_csr)
}

// uint64 msg_val = 2;
inline void VsstatusCSR::clear_msg_val() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VsstatusCSR::_internal_msg_val() const {
  return msg_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VsstatusCSR::msg_val() const {
  // @@protoc_insertion_point(field_get:VsstatusCSR.msg_val)
  return _internal_msg_val();
}
inline void VsstatusCSR::_internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_val_ = value;
}
inline void VsstatusCSR::set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_val(value);
  // @@protoc_insertion_point(field_set:VsstatusCSR.msg_val)
}

// -------------------------------------------------------------------

// SstatusCSR

// .SstatusProxyCSR msg_orig_sstatus = 1;
inline bool SstatusCSR::_internal_has_msg_orig_sstatus() const {
  return this != internal_default_instance() && msg_orig_sstatus_ != nullptr;
}
inline bool SstatusCSR::has_msg_orig_sstatus() const {
  return _internal_has_msg_orig_sstatus();
}
inline void SstatusCSR::clear_msg_orig_sstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_orig_sstatus_ != nullptr) {
    delete msg_orig_sstatus_;
  }
  msg_orig_sstatus_ = nullptr;
}
inline const ::SstatusProxyCSR& SstatusCSR::_internal_msg_orig_sstatus() const {
  const ::SstatusProxyCSR* p = msg_orig_sstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SstatusProxyCSR*>(
      &::_SstatusProxyCSR_default_instance_);
}
inline const ::SstatusProxyCSR& SstatusCSR::msg_orig_sstatus() const {
  // @@protoc_insertion_point(field_get:SstatusCSR.msg_orig_sstatus)
  return _internal_msg_orig_sstatus();
}
inline ::SstatusProxyCSR* SstatusCSR::release_msg_orig_sstatus() {
  // @@protoc_insertion_point(field_release:SstatusCSR.msg_orig_sstatus)
  
  ::SstatusProxyCSR* temp = msg_orig_sstatus_;
  msg_orig_sstatus_ = nullptr;
  return temp;
}
inline ::SstatusProxyCSR* SstatusCSR::_internal_mutable_msg_orig_sstatus() {
  
  if (msg_orig_sstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::SstatusProxyCSR>(GetArenaNoVirtual());
    msg_orig_sstatus_ = p;
  }
  return msg_orig_sstatus_;
}
inline ::SstatusProxyCSR* SstatusCSR::mutable_msg_orig_sstatus() {
  // @@protoc_insertion_point(field_mutable:SstatusCSR.msg_orig_sstatus)
  return _internal_mutable_msg_orig_sstatus();
}
inline void SstatusCSR::set_allocated_msg_orig_sstatus(::SstatusProxyCSR* msg_orig_sstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_orig_sstatus_;
  }
  if (msg_orig_sstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_orig_sstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_orig_sstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_orig_sstatus_ = msg_orig_sstatus;
  // @@protoc_insertion_point(field_set_allocated:SstatusCSR.msg_orig_sstatus)
}

// .VsstatusCSR msg_virt_sstatus = 2;
inline bool SstatusCSR::_internal_has_msg_virt_sstatus() const {
  return this != internal_default_instance() && msg_virt_sstatus_ != nullptr;
}
inline bool SstatusCSR::has_msg_virt_sstatus() const {
  return _internal_has_msg_virt_sstatus();
}
inline void SstatusCSR::clear_msg_virt_sstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_virt_sstatus_ != nullptr) {
    delete msg_virt_sstatus_;
  }
  msg_virt_sstatus_ = nullptr;
}
inline const ::VsstatusCSR& SstatusCSR::_internal_msg_virt_sstatus() const {
  const ::VsstatusCSR* p = msg_virt_sstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VsstatusCSR*>(
      &::_VsstatusCSR_default_instance_);
}
inline const ::VsstatusCSR& SstatusCSR::msg_virt_sstatus() const {
  // @@protoc_insertion_point(field_get:SstatusCSR.msg_virt_sstatus)
  return _internal_msg_virt_sstatus();
}
inline ::VsstatusCSR* SstatusCSR::release_msg_virt_sstatus() {
  // @@protoc_insertion_point(field_release:SstatusCSR.msg_virt_sstatus)
  
  ::VsstatusCSR* temp = msg_virt_sstatus_;
  msg_virt_sstatus_ = nullptr;
  return temp;
}
inline ::VsstatusCSR* SstatusCSR::_internal_mutable_msg_virt_sstatus() {
  
  if (msg_virt_sstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::VsstatusCSR>(GetArenaNoVirtual());
    msg_virt_sstatus_ = p;
  }
  return msg_virt_sstatus_;
}
inline ::VsstatusCSR* SstatusCSR::mutable_msg_virt_sstatus() {
  // @@protoc_insertion_point(field_mutable:SstatusCSR.msg_virt_sstatus)
  return _internal_mutable_msg_virt_sstatus();
}
inline void SstatusCSR::set_allocated_msg_virt_sstatus(::VsstatusCSR* msg_virt_sstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_virt_sstatus_;
  }
  if (msg_virt_sstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_virt_sstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_virt_sstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_virt_sstatus_ = msg_virt_sstatus;
  // @@protoc_insertion_point(field_set_allocated:SstatusCSR.msg_virt_sstatus)
}

// -------------------------------------------------------------------

// MaskedCSR

// .BasicCSR msg_basic_csr = 1;
inline bool MaskedCSR::_internal_has_msg_basic_csr() const {
  return this != internal_default_instance() && msg_basic_csr_ != nullptr;
}
inline bool MaskedCSR::has_msg_basic_csr() const {
  return _internal_has_msg_basic_csr();
}
inline void MaskedCSR::clear_msg_basic_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
}
inline const ::BasicCSR& MaskedCSR::_internal_msg_basic_csr() const {
  const ::BasicCSR* p = msg_basic_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& MaskedCSR::msg_basic_csr() const {
  // @@protoc_insertion_point(field_get:MaskedCSR.msg_basic_csr)
  return _internal_msg_basic_csr();
}
inline ::BasicCSR* MaskedCSR::release_msg_basic_csr() {
  // @@protoc_insertion_point(field_release:MaskedCSR.msg_basic_csr)
  
  ::BasicCSR* temp = msg_basic_csr_;
  msg_basic_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* MaskedCSR::_internal_mutable_msg_basic_csr() {
  
  if (msg_basic_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_basic_csr_ = p;
  }
  return msg_basic_csr_;
}
inline ::BasicCSR* MaskedCSR::mutable_msg_basic_csr() {
  // @@protoc_insertion_point(field_mutable:MaskedCSR.msg_basic_csr)
  return _internal_mutable_msg_basic_csr();
}
inline void MaskedCSR::set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_basic_csr_;
  }
  if (msg_basic_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_basic_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_basic_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_basic_csr_ = msg_basic_csr;
  // @@protoc_insertion_point(field_set_allocated:MaskedCSR.msg_basic_csr)
}

// uint64 msg_mask = 2;
inline void MaskedCSR::clear_msg_mask() {
  msg_mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaskedCSR::_internal_msg_mask() const {
  return msg_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaskedCSR::msg_mask() const {
  // @@protoc_insertion_point(field_get:MaskedCSR.msg_mask)
  return _internal_msg_mask();
}
inline void MaskedCSR::_internal_set_msg_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_mask_ = value;
}
inline void MaskedCSR::set_msg_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_mask(value);
  // @@protoc_insertion_point(field_set:MaskedCSR.msg_mask)
}

// -------------------------------------------------------------------

// OptionalUInt64

// uint64 msg_val = 1;
inline void OptionalUInt64::clear_msg_val() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OptionalUInt64::_internal_msg_val() const {
  return msg_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OptionalUInt64::msg_val() const {
  // @@protoc_insertion_point(field_get:OptionalUInt64.msg_val)
  return _internal_msg_val();
}
inline void OptionalUInt64::_internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_val_ = value;
}
inline void OptionalUInt64::set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_val(value);
  // @@protoc_insertion_point(field_set:OptionalUInt64.msg_val)
}

// -------------------------------------------------------------------

// SmcntrpmfCSR

// .MaskedCSR msg_masked_csr = 1;
inline bool SmcntrpmfCSR::_internal_has_msg_masked_csr() const {
  return this != internal_default_instance() && msg_masked_csr_ != nullptr;
}
inline bool SmcntrpmfCSR::has_msg_masked_csr() const {
  return _internal_has_msg_masked_csr();
}
inline void SmcntrpmfCSR::clear_msg_masked_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_masked_csr_ != nullptr) {
    delete msg_masked_csr_;
  }
  msg_masked_csr_ = nullptr;
}
inline const ::MaskedCSR& SmcntrpmfCSR::_internal_msg_masked_csr() const {
  const ::MaskedCSR* p = msg_masked_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& SmcntrpmfCSR::msg_masked_csr() const {
  // @@protoc_insertion_point(field_get:SmcntrpmfCSR.msg_masked_csr)
  return _internal_msg_masked_csr();
}
inline ::MaskedCSR* SmcntrpmfCSR::release_msg_masked_csr() {
  // @@protoc_insertion_point(field_release:SmcntrpmfCSR.msg_masked_csr)
  
  ::MaskedCSR* temp = msg_masked_csr_;
  msg_masked_csr_ = nullptr;
  return temp;
}
inline ::MaskedCSR* SmcntrpmfCSR::_internal_mutable_msg_masked_csr() {
  
  if (msg_masked_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_masked_csr_ = p;
  }
  return msg_masked_csr_;
}
inline ::MaskedCSR* SmcntrpmfCSR::mutable_msg_masked_csr() {
  // @@protoc_insertion_point(field_mutable:SmcntrpmfCSR.msg_masked_csr)
  return _internal_mutable_msg_masked_csr();
}
inline void SmcntrpmfCSR::set_allocated_msg_masked_csr(::MaskedCSR* msg_masked_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_masked_csr_;
  }
  if (msg_masked_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_masked_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_masked_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_masked_csr_ = msg_masked_csr;
  // @@protoc_insertion_point(field_set_allocated:SmcntrpmfCSR.msg_masked_csr)
}

// .OptionalUInt64 msg_prev_val = 2;
inline bool SmcntrpmfCSR::_internal_has_msg_prev_val() const {
  return this != internal_default_instance() && msg_prev_val_ != nullptr;
}
inline bool SmcntrpmfCSR::has_msg_prev_val() const {
  return _internal_has_msg_prev_val();
}
inline void SmcntrpmfCSR::clear_msg_prev_val() {
  if (GetArenaNoVirtual() == nullptr && msg_prev_val_ != nullptr) {
    delete msg_prev_val_;
  }
  msg_prev_val_ = nullptr;
}
inline const ::OptionalUInt64& SmcntrpmfCSR::_internal_msg_prev_val() const {
  const ::OptionalUInt64* p = msg_prev_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OptionalUInt64*>(
      &::_OptionalUInt64_default_instance_);
}
inline const ::OptionalUInt64& SmcntrpmfCSR::msg_prev_val() const {
  // @@protoc_insertion_point(field_get:SmcntrpmfCSR.msg_prev_val)
  return _internal_msg_prev_val();
}
inline ::OptionalUInt64* SmcntrpmfCSR::release_msg_prev_val() {
  // @@protoc_insertion_point(field_release:SmcntrpmfCSR.msg_prev_val)
  
  ::OptionalUInt64* temp = msg_prev_val_;
  msg_prev_val_ = nullptr;
  return temp;
}
inline ::OptionalUInt64* SmcntrpmfCSR::_internal_mutable_msg_prev_val() {
  
  if (msg_prev_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::OptionalUInt64>(GetArenaNoVirtual());
    msg_prev_val_ = p;
  }
  return msg_prev_val_;
}
inline ::OptionalUInt64* SmcntrpmfCSR::mutable_msg_prev_val() {
  // @@protoc_insertion_point(field_mutable:SmcntrpmfCSR.msg_prev_val)
  return _internal_mutable_msg_prev_val();
}
inline void SmcntrpmfCSR::set_allocated_msg_prev_val(::OptionalUInt64* msg_prev_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_prev_val_;
  }
  if (msg_prev_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_prev_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_prev_val, submessage_arena);
    }
    
  } else {
    
  }
  msg_prev_val_ = msg_prev_val;
  // @@protoc_insertion_point(field_set_allocated:SmcntrpmfCSR.msg_prev_val)
}

// -------------------------------------------------------------------

// WideCntrCSR

// uint64 msg_val = 1;
inline void WideCntrCSR::clear_msg_val() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WideCntrCSR::_internal_msg_val() const {
  return msg_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WideCntrCSR::msg_val() const {
  // @@protoc_insertion_point(field_get:WideCntrCSR.msg_val)
  return _internal_msg_val();
}
inline void WideCntrCSR::_internal_set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_val_ = value;
}
inline void WideCntrCSR::set_msg_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_val(value);
  // @@protoc_insertion_point(field_set:WideCntrCSR.msg_val)
}

// .SmcntrpmfCSR msg_config_csr = 2;
inline bool WideCntrCSR::_internal_has_msg_config_csr() const {
  return this != internal_default_instance() && msg_config_csr_ != nullptr;
}
inline bool WideCntrCSR::has_msg_config_csr() const {
  return _internal_has_msg_config_csr();
}
inline void WideCntrCSR::clear_msg_config_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_config_csr_ != nullptr) {
    delete msg_config_csr_;
  }
  msg_config_csr_ = nullptr;
}
inline const ::SmcntrpmfCSR& WideCntrCSR::_internal_msg_config_csr() const {
  const ::SmcntrpmfCSR* p = msg_config_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SmcntrpmfCSR*>(
      &::_SmcntrpmfCSR_default_instance_);
}
inline const ::SmcntrpmfCSR& WideCntrCSR::msg_config_csr() const {
  // @@protoc_insertion_point(field_get:WideCntrCSR.msg_config_csr)
  return _internal_msg_config_csr();
}
inline ::SmcntrpmfCSR* WideCntrCSR::release_msg_config_csr() {
  // @@protoc_insertion_point(field_release:WideCntrCSR.msg_config_csr)
  
  ::SmcntrpmfCSR* temp = msg_config_csr_;
  msg_config_csr_ = nullptr;
  return temp;
}
inline ::SmcntrpmfCSR* WideCntrCSR::_internal_mutable_msg_config_csr() {
  
  if (msg_config_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SmcntrpmfCSR>(GetArenaNoVirtual());
    msg_config_csr_ = p;
  }
  return msg_config_csr_;
}
inline ::SmcntrpmfCSR* WideCntrCSR::mutable_msg_config_csr() {
  // @@protoc_insertion_point(field_mutable:WideCntrCSR.msg_config_csr)
  return _internal_mutable_msg_config_csr();
}
inline void WideCntrCSR::set_allocated_msg_config_csr(::SmcntrpmfCSR* msg_config_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_config_csr_;
  }
  if (msg_config_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_config_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_config_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_config_csr_ = msg_config_csr;
  // @@protoc_insertion_point(field_set_allocated:WideCntrCSR.msg_config_csr)
}

// -------------------------------------------------------------------

// MedelegCSR

// .BasicCSR msg_basic_csr = 1;
inline bool MedelegCSR::_internal_has_msg_basic_csr() const {
  return this != internal_default_instance() && msg_basic_csr_ != nullptr;
}
inline bool MedelegCSR::has_msg_basic_csr() const {
  return _internal_has_msg_basic_csr();
}
inline void MedelegCSR::clear_msg_basic_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
}
inline const ::BasicCSR& MedelegCSR::_internal_msg_basic_csr() const {
  const ::BasicCSR* p = msg_basic_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& MedelegCSR::msg_basic_csr() const {
  // @@protoc_insertion_point(field_get:MedelegCSR.msg_basic_csr)
  return _internal_msg_basic_csr();
}
inline ::BasicCSR* MedelegCSR::release_msg_basic_csr() {
  // @@protoc_insertion_point(field_release:MedelegCSR.msg_basic_csr)
  
  ::BasicCSR* temp = msg_basic_csr_;
  msg_basic_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* MedelegCSR::_internal_mutable_msg_basic_csr() {
  
  if (msg_basic_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_basic_csr_ = p;
  }
  return msg_basic_csr_;
}
inline ::BasicCSR* MedelegCSR::mutable_msg_basic_csr() {
  // @@protoc_insertion_point(field_mutable:MedelegCSR.msg_basic_csr)
  return _internal_mutable_msg_basic_csr();
}
inline void MedelegCSR::set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_basic_csr_;
  }
  if (msg_basic_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_basic_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_basic_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_basic_csr_ = msg_basic_csr;
  // @@protoc_insertion_point(field_set_allocated:MedelegCSR.msg_basic_csr)
}

// uint64 msg_hypervisor_exceptions = 2;
inline void MedelegCSR::clear_msg_hypervisor_exceptions() {
  msg_hypervisor_exceptions_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MedelegCSR::_internal_msg_hypervisor_exceptions() const {
  return msg_hypervisor_exceptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MedelegCSR::msg_hypervisor_exceptions() const {
  // @@protoc_insertion_point(field_get:MedelegCSR.msg_hypervisor_exceptions)
  return _internal_msg_hypervisor_exceptions();
}
inline void MedelegCSR::_internal_set_msg_hypervisor_exceptions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_hypervisor_exceptions_ = value;
}
inline void MedelegCSR::set_msg_hypervisor_exceptions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_hypervisor_exceptions(value);
  // @@protoc_insertion_point(field_set:MedelegCSR.msg_hypervisor_exceptions)
}

// -------------------------------------------------------------------

// HstateenCSR

// .MaskedCSR msg_masked_csr = 1;
inline bool HstateenCSR::_internal_has_msg_masked_csr() const {
  return this != internal_default_instance() && msg_masked_csr_ != nullptr;
}
inline bool HstateenCSR::has_msg_masked_csr() const {
  return _internal_has_msg_masked_csr();
}
inline void HstateenCSR::clear_msg_masked_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_masked_csr_ != nullptr) {
    delete msg_masked_csr_;
  }
  msg_masked_csr_ = nullptr;
}
inline const ::MaskedCSR& HstateenCSR::_internal_msg_masked_csr() const {
  const ::MaskedCSR* p = msg_masked_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& HstateenCSR::msg_masked_csr() const {
  // @@protoc_insertion_point(field_get:HstateenCSR.msg_masked_csr)
  return _internal_msg_masked_csr();
}
inline ::MaskedCSR* HstateenCSR::release_msg_masked_csr() {
  // @@protoc_insertion_point(field_release:HstateenCSR.msg_masked_csr)
  
  ::MaskedCSR* temp = msg_masked_csr_;
  msg_masked_csr_ = nullptr;
  return temp;
}
inline ::MaskedCSR* HstateenCSR::_internal_mutable_msg_masked_csr() {
  
  if (msg_masked_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_masked_csr_ = p;
  }
  return msg_masked_csr_;
}
inline ::MaskedCSR* HstateenCSR::mutable_msg_masked_csr() {
  // @@protoc_insertion_point(field_mutable:HstateenCSR.msg_masked_csr)
  return _internal_mutable_msg_masked_csr();
}
inline void HstateenCSR::set_allocated_msg_masked_csr(::MaskedCSR* msg_masked_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_masked_csr_;
  }
  if (msg_masked_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_masked_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_masked_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_masked_csr_ = msg_masked_csr;
  // @@protoc_insertion_point(field_set_allocated:HstateenCSR.msg_masked_csr)
}

// uint32 msg_index = 2;
inline void HstateenCSR::clear_msg_index() {
  msg_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HstateenCSR::_internal_msg_index() const {
  return msg_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HstateenCSR::msg_index() const {
  // @@protoc_insertion_point(field_get:HstateenCSR.msg_index)
  return _internal_msg_index();
}
inline void HstateenCSR::_internal_set_msg_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_index_ = value;
}
inline void HstateenCSR::set_msg_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_index(value);
  // @@protoc_insertion_point(field_set:HstateenCSR.msg_index)
}

// -------------------------------------------------------------------

// TimeProxyCSR

// .BasicCSR msg_time = 1;
inline bool TimeProxyCSR::_internal_has_msg_time() const {
  return this != internal_default_instance() && msg_time_ != nullptr;
}
inline bool TimeProxyCSR::has_msg_time() const {
  return _internal_has_msg_time();
}
inline void TimeProxyCSR::clear_msg_time() {
  if (GetArenaNoVirtual() == nullptr && msg_time_ != nullptr) {
    delete msg_time_;
  }
  msg_time_ = nullptr;
}
inline const ::BasicCSR& TimeProxyCSR::_internal_msg_time() const {
  const ::BasicCSR* p = msg_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& TimeProxyCSR::msg_time() const {
  // @@protoc_insertion_point(field_get:TimeProxyCSR.msg_time)
  return _internal_msg_time();
}
inline ::BasicCSR* TimeProxyCSR::release_msg_time() {
  // @@protoc_insertion_point(field_release:TimeProxyCSR.msg_time)
  
  ::BasicCSR* temp = msg_time_;
  msg_time_ = nullptr;
  return temp;
}
inline ::BasicCSR* TimeProxyCSR::_internal_mutable_msg_time() {
  
  if (msg_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_time_ = p;
  }
  return msg_time_;
}
inline ::BasicCSR* TimeProxyCSR::mutable_msg_time() {
  // @@protoc_insertion_point(field_mutable:TimeProxyCSR.msg_time)
  return _internal_mutable_msg_time();
}
inline void TimeProxyCSR::set_allocated_msg_time(::BasicCSR* msg_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_time_;
  }
  if (msg_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_time, submessage_arena);
    }
    
  } else {
    
  }
  msg_time_ = msg_time;
  // @@protoc_insertion_point(field_set_allocated:TimeProxyCSR.msg_time)
}

// -------------------------------------------------------------------

// DCSR

// uint32 msg_prv = 1;
inline void DCSR::clear_msg_prv() {
  msg_prv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DCSR::_internal_msg_prv() const {
  return msg_prv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DCSR::msg_prv() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_prv)
  return _internal_msg_prv();
}
inline void DCSR::_internal_set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_prv_ = value;
}
inline void DCSR::set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_prv(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_prv)
}

// bool msg_step = 2;
inline void DCSR::clear_msg_step() {
  msg_step_ = false;
}
inline bool DCSR::_internal_msg_step() const {
  return msg_step_;
}
inline bool DCSR::msg_step() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_step)
  return _internal_msg_step();
}
inline void DCSR::_internal_set_msg_step(bool value) {
  
  msg_step_ = value;
}
inline void DCSR::set_msg_step(bool value) {
  _internal_set_msg_step(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_step)
}

// bool msg_ebreakm = 3;
inline void DCSR::clear_msg_ebreakm() {
  msg_ebreakm_ = false;
}
inline bool DCSR::_internal_msg_ebreakm() const {
  return msg_ebreakm_;
}
inline bool DCSR::msg_ebreakm() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_ebreakm)
  return _internal_msg_ebreakm();
}
inline void DCSR::_internal_set_msg_ebreakm(bool value) {
  
  msg_ebreakm_ = value;
}
inline void DCSR::set_msg_ebreakm(bool value) {
  _internal_set_msg_ebreakm(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_ebreakm)
}

// bool msg_ebreaks = 4;
inline void DCSR::clear_msg_ebreaks() {
  msg_ebreaks_ = false;
}
inline bool DCSR::_internal_msg_ebreaks() const {
  return msg_ebreaks_;
}
inline bool DCSR::msg_ebreaks() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_ebreaks)
  return _internal_msg_ebreaks();
}
inline void DCSR::_internal_set_msg_ebreaks(bool value) {
  
  msg_ebreaks_ = value;
}
inline void DCSR::set_msg_ebreaks(bool value) {
  _internal_set_msg_ebreaks(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_ebreaks)
}

// bool msg_ebreaku = 5;
inline void DCSR::clear_msg_ebreaku() {
  msg_ebreaku_ = false;
}
inline bool DCSR::_internal_msg_ebreaku() const {
  return msg_ebreaku_;
}
inline bool DCSR::msg_ebreaku() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_ebreaku)
  return _internal_msg_ebreaku();
}
inline void DCSR::_internal_set_msg_ebreaku(bool value) {
  
  msg_ebreaku_ = value;
}
inline void DCSR::set_msg_ebreaku(bool value) {
  _internal_set_msg_ebreaku(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_ebreaku)
}

// bool msg_ebreakvs = 6;
inline void DCSR::clear_msg_ebreakvs() {
  msg_ebreakvs_ = false;
}
inline bool DCSR::_internal_msg_ebreakvs() const {
  return msg_ebreakvs_;
}
inline bool DCSR::msg_ebreakvs() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_ebreakvs)
  return _internal_msg_ebreakvs();
}
inline void DCSR::_internal_set_msg_ebreakvs(bool value) {
  
  msg_ebreakvs_ = value;
}
inline void DCSR::set_msg_ebreakvs(bool value) {
  _internal_set_msg_ebreakvs(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_ebreakvs)
}

// bool msg_ebreakvu = 7;
inline void DCSR::clear_msg_ebreakvu() {
  msg_ebreakvu_ = false;
}
inline bool DCSR::_internal_msg_ebreakvu() const {
  return msg_ebreakvu_;
}
inline bool DCSR::msg_ebreakvu() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_ebreakvu)
  return _internal_msg_ebreakvu();
}
inline void DCSR::_internal_set_msg_ebreakvu(bool value) {
  
  msg_ebreakvu_ = value;
}
inline void DCSR::set_msg_ebreakvu(bool value) {
  _internal_set_msg_ebreakvu(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_ebreakvu)
}

// bool msg_halt = 8;
inline void DCSR::clear_msg_halt() {
  msg_halt_ = false;
}
inline bool DCSR::_internal_msg_halt() const {
  return msg_halt_;
}
inline bool DCSR::msg_halt() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_halt)
  return _internal_msg_halt();
}
inline void DCSR::_internal_set_msg_halt(bool value) {
  
  msg_halt_ = value;
}
inline void DCSR::set_msg_halt(bool value) {
  _internal_set_msg_halt(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_halt)
}

// bool msg_v = 9;
inline void DCSR::clear_msg_v() {
  msg_v_ = false;
}
inline bool DCSR::_internal_msg_v() const {
  return msg_v_;
}
inline bool DCSR::msg_v() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_v)
  return _internal_msg_v();
}
inline void DCSR::_internal_set_msg_v(bool value) {
  
  msg_v_ = value;
}
inline void DCSR::set_msg_v(bool value) {
  _internal_set_msg_v(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_v)
}

// uint32 msg_cause = 10;
inline void DCSR::clear_msg_cause() {
  msg_cause_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DCSR::_internal_msg_cause() const {
  return msg_cause_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DCSR::msg_cause() const {
  // @@protoc_insertion_point(field_get:DCSR.msg_cause)
  return _internal_msg_cause();
}
inline void DCSR::_internal_set_msg_cause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_cause_ = value;
}
inline void DCSR::set_msg_cause(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_cause(value);
  // @@protoc_insertion_point(field_set:DCSR.msg_cause)
}

// -------------------------------------------------------------------

// PmpCSR

// .BasicCSR msg_basic_csr = 1;
inline bool PmpCSR::_internal_has_msg_basic_csr() const {
  return this != internal_default_instance() && msg_basic_csr_ != nullptr;
}
inline bool PmpCSR::has_msg_basic_csr() const {
  return _internal_has_msg_basic_csr();
}
inline void PmpCSR::clear_msg_basic_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
}
inline const ::BasicCSR& PmpCSR::_internal_msg_basic_csr() const {
  const ::BasicCSR* p = msg_basic_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& PmpCSR::msg_basic_csr() const {
  // @@protoc_insertion_point(field_get:PmpCSR.msg_basic_csr)
  return _internal_msg_basic_csr();
}
inline ::BasicCSR* PmpCSR::release_msg_basic_csr() {
  // @@protoc_insertion_point(field_release:PmpCSR.msg_basic_csr)
  
  ::BasicCSR* temp = msg_basic_csr_;
  msg_basic_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* PmpCSR::_internal_mutable_msg_basic_csr() {
  
  if (msg_basic_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_basic_csr_ = p;
  }
  return msg_basic_csr_;
}
inline ::BasicCSR* PmpCSR::mutable_msg_basic_csr() {
  // @@protoc_insertion_point(field_mutable:PmpCSR.msg_basic_csr)
  return _internal_mutable_msg_basic_csr();
}
inline void PmpCSR::set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_basic_csr_;
  }
  if (msg_basic_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_basic_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_basic_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_basic_csr_ = msg_basic_csr;
  // @@protoc_insertion_point(field_set_allocated:PmpCSR.msg_basic_csr)
}

// uint32 msg_cfg = 2;
inline void PmpCSR::clear_msg_cfg() {
  msg_cfg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmpCSR::_internal_msg_cfg() const {
  return msg_cfg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PmpCSR::msg_cfg() const {
  // @@protoc_insertion_point(field_get:PmpCSR.msg_cfg)
  return _internal_msg_cfg();
}
inline void PmpCSR::_internal_set_msg_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_cfg_ = value;
}
inline void PmpCSR::set_msg_cfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_cfg(value);
  // @@protoc_insertion_point(field_set:PmpCSR.msg_cfg)
}

// uint64 msg_pmpidx = 3;
inline void PmpCSR::clear_msg_pmpidx() {
  msg_pmpidx_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PmpCSR::_internal_msg_pmpidx() const {
  return msg_pmpidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PmpCSR::msg_pmpidx() const {
  // @@protoc_insertion_point(field_get:PmpCSR.msg_pmpidx)
  return _internal_msg_pmpidx();
}
inline void PmpCSR::_internal_set_msg_pmpidx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_pmpidx_ = value;
}
inline void PmpCSR::set_msg_pmpidx(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_pmpidx(value);
  // @@protoc_insertion_point(field_set:PmpCSR.msg_pmpidx)
}

// -------------------------------------------------------------------

// StimecmpCSR

// .BasicCSR msg_basic_csr = 1;
inline bool StimecmpCSR::_internal_has_msg_basic_csr() const {
  return this != internal_default_instance() && msg_basic_csr_ != nullptr;
}
inline bool StimecmpCSR::has_msg_basic_csr() const {
  return _internal_has_msg_basic_csr();
}
inline void StimecmpCSR::clear_msg_basic_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
}
inline const ::BasicCSR& StimecmpCSR::_internal_msg_basic_csr() const {
  const ::BasicCSR* p = msg_basic_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& StimecmpCSR::msg_basic_csr() const {
  // @@protoc_insertion_point(field_get:StimecmpCSR.msg_basic_csr)
  return _internal_msg_basic_csr();
}
inline ::BasicCSR* StimecmpCSR::release_msg_basic_csr() {
  // @@protoc_insertion_point(field_release:StimecmpCSR.msg_basic_csr)
  
  ::BasicCSR* temp = msg_basic_csr_;
  msg_basic_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* StimecmpCSR::_internal_mutable_msg_basic_csr() {
  
  if (msg_basic_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_basic_csr_ = p;
  }
  return msg_basic_csr_;
}
inline ::BasicCSR* StimecmpCSR::mutable_msg_basic_csr() {
  // @@protoc_insertion_point(field_mutable:StimecmpCSR.msg_basic_csr)
  return _internal_mutable_msg_basic_csr();
}
inline void StimecmpCSR::set_allocated_msg_basic_csr(::BasicCSR* msg_basic_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_basic_csr_;
  }
  if (msg_basic_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_basic_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_basic_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_basic_csr_ = msg_basic_csr;
  // @@protoc_insertion_point(field_set_allocated:StimecmpCSR.msg_basic_csr)
}

// uint64 msg_intr_mask = 2;
inline void StimecmpCSR::clear_msg_intr_mask() {
  msg_intr_mask_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StimecmpCSR::_internal_msg_intr_mask() const {
  return msg_intr_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StimecmpCSR::msg_intr_mask() const {
  // @@protoc_insertion_point(field_get:StimecmpCSR.msg_intr_mask)
  return _internal_msg_intr_mask();
}
inline void StimecmpCSR::_internal_set_msg_intr_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_intr_mask_ = value;
}
inline void StimecmpCSR::set_msg_intr_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_intr_mask(value);
  // @@protoc_insertion_point(field_set:StimecmpCSR.msg_intr_mask)
}

// -------------------------------------------------------------------

// HidelegCSR

// .MaskedCSR msg_hideleg_csr = 1;
inline bool HidelegCSR::_internal_has_msg_hideleg_csr() const {
  return this != internal_default_instance() && msg_hideleg_csr_ != nullptr;
}
inline bool HidelegCSR::has_msg_hideleg_csr() const {
  return _internal_has_msg_hideleg_csr();
}
inline void HidelegCSR::clear_msg_hideleg_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_hideleg_csr_ != nullptr) {
    delete msg_hideleg_csr_;
  }
  msg_hideleg_csr_ = nullptr;
}
inline const ::MaskedCSR& HidelegCSR::_internal_msg_hideleg_csr() const {
  const ::MaskedCSR* p = msg_hideleg_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& HidelegCSR::msg_hideleg_csr() const {
  // @@protoc_insertion_point(field_get:HidelegCSR.msg_hideleg_csr)
  return _internal_msg_hideleg_csr();
}
inline ::MaskedCSR* HidelegCSR::release_msg_hideleg_csr() {
  // @@protoc_insertion_point(field_release:HidelegCSR.msg_hideleg_csr)
  
  ::MaskedCSR* temp = msg_hideleg_csr_;
  msg_hideleg_csr_ = nullptr;
  return temp;
}
inline ::MaskedCSR* HidelegCSR::_internal_mutable_msg_hideleg_csr() {
  
  if (msg_hideleg_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_hideleg_csr_ = p;
  }
  return msg_hideleg_csr_;
}
inline ::MaskedCSR* HidelegCSR::mutable_msg_hideleg_csr() {
  // @@protoc_insertion_point(field_mutable:HidelegCSR.msg_hideleg_csr)
  return _internal_mutable_msg_hideleg_csr();
}
inline void HidelegCSR::set_allocated_msg_hideleg_csr(::MaskedCSR* msg_hideleg_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hideleg_csr_;
  }
  if (msg_hideleg_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hideleg_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hideleg_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_hideleg_csr_ = msg_hideleg_csr;
  // @@protoc_insertion_point(field_set_allocated:HidelegCSR.msg_hideleg_csr)
}

// .BasicCSR msg_mideleg_csr = 2;
inline bool HidelegCSR::_internal_has_msg_mideleg_csr() const {
  return this != internal_default_instance() && msg_mideleg_csr_ != nullptr;
}
inline bool HidelegCSR::has_msg_mideleg_csr() const {
  return _internal_has_msg_mideleg_csr();
}
inline void HidelegCSR::clear_msg_mideleg_csr() {
  if (GetArenaNoVirtual() == nullptr && msg_mideleg_csr_ != nullptr) {
    delete msg_mideleg_csr_;
  }
  msg_mideleg_csr_ = nullptr;
}
inline const ::BasicCSR& HidelegCSR::_internal_msg_mideleg_csr() const {
  const ::BasicCSR* p = msg_mideleg_csr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& HidelegCSR::msg_mideleg_csr() const {
  // @@protoc_insertion_point(field_get:HidelegCSR.msg_mideleg_csr)
  return _internal_msg_mideleg_csr();
}
inline ::BasicCSR* HidelegCSR::release_msg_mideleg_csr() {
  // @@protoc_insertion_point(field_release:HidelegCSR.msg_mideleg_csr)
  
  ::BasicCSR* temp = msg_mideleg_csr_;
  msg_mideleg_csr_ = nullptr;
  return temp;
}
inline ::BasicCSR* HidelegCSR::_internal_mutable_msg_mideleg_csr() {
  
  if (msg_mideleg_csr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mideleg_csr_ = p;
  }
  return msg_mideleg_csr_;
}
inline ::BasicCSR* HidelegCSR::mutable_msg_mideleg_csr() {
  // @@protoc_insertion_point(field_mutable:HidelegCSR.msg_mideleg_csr)
  return _internal_mutable_msg_mideleg_csr();
}
inline void HidelegCSR::set_allocated_msg_mideleg_csr(::BasicCSR* msg_mideleg_csr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mideleg_csr_;
  }
  if (msg_mideleg_csr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mideleg_csr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mideleg_csr, submessage_arena);
    }
    
  } else {
    
  }
  msg_mideleg_csr_ = msg_mideleg_csr;
  // @@protoc_insertion_point(field_set_allocated:HidelegCSR.msg_mideleg_csr)
}

// -------------------------------------------------------------------

// McontextCSR

// .MaskedCSR msg_delegate = 2;
inline bool McontextCSR::_internal_has_msg_delegate() const {
  return this != internal_default_instance() && msg_delegate_ != nullptr;
}
inline bool McontextCSR::has_msg_delegate() const {
  return _internal_has_msg_delegate();
}
inline void McontextCSR::clear_msg_delegate() {
  if (GetArenaNoVirtual() == nullptr && msg_delegate_ != nullptr) {
    delete msg_delegate_;
  }
  msg_delegate_ = nullptr;
}
inline const ::MaskedCSR& McontextCSR::_internal_msg_delegate() const {
  const ::MaskedCSR* p = msg_delegate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& McontextCSR::msg_delegate() const {
  // @@protoc_insertion_point(field_get:McontextCSR.msg_delegate)
  return _internal_msg_delegate();
}
inline ::MaskedCSR* McontextCSR::release_msg_delegate() {
  // @@protoc_insertion_point(field_release:McontextCSR.msg_delegate)
  
  ::MaskedCSR* temp = msg_delegate_;
  msg_delegate_ = nullptr;
  return temp;
}
inline ::MaskedCSR* McontextCSR::_internal_mutable_msg_delegate() {
  
  if (msg_delegate_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_delegate_ = p;
  }
  return msg_delegate_;
}
inline ::MaskedCSR* McontextCSR::mutable_msg_delegate() {
  // @@protoc_insertion_point(field_mutable:McontextCSR.msg_delegate)
  return _internal_mutable_msg_delegate();
}
inline void McontextCSR::set_allocated_msg_delegate(::MaskedCSR* msg_delegate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_delegate_;
  }
  if (msg_delegate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_delegate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_delegate, submessage_arena);
    }
    
  } else {
    
  }
  msg_delegate_ = msg_delegate;
  // @@protoc_insertion_point(field_set_allocated:McontextCSR.msg_delegate)
}

// -------------------------------------------------------------------

// HenvcfgCSR

// .MaskedCSR msg_henvcfg = 1;
inline bool HenvcfgCSR::_internal_has_msg_henvcfg() const {
  return this != internal_default_instance() && msg_henvcfg_ != nullptr;
}
inline bool HenvcfgCSR::has_msg_henvcfg() const {
  return _internal_has_msg_henvcfg();
}
inline void HenvcfgCSR::clear_msg_henvcfg() {
  if (GetArenaNoVirtual() == nullptr && msg_henvcfg_ != nullptr) {
    delete msg_henvcfg_;
  }
  msg_henvcfg_ = nullptr;
}
inline const ::MaskedCSR& HenvcfgCSR::_internal_msg_henvcfg() const {
  const ::MaskedCSR* p = msg_henvcfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& HenvcfgCSR::msg_henvcfg() const {
  // @@protoc_insertion_point(field_get:HenvcfgCSR.msg_henvcfg)
  return _internal_msg_henvcfg();
}
inline ::MaskedCSR* HenvcfgCSR::release_msg_henvcfg() {
  // @@protoc_insertion_point(field_release:HenvcfgCSR.msg_henvcfg)
  
  ::MaskedCSR* temp = msg_henvcfg_;
  msg_henvcfg_ = nullptr;
  return temp;
}
inline ::MaskedCSR* HenvcfgCSR::_internal_mutable_msg_henvcfg() {
  
  if (msg_henvcfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_henvcfg_ = p;
  }
  return msg_henvcfg_;
}
inline ::MaskedCSR* HenvcfgCSR::mutable_msg_henvcfg() {
  // @@protoc_insertion_point(field_mutable:HenvcfgCSR.msg_henvcfg)
  return _internal_mutable_msg_henvcfg();
}
inline void HenvcfgCSR::set_allocated_msg_henvcfg(::MaskedCSR* msg_henvcfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_henvcfg_;
  }
  if (msg_henvcfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_henvcfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_henvcfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_henvcfg_ = msg_henvcfg;
  // @@protoc_insertion_point(field_set_allocated:HenvcfgCSR.msg_henvcfg)
}

// .MaskedCSR msg_menvcfg = 2;
inline bool HenvcfgCSR::_internal_has_msg_menvcfg() const {
  return this != internal_default_instance() && msg_menvcfg_ != nullptr;
}
inline bool HenvcfgCSR::has_msg_menvcfg() const {
  return _internal_has_msg_menvcfg();
}
inline void HenvcfgCSR::clear_msg_menvcfg() {
  if (GetArenaNoVirtual() == nullptr && msg_menvcfg_ != nullptr) {
    delete msg_menvcfg_;
  }
  msg_menvcfg_ = nullptr;
}
inline const ::MaskedCSR& HenvcfgCSR::_internal_msg_menvcfg() const {
  const ::MaskedCSR* p = msg_menvcfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& HenvcfgCSR::msg_menvcfg() const {
  // @@protoc_insertion_point(field_get:HenvcfgCSR.msg_menvcfg)
  return _internal_msg_menvcfg();
}
inline ::MaskedCSR* HenvcfgCSR::release_msg_menvcfg() {
  // @@protoc_insertion_point(field_release:HenvcfgCSR.msg_menvcfg)
  
  ::MaskedCSR* temp = msg_menvcfg_;
  msg_menvcfg_ = nullptr;
  return temp;
}
inline ::MaskedCSR* HenvcfgCSR::_internal_mutable_msg_menvcfg() {
  
  if (msg_menvcfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_menvcfg_ = p;
  }
  return msg_menvcfg_;
}
inline ::MaskedCSR* HenvcfgCSR::mutable_msg_menvcfg() {
  // @@protoc_insertion_point(field_mutable:HenvcfgCSR.msg_menvcfg)
  return _internal_mutable_msg_menvcfg();
}
inline void HenvcfgCSR::set_allocated_msg_menvcfg(::MaskedCSR* msg_menvcfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_menvcfg_;
  }
  if (msg_menvcfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_menvcfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_menvcfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_menvcfg_ = msg_menvcfg;
  // @@protoc_insertion_point(field_set_allocated:HenvcfgCSR.msg_menvcfg)
}

// -------------------------------------------------------------------

// Float128

// uint64 msg_0 = 1;
inline void Float128::clear_msg_0() {
  msg_0_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Float128::_internal_msg_0() const {
  return msg_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Float128::msg_0() const {
  // @@protoc_insertion_point(field_get:Float128.msg_0)
  return _internal_msg_0();
}
inline void Float128::_internal_set_msg_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_0_ = value;
}
inline void Float128::set_msg_0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_0(value);
  // @@protoc_insertion_point(field_set:Float128.msg_0)
}

// uint64 msg_1 = 2;
inline void Float128::clear_msg_1() {
  msg_1_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Float128::_internal_msg_1() const {
  return msg_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Float128::msg_1() const {
  // @@protoc_insertion_point(field_get:Float128.msg_1)
  return _internal_msg_1();
}
inline void Float128::_internal_set_msg_1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_1_ = value;
}
inline void Float128::set_msg_1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_1(value);
  // @@protoc_insertion_point(field_set:Float128.msg_1)
}

// -------------------------------------------------------------------

// ArchState

// uint64 msg_pc = 1;
inline void ArchState::clear_msg_pc() {
  msg_pc_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::_internal_msg_pc() const {
  return msg_pc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::msg_pc() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_pc)
  return _internal_msg_pc();
}
inline void ArchState::_internal_set_msg_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_pc_ = value;
}
inline void ArchState::set_msg_pc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_pc(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_pc)
}

// repeated uint64 msg_XPR = 2;
inline int ArchState::_internal_msg_xpr_size() const {
  return msg_xpr_.size();
}
inline int ArchState::msg_xpr_size() const {
  return _internal_msg_xpr_size();
}
inline void ArchState::clear_msg_xpr() {
  msg_xpr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::_internal_msg_xpr(int index) const {
  return msg_xpr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::msg_xpr(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_XPR)
  return _internal_msg_xpr(index);
}
inline void ArchState::set_msg_xpr(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  msg_xpr_.Set(index, value);
  // @@protoc_insertion_point(field_set:ArchState.msg_XPR)
}
inline void ArchState::_internal_add_msg_xpr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  msg_xpr_.Add(value);
}
inline void ArchState::add_msg_xpr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_msg_xpr(value);
  // @@protoc_insertion_point(field_add:ArchState.msg_XPR)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ArchState::_internal_msg_xpr() const {
  return msg_xpr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ArchState::msg_xpr() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_XPR)
  return _internal_msg_xpr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ArchState::_internal_mutable_msg_xpr() {
  return &msg_xpr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ArchState::mutable_msg_xpr() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_XPR)
  return _internal_mutable_msg_xpr();
}

// repeated .Float128 msg_FPR = 3;
inline int ArchState::_internal_msg_fpr_size() const {
  return msg_fpr_.size();
}
inline int ArchState::msg_fpr_size() const {
  return _internal_msg_fpr_size();
}
inline void ArchState::clear_msg_fpr() {
  msg_fpr_.Clear();
}
inline ::Float128* ArchState::mutable_msg_fpr(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_FPR)
  return msg_fpr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Float128 >*
ArchState::mutable_msg_fpr() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_FPR)
  return &msg_fpr_;
}
inline const ::Float128& ArchState::_internal_msg_fpr(int index) const {
  return msg_fpr_.Get(index);
}
inline const ::Float128& ArchState::msg_fpr(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_FPR)
  return _internal_msg_fpr(index);
}
inline ::Float128* ArchState::_internal_add_msg_fpr() {
  return msg_fpr_.Add();
}
inline ::Float128* ArchState::add_msg_fpr() {
  // @@protoc_insertion_point(field_add:ArchState.msg_FPR)
  return _internal_add_msg_fpr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Float128 >&
ArchState::msg_fpr() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_FPR)
  return msg_fpr_;
}

// uint64 msg_prv = 4;
inline void ArchState::clear_msg_prv() {
  msg_prv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::_internal_msg_prv() const {
  return msg_prv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::msg_prv() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_prv)
  return _internal_msg_prv();
}
inline void ArchState::_internal_set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_prv_ = value;
}
inline void ArchState::set_msg_prv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_prv(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_prv)
}

// uint64 msg_prev_prv = 5;
inline void ArchState::clear_msg_prev_prv() {
  msg_prev_prv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::_internal_msg_prev_prv() const {
  return msg_prev_prv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::msg_prev_prv() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_prev_prv)
  return _internal_msg_prev_prv();
}
inline void ArchState::_internal_set_msg_prev_prv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_prev_prv_ = value;
}
inline void ArchState::set_msg_prev_prv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_prev_prv(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_prev_prv)
}

// bool msg_prv_changed = 6;
inline void ArchState::clear_msg_prv_changed() {
  msg_prv_changed_ = false;
}
inline bool ArchState::_internal_msg_prv_changed() const {
  return msg_prv_changed_;
}
inline bool ArchState::msg_prv_changed() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_prv_changed)
  return _internal_msg_prv_changed();
}
inline void ArchState::_internal_set_msg_prv_changed(bool value) {
  
  msg_prv_changed_ = value;
}
inline void ArchState::set_msg_prv_changed(bool value) {
  _internal_set_msg_prv_changed(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_prv_changed)
}

// bool msg_v_changed = 7;
inline void ArchState::clear_msg_v_changed() {
  msg_v_changed_ = false;
}
inline bool ArchState::_internal_msg_v_changed() const {
  return msg_v_changed_;
}
inline bool ArchState::msg_v_changed() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_v_changed)
  return _internal_msg_v_changed();
}
inline void ArchState::_internal_set_msg_v_changed(bool value) {
  
  msg_v_changed_ = value;
}
inline void ArchState::set_msg_v_changed(bool value) {
  _internal_set_msg_v_changed(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_v_changed)
}

// bool msg_v = 8;
inline void ArchState::clear_msg_v() {
  msg_v_ = false;
}
inline bool ArchState::_internal_msg_v() const {
  return msg_v_;
}
inline bool ArchState::msg_v() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_v)
  return _internal_msg_v();
}
inline void ArchState::_internal_set_msg_v(bool value) {
  
  msg_v_ = value;
}
inline void ArchState::set_msg_v(bool value) {
  _internal_set_msg_v(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_v)
}

// bool msg_prev_v = 9;
inline void ArchState::clear_msg_prev_v() {
  msg_prev_v_ = false;
}
inline bool ArchState::_internal_msg_prev_v() const {
  return msg_prev_v_;
}
inline bool ArchState::msg_prev_v() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_prev_v)
  return _internal_msg_prev_v();
}
inline void ArchState::_internal_set_msg_prev_v(bool value) {
  
  msg_prev_v_ = value;
}
inline void ArchState::set_msg_prev_v(bool value) {
  _internal_set_msg_prev_v(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_prev_v)
}

// .MisaCSR msg_misa = 10;
inline bool ArchState::_internal_has_msg_misa() const {
  return this != internal_default_instance() && msg_misa_ != nullptr;
}
inline bool ArchState::has_msg_misa() const {
  return _internal_has_msg_misa();
}
inline void ArchState::clear_msg_misa() {
  if (GetArenaNoVirtual() == nullptr && msg_misa_ != nullptr) {
    delete msg_misa_;
  }
  msg_misa_ = nullptr;
}
inline const ::MisaCSR& ArchState::_internal_msg_misa() const {
  const ::MisaCSR* p = msg_misa_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MisaCSR*>(
      &::_MisaCSR_default_instance_);
}
inline const ::MisaCSR& ArchState::msg_misa() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_misa)
  return _internal_msg_misa();
}
inline ::MisaCSR* ArchState::release_msg_misa() {
  // @@protoc_insertion_point(field_release:ArchState.msg_misa)
  
  ::MisaCSR* temp = msg_misa_;
  msg_misa_ = nullptr;
  return temp;
}
inline ::MisaCSR* ArchState::_internal_mutable_msg_misa() {
  
  if (msg_misa_ == nullptr) {
    auto* p = CreateMaybeMessage<::MisaCSR>(GetArenaNoVirtual());
    msg_misa_ = p;
  }
  return msg_misa_;
}
inline ::MisaCSR* ArchState::mutable_msg_misa() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_misa)
  return _internal_mutable_msg_misa();
}
inline void ArchState::set_allocated_msg_misa(::MisaCSR* msg_misa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_misa_;
  }
  if (msg_misa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_misa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_misa, submessage_arena);
    }
    
  } else {
    
  }
  msg_misa_ = msg_misa;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_misa)
}

// .MstatusCSR msg_mstatus = 11;
inline bool ArchState::_internal_has_msg_mstatus() const {
  return this != internal_default_instance() && msg_mstatus_ != nullptr;
}
inline bool ArchState::has_msg_mstatus() const {
  return _internal_has_msg_mstatus();
}
inline void ArchState::clear_msg_mstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_mstatus_ != nullptr) {
    delete msg_mstatus_;
  }
  msg_mstatus_ = nullptr;
}
inline const ::MstatusCSR& ArchState::_internal_msg_mstatus() const {
  const ::MstatusCSR* p = msg_mstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MstatusCSR*>(
      &::_MstatusCSR_default_instance_);
}
inline const ::MstatusCSR& ArchState::msg_mstatus() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mstatus)
  return _internal_msg_mstatus();
}
inline ::MstatusCSR* ArchState::release_msg_mstatus() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mstatus)
  
  ::MstatusCSR* temp = msg_mstatus_;
  msg_mstatus_ = nullptr;
  return temp;
}
inline ::MstatusCSR* ArchState::_internal_mutable_msg_mstatus() {
  
  if (msg_mstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::MstatusCSR>(GetArenaNoVirtual());
    msg_mstatus_ = p;
  }
  return msg_mstatus_;
}
inline ::MstatusCSR* ArchState::mutable_msg_mstatus() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mstatus)
  return _internal_mutable_msg_mstatus();
}
inline void ArchState::set_allocated_msg_mstatus(::MstatusCSR* msg_mstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mstatus_;
  }
  if (msg_mstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_mstatus_ = msg_mstatus;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mstatus)
}

// .BasicCSR msg_mepc = 12;
inline bool ArchState::_internal_has_msg_mepc() const {
  return this != internal_default_instance() && msg_mepc_ != nullptr;
}
inline bool ArchState::has_msg_mepc() const {
  return _internal_has_msg_mepc();
}
inline void ArchState::clear_msg_mepc() {
  if (GetArenaNoVirtual() == nullptr && msg_mepc_ != nullptr) {
    delete msg_mepc_;
  }
  msg_mepc_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mepc() const {
  const ::BasicCSR* p = msg_mepc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mepc() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mepc)
  return _internal_msg_mepc();
}
inline ::BasicCSR* ArchState::release_msg_mepc() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mepc)
  
  ::BasicCSR* temp = msg_mepc_;
  msg_mepc_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mepc() {
  
  if (msg_mepc_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mepc_ = p;
  }
  return msg_mepc_;
}
inline ::BasicCSR* ArchState::mutable_msg_mepc() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mepc)
  return _internal_mutable_msg_mepc();
}
inline void ArchState::set_allocated_msg_mepc(::BasicCSR* msg_mepc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mepc_;
  }
  if (msg_mepc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mepc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mepc, submessage_arena);
    }
    
  } else {
    
  }
  msg_mepc_ = msg_mepc;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mepc)
}

// .BasicCSR msg_mtval = 13;
inline bool ArchState::_internal_has_msg_mtval() const {
  return this != internal_default_instance() && msg_mtval_ != nullptr;
}
inline bool ArchState::has_msg_mtval() const {
  return _internal_has_msg_mtval();
}
inline void ArchState::clear_msg_mtval() {
  if (GetArenaNoVirtual() == nullptr && msg_mtval_ != nullptr) {
    delete msg_mtval_;
  }
  msg_mtval_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mtval() const {
  const ::BasicCSR* p = msg_mtval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mtval() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mtval)
  return _internal_msg_mtval();
}
inline ::BasicCSR* ArchState::release_msg_mtval() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mtval)
  
  ::BasicCSR* temp = msg_mtval_;
  msg_mtval_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mtval() {
  
  if (msg_mtval_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mtval_ = p;
  }
  return msg_mtval_;
}
inline ::BasicCSR* ArchState::mutable_msg_mtval() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mtval)
  return _internal_mutable_msg_mtval();
}
inline void ArchState::set_allocated_msg_mtval(::BasicCSR* msg_mtval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mtval_;
  }
  if (msg_mtval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mtval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mtval, submessage_arena);
    }
    
  } else {
    
  }
  msg_mtval_ = msg_mtval;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mtval)
}

// .BasicCSR msg_mscratch = 14;
inline bool ArchState::_internal_has_msg_mscratch() const {
  return this != internal_default_instance() && msg_mscratch_ != nullptr;
}
inline bool ArchState::has_msg_mscratch() const {
  return _internal_has_msg_mscratch();
}
inline void ArchState::clear_msg_mscratch() {
  if (GetArenaNoVirtual() == nullptr && msg_mscratch_ != nullptr) {
    delete msg_mscratch_;
  }
  msg_mscratch_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mscratch() const {
  const ::BasicCSR* p = msg_mscratch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mscratch() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mscratch)
  return _internal_msg_mscratch();
}
inline ::BasicCSR* ArchState::release_msg_mscratch() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mscratch)
  
  ::BasicCSR* temp = msg_mscratch_;
  msg_mscratch_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mscratch() {
  
  if (msg_mscratch_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mscratch_ = p;
  }
  return msg_mscratch_;
}
inline ::BasicCSR* ArchState::mutable_msg_mscratch() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mscratch)
  return _internal_mutable_msg_mscratch();
}
inline void ArchState::set_allocated_msg_mscratch(::BasicCSR* msg_mscratch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mscratch_;
  }
  if (msg_mscratch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mscratch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mscratch, submessage_arena);
    }
    
  } else {
    
  }
  msg_mscratch_ = msg_mscratch;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mscratch)
}

// .BasicCSR msg_mtvec = 15;
inline bool ArchState::_internal_has_msg_mtvec() const {
  return this != internal_default_instance() && msg_mtvec_ != nullptr;
}
inline bool ArchState::has_msg_mtvec() const {
  return _internal_has_msg_mtvec();
}
inline void ArchState::clear_msg_mtvec() {
  if (GetArenaNoVirtual() == nullptr && msg_mtvec_ != nullptr) {
    delete msg_mtvec_;
  }
  msg_mtvec_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mtvec() const {
  const ::BasicCSR* p = msg_mtvec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mtvec() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mtvec)
  return _internal_msg_mtvec();
}
inline ::BasicCSR* ArchState::release_msg_mtvec() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mtvec)
  
  ::BasicCSR* temp = msg_mtvec_;
  msg_mtvec_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mtvec() {
  
  if (msg_mtvec_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mtvec_ = p;
  }
  return msg_mtvec_;
}
inline ::BasicCSR* ArchState::mutable_msg_mtvec() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mtvec)
  return _internal_mutable_msg_mtvec();
}
inline void ArchState::set_allocated_msg_mtvec(::BasicCSR* msg_mtvec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mtvec_;
  }
  if (msg_mtvec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mtvec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mtvec, submessage_arena);
    }
    
  } else {
    
  }
  msg_mtvec_ = msg_mtvec;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mtvec)
}

// .BasicCSR msg_mcause = 16;
inline bool ArchState::_internal_has_msg_mcause() const {
  return this != internal_default_instance() && msg_mcause_ != nullptr;
}
inline bool ArchState::has_msg_mcause() const {
  return _internal_has_msg_mcause();
}
inline void ArchState::clear_msg_mcause() {
  if (GetArenaNoVirtual() == nullptr && msg_mcause_ != nullptr) {
    delete msg_mcause_;
  }
  msg_mcause_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mcause() const {
  const ::BasicCSR* p = msg_mcause_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mcause() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mcause)
  return _internal_msg_mcause();
}
inline ::BasicCSR* ArchState::release_msg_mcause() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mcause)
  
  ::BasicCSR* temp = msg_mcause_;
  msg_mcause_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mcause() {
  
  if (msg_mcause_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mcause_ = p;
  }
  return msg_mcause_;
}
inline ::BasicCSR* ArchState::mutable_msg_mcause() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mcause)
  return _internal_mutable_msg_mcause();
}
inline void ArchState::set_allocated_msg_mcause(::BasicCSR* msg_mcause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mcause_;
  }
  if (msg_mcause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mcause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mcause, submessage_arena);
    }
    
  } else {
    
  }
  msg_mcause_ = msg_mcause;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mcause)
}

// .WideCntrCSR msg_minstret = 17;
inline bool ArchState::_internal_has_msg_minstret() const {
  return this != internal_default_instance() && msg_minstret_ != nullptr;
}
inline bool ArchState::has_msg_minstret() const {
  return _internal_has_msg_minstret();
}
inline void ArchState::clear_msg_minstret() {
  if (GetArenaNoVirtual() == nullptr && msg_minstret_ != nullptr) {
    delete msg_minstret_;
  }
  msg_minstret_ = nullptr;
}
inline const ::WideCntrCSR& ArchState::_internal_msg_minstret() const {
  const ::WideCntrCSR* p = msg_minstret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::WideCntrCSR*>(
      &::_WideCntrCSR_default_instance_);
}
inline const ::WideCntrCSR& ArchState::msg_minstret() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_minstret)
  return _internal_msg_minstret();
}
inline ::WideCntrCSR* ArchState::release_msg_minstret() {
  // @@protoc_insertion_point(field_release:ArchState.msg_minstret)
  
  ::WideCntrCSR* temp = msg_minstret_;
  msg_minstret_ = nullptr;
  return temp;
}
inline ::WideCntrCSR* ArchState::_internal_mutable_msg_minstret() {
  
  if (msg_minstret_ == nullptr) {
    auto* p = CreateMaybeMessage<::WideCntrCSR>(GetArenaNoVirtual());
    msg_minstret_ = p;
  }
  return msg_minstret_;
}
inline ::WideCntrCSR* ArchState::mutable_msg_minstret() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_minstret)
  return _internal_mutable_msg_minstret();
}
inline void ArchState::set_allocated_msg_minstret(::WideCntrCSR* msg_minstret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_minstret_;
  }
  if (msg_minstret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_minstret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_minstret, submessage_arena);
    }
    
  } else {
    
  }
  msg_minstret_ = msg_minstret;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_minstret)
}

// .WideCntrCSR msg_mcycle = 18;
inline bool ArchState::_internal_has_msg_mcycle() const {
  return this != internal_default_instance() && msg_mcycle_ != nullptr;
}
inline bool ArchState::has_msg_mcycle() const {
  return _internal_has_msg_mcycle();
}
inline void ArchState::clear_msg_mcycle() {
  if (GetArenaNoVirtual() == nullptr && msg_mcycle_ != nullptr) {
    delete msg_mcycle_;
  }
  msg_mcycle_ = nullptr;
}
inline const ::WideCntrCSR& ArchState::_internal_msg_mcycle() const {
  const ::WideCntrCSR* p = msg_mcycle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::WideCntrCSR*>(
      &::_WideCntrCSR_default_instance_);
}
inline const ::WideCntrCSR& ArchState::msg_mcycle() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mcycle)
  return _internal_msg_mcycle();
}
inline ::WideCntrCSR* ArchState::release_msg_mcycle() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mcycle)
  
  ::WideCntrCSR* temp = msg_mcycle_;
  msg_mcycle_ = nullptr;
  return temp;
}
inline ::WideCntrCSR* ArchState::_internal_mutable_msg_mcycle() {
  
  if (msg_mcycle_ == nullptr) {
    auto* p = CreateMaybeMessage<::WideCntrCSR>(GetArenaNoVirtual());
    msg_mcycle_ = p;
  }
  return msg_mcycle_;
}
inline ::WideCntrCSR* ArchState::mutable_msg_mcycle() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mcycle)
  return _internal_mutable_msg_mcycle();
}
inline void ArchState::set_allocated_msg_mcycle(::WideCntrCSR* msg_mcycle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mcycle_;
  }
  if (msg_mcycle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mcycle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mcycle, submessage_arena);
    }
    
  } else {
    
  }
  msg_mcycle_ = msg_mcycle;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mcycle)
}

// .BasicCSR msg_time = 19;
inline bool ArchState::_internal_has_msg_time() const {
  return this != internal_default_instance() && msg_time_ != nullptr;
}
inline bool ArchState::has_msg_time() const {
  return _internal_has_msg_time();
}
inline void ArchState::clear_msg_time() {
  if (GetArenaNoVirtual() == nullptr && msg_time_ != nullptr) {
    delete msg_time_;
  }
  msg_time_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_time() const {
  const ::BasicCSR* p = msg_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_time() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_time)
  return _internal_msg_time();
}
inline ::BasicCSR* ArchState::release_msg_time() {
  // @@protoc_insertion_point(field_release:ArchState.msg_time)
  
  ::BasicCSR* temp = msg_time_;
  msg_time_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_time() {
  
  if (msg_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_time_ = p;
  }
  return msg_time_;
}
inline ::BasicCSR* ArchState::mutable_msg_time() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_time)
  return _internal_mutable_msg_time();
}
inline void ArchState::set_allocated_msg_time(::BasicCSR* msg_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_time_;
  }
  if (msg_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_time, submessage_arena);
    }
    
  } else {
    
  }
  msg_time_ = msg_time;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_time)
}

// repeated .BasicCSR msg_mevent = 20;
inline int ArchState::_internal_msg_mevent_size() const {
  return msg_mevent_.size();
}
inline int ArchState::msg_mevent_size() const {
  return _internal_msg_mevent_size();
}
inline void ArchState::clear_msg_mevent() {
  msg_mevent_.Clear();
}
inline ::BasicCSR* ArchState::mutable_msg_mevent(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mevent)
  return msg_mevent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicCSR >*
ArchState::mutable_msg_mevent() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_mevent)
  return &msg_mevent_;
}
inline const ::BasicCSR& ArchState::_internal_msg_mevent(int index) const {
  return msg_mevent_.Get(index);
}
inline const ::BasicCSR& ArchState::msg_mevent(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mevent)
  return _internal_msg_mevent(index);
}
inline ::BasicCSR* ArchState::_internal_add_msg_mevent() {
  return msg_mevent_.Add();
}
inline ::BasicCSR* ArchState::add_msg_mevent() {
  // @@protoc_insertion_point(field_add:ArchState.msg_mevent)
  return _internal_add_msg_mevent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicCSR >&
ArchState::msg_mevent() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_mevent)
  return msg_mevent_;
}

// .BasicCSR msg_mie = 25;
inline bool ArchState::_internal_has_msg_mie() const {
  return this != internal_default_instance() && msg_mie_ != nullptr;
}
inline bool ArchState::has_msg_mie() const {
  return _internal_has_msg_mie();
}
inline void ArchState::clear_msg_mie() {
  if (GetArenaNoVirtual() == nullptr && msg_mie_ != nullptr) {
    delete msg_mie_;
  }
  msg_mie_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mie() const {
  const ::BasicCSR* p = msg_mie_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mie() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mie)
  return _internal_msg_mie();
}
inline ::BasicCSR* ArchState::release_msg_mie() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mie)
  
  ::BasicCSR* temp = msg_mie_;
  msg_mie_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mie() {
  
  if (msg_mie_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mie_ = p;
  }
  return msg_mie_;
}
inline ::BasicCSR* ArchState::mutable_msg_mie() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mie)
  return _internal_mutable_msg_mie();
}
inline void ArchState::set_allocated_msg_mie(::BasicCSR* msg_mie) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mie_;
  }
  if (msg_mie) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mie = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mie, submessage_arena);
    }
    
  } else {
    
  }
  msg_mie_ = msg_mie;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mie)
}

// .BasicCSR msg_mip = 26;
inline bool ArchState::_internal_has_msg_mip() const {
  return this != internal_default_instance() && msg_mip_ != nullptr;
}
inline bool ArchState::has_msg_mip() const {
  return _internal_has_msg_mip();
}
inline void ArchState::clear_msg_mip() {
  if (GetArenaNoVirtual() == nullptr && msg_mip_ != nullptr) {
    delete msg_mip_;
  }
  msg_mip_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mip() const {
  const ::BasicCSR* p = msg_mip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mip() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mip)
  return _internal_msg_mip();
}
inline ::BasicCSR* ArchState::release_msg_mip() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mip)
  
  ::BasicCSR* temp = msg_mip_;
  msg_mip_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mip() {
  
  if (msg_mip_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mip_ = p;
  }
  return msg_mip_;
}
inline ::BasicCSR* ArchState::mutable_msg_mip() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mip)
  return _internal_mutable_msg_mip();
}
inline void ArchState::set_allocated_msg_mip(::BasicCSR* msg_mip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mip_;
  }
  if (msg_mip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mip, submessage_arena);
    }
    
  } else {
    
  }
  msg_mip_ = msg_mip;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mip)
}

// .MedelegCSR msg_medeleg = 34;
inline bool ArchState::_internal_has_msg_medeleg() const {
  return this != internal_default_instance() && msg_medeleg_ != nullptr;
}
inline bool ArchState::has_msg_medeleg() const {
  return _internal_has_msg_medeleg();
}
inline void ArchState::clear_msg_medeleg() {
  if (GetArenaNoVirtual() == nullptr && msg_medeleg_ != nullptr) {
    delete msg_medeleg_;
  }
  msg_medeleg_ = nullptr;
}
inline const ::MedelegCSR& ArchState::_internal_msg_medeleg() const {
  const ::MedelegCSR* p = msg_medeleg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MedelegCSR*>(
      &::_MedelegCSR_default_instance_);
}
inline const ::MedelegCSR& ArchState::msg_medeleg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_medeleg)
  return _internal_msg_medeleg();
}
inline ::MedelegCSR* ArchState::release_msg_medeleg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_medeleg)
  
  ::MedelegCSR* temp = msg_medeleg_;
  msg_medeleg_ = nullptr;
  return temp;
}
inline ::MedelegCSR* ArchState::_internal_mutable_msg_medeleg() {
  
  if (msg_medeleg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MedelegCSR>(GetArenaNoVirtual());
    msg_medeleg_ = p;
  }
  return msg_medeleg_;
}
inline ::MedelegCSR* ArchState::mutable_msg_medeleg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_medeleg)
  return _internal_mutable_msg_medeleg();
}
inline void ArchState::set_allocated_msg_medeleg(::MedelegCSR* msg_medeleg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_medeleg_;
  }
  if (msg_medeleg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_medeleg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_medeleg, submessage_arena);
    }
    
  } else {
    
  }
  msg_medeleg_ = msg_medeleg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_medeleg)
}

// .MaskedCSR msg_mcounteren = 36;
inline bool ArchState::_internal_has_msg_mcounteren() const {
  return this != internal_default_instance() && msg_mcounteren_ != nullptr;
}
inline bool ArchState::has_msg_mcounteren() const {
  return _internal_has_msg_mcounteren();
}
inline void ArchState::clear_msg_mcounteren() {
  if (GetArenaNoVirtual() == nullptr && msg_mcounteren_ != nullptr) {
    delete msg_mcounteren_;
  }
  msg_mcounteren_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_mcounteren() const {
  const ::MaskedCSR* p = msg_mcounteren_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_mcounteren() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mcounteren)
  return _internal_msg_mcounteren();
}
inline ::MaskedCSR* ArchState::release_msg_mcounteren() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mcounteren)
  
  ::MaskedCSR* temp = msg_mcounteren_;
  msg_mcounteren_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_mcounteren() {
  
  if (msg_mcounteren_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_mcounteren_ = p;
  }
  return msg_mcounteren_;
}
inline ::MaskedCSR* ArchState::mutable_msg_mcounteren() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mcounteren)
  return _internal_mutable_msg_mcounteren();
}
inline void ArchState::set_allocated_msg_mcounteren(::MaskedCSR* msg_mcounteren) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mcounteren_;
  }
  if (msg_mcounteren) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mcounteren = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mcounteren, submessage_arena);
    }
    
  } else {
    
  }
  msg_mcounteren_ = msg_mcounteren;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mcounteren)
}

// .MaskedCSR msg_scounteren = 37;
inline bool ArchState::_internal_has_msg_scounteren() const {
  return this != internal_default_instance() && msg_scounteren_ != nullptr;
}
inline bool ArchState::has_msg_scounteren() const {
  return _internal_has_msg_scounteren();
}
inline void ArchState::clear_msg_scounteren() {
  if (GetArenaNoVirtual() == nullptr && msg_scounteren_ != nullptr) {
    delete msg_scounteren_;
  }
  msg_scounteren_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_scounteren() const {
  const ::MaskedCSR* p = msg_scounteren_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_scounteren() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_scounteren)
  return _internal_msg_scounteren();
}
inline ::MaskedCSR* ArchState::release_msg_scounteren() {
  // @@protoc_insertion_point(field_release:ArchState.msg_scounteren)
  
  ::MaskedCSR* temp = msg_scounteren_;
  msg_scounteren_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_scounteren() {
  
  if (msg_scounteren_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_scounteren_ = p;
  }
  return msg_scounteren_;
}
inline ::MaskedCSR* ArchState::mutable_msg_scounteren() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_scounteren)
  return _internal_mutable_msg_scounteren();
}
inline void ArchState::set_allocated_msg_scounteren(::MaskedCSR* msg_scounteren) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_scounteren_;
  }
  if (msg_scounteren) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_scounteren = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_scounteren, submessage_arena);
    }
    
  } else {
    
  }
  msg_scounteren_ = msg_scounteren;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_scounteren)
}

// .VirtBasicCSR msg_sepc = 38;
inline bool ArchState::_internal_has_msg_sepc() const {
  return this != internal_default_instance() && msg_sepc_ != nullptr;
}
inline bool ArchState::has_msg_sepc() const {
  return _internal_has_msg_sepc();
}
inline void ArchState::clear_msg_sepc() {
  if (GetArenaNoVirtual() == nullptr && msg_sepc_ != nullptr) {
    delete msg_sepc_;
  }
  msg_sepc_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_sepc() const {
  const ::VirtBasicCSR* p = msg_sepc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_sepc() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_sepc)
  return _internal_msg_sepc();
}
inline ::VirtBasicCSR* ArchState::release_msg_sepc() {
  // @@protoc_insertion_point(field_release:ArchState.msg_sepc)
  
  ::VirtBasicCSR* temp = msg_sepc_;
  msg_sepc_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_sepc() {
  
  if (msg_sepc_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_sepc_ = p;
  }
  return msg_sepc_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_sepc() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_sepc)
  return _internal_mutable_msg_sepc();
}
inline void ArchState::set_allocated_msg_sepc(::VirtBasicCSR* msg_sepc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_sepc_;
  }
  if (msg_sepc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_sepc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_sepc, submessage_arena);
    }
    
  } else {
    
  }
  msg_sepc_ = msg_sepc;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_sepc)
}

// .VirtBasicCSR msg_stval = 39;
inline bool ArchState::_internal_has_msg_stval() const {
  return this != internal_default_instance() && msg_stval_ != nullptr;
}
inline bool ArchState::has_msg_stval() const {
  return _internal_has_msg_stval();
}
inline void ArchState::clear_msg_stval() {
  if (GetArenaNoVirtual() == nullptr && msg_stval_ != nullptr) {
    delete msg_stval_;
  }
  msg_stval_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_stval() const {
  const ::VirtBasicCSR* p = msg_stval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_stval() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_stval)
  return _internal_msg_stval();
}
inline ::VirtBasicCSR* ArchState::release_msg_stval() {
  // @@protoc_insertion_point(field_release:ArchState.msg_stval)
  
  ::VirtBasicCSR* temp = msg_stval_;
  msg_stval_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_stval() {
  
  if (msg_stval_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_stval_ = p;
  }
  return msg_stval_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_stval() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_stval)
  return _internal_mutable_msg_stval();
}
inline void ArchState::set_allocated_msg_stval(::VirtBasicCSR* msg_stval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_stval_;
  }
  if (msg_stval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_stval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_stval, submessage_arena);
    }
    
  } else {
    
  }
  msg_stval_ = msg_stval;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_stval)
}

// .VirtBasicCSR msg_sscratch = 40;
inline bool ArchState::_internal_has_msg_sscratch() const {
  return this != internal_default_instance() && msg_sscratch_ != nullptr;
}
inline bool ArchState::has_msg_sscratch() const {
  return _internal_has_msg_sscratch();
}
inline void ArchState::clear_msg_sscratch() {
  if (GetArenaNoVirtual() == nullptr && msg_sscratch_ != nullptr) {
    delete msg_sscratch_;
  }
  msg_sscratch_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_sscratch() const {
  const ::VirtBasicCSR* p = msg_sscratch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_sscratch() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_sscratch)
  return _internal_msg_sscratch();
}
inline ::VirtBasicCSR* ArchState::release_msg_sscratch() {
  // @@protoc_insertion_point(field_release:ArchState.msg_sscratch)
  
  ::VirtBasicCSR* temp = msg_sscratch_;
  msg_sscratch_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_sscratch() {
  
  if (msg_sscratch_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_sscratch_ = p;
  }
  return msg_sscratch_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_sscratch() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_sscratch)
  return _internal_mutable_msg_sscratch();
}
inline void ArchState::set_allocated_msg_sscratch(::VirtBasicCSR* msg_sscratch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_sscratch_;
  }
  if (msg_sscratch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_sscratch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_sscratch, submessage_arena);
    }
    
  } else {
    
  }
  msg_sscratch_ = msg_sscratch;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_sscratch)
}

// .VirtBasicCSR msg_stvec = 41;
inline bool ArchState::_internal_has_msg_stvec() const {
  return this != internal_default_instance() && msg_stvec_ != nullptr;
}
inline bool ArchState::has_msg_stvec() const {
  return _internal_has_msg_stvec();
}
inline void ArchState::clear_msg_stvec() {
  if (GetArenaNoVirtual() == nullptr && msg_stvec_ != nullptr) {
    delete msg_stvec_;
  }
  msg_stvec_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_stvec() const {
  const ::VirtBasicCSR* p = msg_stvec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_stvec() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_stvec)
  return _internal_msg_stvec();
}
inline ::VirtBasicCSR* ArchState::release_msg_stvec() {
  // @@protoc_insertion_point(field_release:ArchState.msg_stvec)
  
  ::VirtBasicCSR* temp = msg_stvec_;
  msg_stvec_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_stvec() {
  
  if (msg_stvec_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_stvec_ = p;
  }
  return msg_stvec_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_stvec() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_stvec)
  return _internal_mutable_msg_stvec();
}
inline void ArchState::set_allocated_msg_stvec(::VirtBasicCSR* msg_stvec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_stvec_;
  }
  if (msg_stvec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_stvec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_stvec, submessage_arena);
    }
    
  } else {
    
  }
  msg_stvec_ = msg_stvec;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_stvec)
}

// .VirtBasicCSR msg_satp = 42;
inline bool ArchState::_internal_has_msg_satp() const {
  return this != internal_default_instance() && msg_satp_ != nullptr;
}
inline bool ArchState::has_msg_satp() const {
  return _internal_has_msg_satp();
}
inline void ArchState::clear_msg_satp() {
  if (GetArenaNoVirtual() == nullptr && msg_satp_ != nullptr) {
    delete msg_satp_;
  }
  msg_satp_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_satp() const {
  const ::VirtBasicCSR* p = msg_satp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_satp() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_satp)
  return _internal_msg_satp();
}
inline ::VirtBasicCSR* ArchState::release_msg_satp() {
  // @@protoc_insertion_point(field_release:ArchState.msg_satp)
  
  ::VirtBasicCSR* temp = msg_satp_;
  msg_satp_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_satp() {
  
  if (msg_satp_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_satp_ = p;
  }
  return msg_satp_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_satp() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_satp)
  return _internal_mutable_msg_satp();
}
inline void ArchState::set_allocated_msg_satp(::VirtBasicCSR* msg_satp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_satp_;
  }
  if (msg_satp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_satp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_satp, submessage_arena);
    }
    
  } else {
    
  }
  msg_satp_ = msg_satp;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_satp)
}

// .VirtBasicCSR msg_scause = 43;
inline bool ArchState::_internal_has_msg_scause() const {
  return this != internal_default_instance() && msg_scause_ != nullptr;
}
inline bool ArchState::has_msg_scause() const {
  return _internal_has_msg_scause();
}
inline void ArchState::clear_msg_scause() {
  if (GetArenaNoVirtual() == nullptr && msg_scause_ != nullptr) {
    delete msg_scause_;
  }
  msg_scause_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_scause() const {
  const ::VirtBasicCSR* p = msg_scause_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_scause() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_scause)
  return _internal_msg_scause();
}
inline ::VirtBasicCSR* ArchState::release_msg_scause() {
  // @@protoc_insertion_point(field_release:ArchState.msg_scause)
  
  ::VirtBasicCSR* temp = msg_scause_;
  msg_scause_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_scause() {
  
  if (msg_scause_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_scause_ = p;
  }
  return msg_scause_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_scause() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_scause)
  return _internal_mutable_msg_scause();
}
inline void ArchState::set_allocated_msg_scause(::VirtBasicCSR* msg_scause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_scause_;
  }
  if (msg_scause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_scause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_scause, submessage_arena);
    }
    
  } else {
    
  }
  msg_scause_ = msg_scause;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_scause)
}

// .BasicCSR msg_mtval2 = 44;
inline bool ArchState::_internal_has_msg_mtval2() const {
  return this != internal_default_instance() && msg_mtval2_ != nullptr;
}
inline bool ArchState::has_msg_mtval2() const {
  return _internal_has_msg_mtval2();
}
inline void ArchState::clear_msg_mtval2() {
  if (GetArenaNoVirtual() == nullptr && msg_mtval2_ != nullptr) {
    delete msg_mtval2_;
  }
  msg_mtval2_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mtval2() const {
  const ::BasicCSR* p = msg_mtval2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mtval2() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mtval2)
  return _internal_msg_mtval2();
}
inline ::BasicCSR* ArchState::release_msg_mtval2() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mtval2)
  
  ::BasicCSR* temp = msg_mtval2_;
  msg_mtval2_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mtval2() {
  
  if (msg_mtval2_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mtval2_ = p;
  }
  return msg_mtval2_;
}
inline ::BasicCSR* ArchState::mutable_msg_mtval2() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mtval2)
  return _internal_mutable_msg_mtval2();
}
inline void ArchState::set_allocated_msg_mtval2(::BasicCSR* msg_mtval2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mtval2_;
  }
  if (msg_mtval2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mtval2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mtval2, submessage_arena);
    }
    
  } else {
    
  }
  msg_mtval2_ = msg_mtval2;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mtval2)
}

// .BasicCSR msg_mtinst = 45;
inline bool ArchState::_internal_has_msg_mtinst() const {
  return this != internal_default_instance() && msg_mtinst_ != nullptr;
}
inline bool ArchState::has_msg_mtinst() const {
  return _internal_has_msg_mtinst();
}
inline void ArchState::clear_msg_mtinst() {
  if (GetArenaNoVirtual() == nullptr && msg_mtinst_ != nullptr) {
    delete msg_mtinst_;
  }
  msg_mtinst_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mtinst() const {
  const ::BasicCSR* p = msg_mtinst_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mtinst() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mtinst)
  return _internal_msg_mtinst();
}
inline ::BasicCSR* ArchState::release_msg_mtinst() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mtinst)
  
  ::BasicCSR* temp = msg_mtinst_;
  msg_mtinst_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mtinst() {
  
  if (msg_mtinst_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mtinst_ = p;
  }
  return msg_mtinst_;
}
inline ::BasicCSR* ArchState::mutable_msg_mtinst() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mtinst)
  return _internal_mutable_msg_mtinst();
}
inline void ArchState::set_allocated_msg_mtinst(::BasicCSR* msg_mtinst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mtinst_;
  }
  if (msg_mtinst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mtinst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mtinst, submessage_arena);
    }
    
  } else {
    
  }
  msg_mtinst_ = msg_mtinst;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mtinst)
}

// .MaskedCSR msg_hstatus = 46;
inline bool ArchState::_internal_has_msg_hstatus() const {
  return this != internal_default_instance() && msg_hstatus_ != nullptr;
}
inline bool ArchState::has_msg_hstatus() const {
  return _internal_has_msg_hstatus();
}
inline void ArchState::clear_msg_hstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_hstatus_ != nullptr) {
    delete msg_hstatus_;
  }
  msg_hstatus_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_hstatus() const {
  const ::MaskedCSR* p = msg_hstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_hstatus() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hstatus)
  return _internal_msg_hstatus();
}
inline ::MaskedCSR* ArchState::release_msg_hstatus() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hstatus)
  
  ::MaskedCSR* temp = msg_hstatus_;
  msg_hstatus_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_hstatus() {
  
  if (msg_hstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_hstatus_ = p;
  }
  return msg_hstatus_;
}
inline ::MaskedCSR* ArchState::mutable_msg_hstatus() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hstatus)
  return _internal_mutable_msg_hstatus();
}
inline void ArchState::set_allocated_msg_hstatus(::MaskedCSR* msg_hstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hstatus_;
  }
  if (msg_hstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_hstatus_ = msg_hstatus;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hstatus)
}

// .HidelegCSR msg_hideleg = 49;
inline bool ArchState::_internal_has_msg_hideleg() const {
  return this != internal_default_instance() && msg_hideleg_ != nullptr;
}
inline bool ArchState::has_msg_hideleg() const {
  return _internal_has_msg_hideleg();
}
inline void ArchState::clear_msg_hideleg() {
  if (GetArenaNoVirtual() == nullptr && msg_hideleg_ != nullptr) {
    delete msg_hideleg_;
  }
  msg_hideleg_ = nullptr;
}
inline const ::HidelegCSR& ArchState::_internal_msg_hideleg() const {
  const ::HidelegCSR* p = msg_hideleg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HidelegCSR*>(
      &::_HidelegCSR_default_instance_);
}
inline const ::HidelegCSR& ArchState::msg_hideleg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hideleg)
  return _internal_msg_hideleg();
}
inline ::HidelegCSR* ArchState::release_msg_hideleg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hideleg)
  
  ::HidelegCSR* temp = msg_hideleg_;
  msg_hideleg_ = nullptr;
  return temp;
}
inline ::HidelegCSR* ArchState::_internal_mutable_msg_hideleg() {
  
  if (msg_hideleg_ == nullptr) {
    auto* p = CreateMaybeMessage<::HidelegCSR>(GetArenaNoVirtual());
    msg_hideleg_ = p;
  }
  return msg_hideleg_;
}
inline ::HidelegCSR* ArchState::mutable_msg_hideleg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hideleg)
  return _internal_mutable_msg_hideleg();
}
inline void ArchState::set_allocated_msg_hideleg(::HidelegCSR* msg_hideleg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hideleg_;
  }
  if (msg_hideleg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hideleg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hideleg, submessage_arena);
    }
    
  } else {
    
  }
  msg_hideleg_ = msg_hideleg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hideleg)
}

// .MaskedCSR msg_hedeleg = 50;
inline bool ArchState::_internal_has_msg_hedeleg() const {
  return this != internal_default_instance() && msg_hedeleg_ != nullptr;
}
inline bool ArchState::has_msg_hedeleg() const {
  return _internal_has_msg_hedeleg();
}
inline void ArchState::clear_msg_hedeleg() {
  if (GetArenaNoVirtual() == nullptr && msg_hedeleg_ != nullptr) {
    delete msg_hedeleg_;
  }
  msg_hedeleg_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_hedeleg() const {
  const ::MaskedCSR* p = msg_hedeleg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_hedeleg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hedeleg)
  return _internal_msg_hedeleg();
}
inline ::MaskedCSR* ArchState::release_msg_hedeleg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hedeleg)
  
  ::MaskedCSR* temp = msg_hedeleg_;
  msg_hedeleg_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_hedeleg() {
  
  if (msg_hedeleg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_hedeleg_ = p;
  }
  return msg_hedeleg_;
}
inline ::MaskedCSR* ArchState::mutable_msg_hedeleg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hedeleg)
  return _internal_mutable_msg_hedeleg();
}
inline void ArchState::set_allocated_msg_hedeleg(::MaskedCSR* msg_hedeleg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hedeleg_;
  }
  if (msg_hedeleg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hedeleg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hedeleg, submessage_arena);
    }
    
  } else {
    
  }
  msg_hedeleg_ = msg_hedeleg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hedeleg)
}

// .MaskedCSR msg_hcounteren = 51;
inline bool ArchState::_internal_has_msg_hcounteren() const {
  return this != internal_default_instance() && msg_hcounteren_ != nullptr;
}
inline bool ArchState::has_msg_hcounteren() const {
  return _internal_has_msg_hcounteren();
}
inline void ArchState::clear_msg_hcounteren() {
  if (GetArenaNoVirtual() == nullptr && msg_hcounteren_ != nullptr) {
    delete msg_hcounteren_;
  }
  msg_hcounteren_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_hcounteren() const {
  const ::MaskedCSR* p = msg_hcounteren_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_hcounteren() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hcounteren)
  return _internal_msg_hcounteren();
}
inline ::MaskedCSR* ArchState::release_msg_hcounteren() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hcounteren)
  
  ::MaskedCSR* temp = msg_hcounteren_;
  msg_hcounteren_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_hcounteren() {
  
  if (msg_hcounteren_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_hcounteren_ = p;
  }
  return msg_hcounteren_;
}
inline ::MaskedCSR* ArchState::mutable_msg_hcounteren() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hcounteren)
  return _internal_mutable_msg_hcounteren();
}
inline void ArchState::set_allocated_msg_hcounteren(::MaskedCSR* msg_hcounteren) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hcounteren_;
  }
  if (msg_hcounteren) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hcounteren = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hcounteren, submessage_arena);
    }
    
  } else {
    
  }
  msg_hcounteren_ = msg_hcounteren;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hcounteren)
}

// .BasicCSR msg_htimedelta = 52;
inline bool ArchState::_internal_has_msg_htimedelta() const {
  return this != internal_default_instance() && msg_htimedelta_ != nullptr;
}
inline bool ArchState::has_msg_htimedelta() const {
  return _internal_has_msg_htimedelta();
}
inline void ArchState::clear_msg_htimedelta() {
  if (GetArenaNoVirtual() == nullptr && msg_htimedelta_ != nullptr) {
    delete msg_htimedelta_;
  }
  msg_htimedelta_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_htimedelta() const {
  const ::BasicCSR* p = msg_htimedelta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_htimedelta() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_htimedelta)
  return _internal_msg_htimedelta();
}
inline ::BasicCSR* ArchState::release_msg_htimedelta() {
  // @@protoc_insertion_point(field_release:ArchState.msg_htimedelta)
  
  ::BasicCSR* temp = msg_htimedelta_;
  msg_htimedelta_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_htimedelta() {
  
  if (msg_htimedelta_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_htimedelta_ = p;
  }
  return msg_htimedelta_;
}
inline ::BasicCSR* ArchState::mutable_msg_htimedelta() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_htimedelta)
  return _internal_mutable_msg_htimedelta();
}
inline void ArchState::set_allocated_msg_htimedelta(::BasicCSR* msg_htimedelta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_htimedelta_;
  }
  if (msg_htimedelta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_htimedelta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_htimedelta, submessage_arena);
    }
    
  } else {
    
  }
  msg_htimedelta_ = msg_htimedelta;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_htimedelta)
}

// .BasicCSR msg_htval = 53;
inline bool ArchState::_internal_has_msg_htval() const {
  return this != internal_default_instance() && msg_htval_ != nullptr;
}
inline bool ArchState::has_msg_htval() const {
  return _internal_has_msg_htval();
}
inline void ArchState::clear_msg_htval() {
  if (GetArenaNoVirtual() == nullptr && msg_htval_ != nullptr) {
    delete msg_htval_;
  }
  msg_htval_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_htval() const {
  const ::BasicCSR* p = msg_htval_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_htval() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_htval)
  return _internal_msg_htval();
}
inline ::BasicCSR* ArchState::release_msg_htval() {
  // @@protoc_insertion_point(field_release:ArchState.msg_htval)
  
  ::BasicCSR* temp = msg_htval_;
  msg_htval_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_htval() {
  
  if (msg_htval_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_htval_ = p;
  }
  return msg_htval_;
}
inline ::BasicCSR* ArchState::mutable_msg_htval() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_htval)
  return _internal_mutable_msg_htval();
}
inline void ArchState::set_allocated_msg_htval(::BasicCSR* msg_htval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_htval_;
  }
  if (msg_htval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_htval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_htval, submessage_arena);
    }
    
  } else {
    
  }
  msg_htval_ = msg_htval;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_htval)
}

// .BasicCSR msg_htinst = 54;
inline bool ArchState::_internal_has_msg_htinst() const {
  return this != internal_default_instance() && msg_htinst_ != nullptr;
}
inline bool ArchState::has_msg_htinst() const {
  return _internal_has_msg_htinst();
}
inline void ArchState::clear_msg_htinst() {
  if (GetArenaNoVirtual() == nullptr && msg_htinst_ != nullptr) {
    delete msg_htinst_;
  }
  msg_htinst_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_htinst() const {
  const ::BasicCSR* p = msg_htinst_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_htinst() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_htinst)
  return _internal_msg_htinst();
}
inline ::BasicCSR* ArchState::release_msg_htinst() {
  // @@protoc_insertion_point(field_release:ArchState.msg_htinst)
  
  ::BasicCSR* temp = msg_htinst_;
  msg_htinst_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_htinst() {
  
  if (msg_htinst_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_htinst_ = p;
  }
  return msg_htinst_;
}
inline ::BasicCSR* ArchState::mutable_msg_htinst() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_htinst)
  return _internal_mutable_msg_htinst();
}
inline void ArchState::set_allocated_msg_htinst(::BasicCSR* msg_htinst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_htinst_;
  }
  if (msg_htinst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_htinst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_htinst, submessage_arena);
    }
    
  } else {
    
  }
  msg_htinst_ = msg_htinst;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_htinst)
}

// .BasicCSR msg_hgatp = 55;
inline bool ArchState::_internal_has_msg_hgatp() const {
  return this != internal_default_instance() && msg_hgatp_ != nullptr;
}
inline bool ArchState::has_msg_hgatp() const {
  return _internal_has_msg_hgatp();
}
inline void ArchState::clear_msg_hgatp() {
  if (GetArenaNoVirtual() == nullptr && msg_hgatp_ != nullptr) {
    delete msg_hgatp_;
  }
  msg_hgatp_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_hgatp() const {
  const ::BasicCSR* p = msg_hgatp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_hgatp() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hgatp)
  return _internal_msg_hgatp();
}
inline ::BasicCSR* ArchState::release_msg_hgatp() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hgatp)
  
  ::BasicCSR* temp = msg_hgatp_;
  msg_hgatp_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_hgatp() {
  
  if (msg_hgatp_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_hgatp_ = p;
  }
  return msg_hgatp_;
}
inline ::BasicCSR* ArchState::mutable_msg_hgatp() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hgatp)
  return _internal_mutable_msg_hgatp();
}
inline void ArchState::set_allocated_msg_hgatp(::BasicCSR* msg_hgatp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hgatp_;
  }
  if (msg_hgatp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hgatp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hgatp, submessage_arena);
    }
    
  } else {
    
  }
  msg_hgatp_ = msg_hgatp;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hgatp)
}

// .SstatusCSR msg_sstatus = 56;
inline bool ArchState::_internal_has_msg_sstatus() const {
  return this != internal_default_instance() && msg_sstatus_ != nullptr;
}
inline bool ArchState::has_msg_sstatus() const {
  return _internal_has_msg_sstatus();
}
inline void ArchState::clear_msg_sstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_sstatus_ != nullptr) {
    delete msg_sstatus_;
  }
  msg_sstatus_ = nullptr;
}
inline const ::SstatusCSR& ArchState::_internal_msg_sstatus() const {
  const ::SstatusCSR* p = msg_sstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SstatusCSR*>(
      &::_SstatusCSR_default_instance_);
}
inline const ::SstatusCSR& ArchState::msg_sstatus() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_sstatus)
  return _internal_msg_sstatus();
}
inline ::SstatusCSR* ArchState::release_msg_sstatus() {
  // @@protoc_insertion_point(field_release:ArchState.msg_sstatus)
  
  ::SstatusCSR* temp = msg_sstatus_;
  msg_sstatus_ = nullptr;
  return temp;
}
inline ::SstatusCSR* ArchState::_internal_mutable_msg_sstatus() {
  
  if (msg_sstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::SstatusCSR>(GetArenaNoVirtual());
    msg_sstatus_ = p;
  }
  return msg_sstatus_;
}
inline ::SstatusCSR* ArchState::mutable_msg_sstatus() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_sstatus)
  return _internal_mutable_msg_sstatus();
}
inline void ArchState::set_allocated_msg_sstatus(::SstatusCSR* msg_sstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_sstatus_;
  }
  if (msg_sstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_sstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_sstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_sstatus_ = msg_sstatus;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_sstatus)
}

// .BasicCSR msg_dpc = 57;
inline bool ArchState::_internal_has_msg_dpc() const {
  return this != internal_default_instance() && msg_dpc_ != nullptr;
}
inline bool ArchState::has_msg_dpc() const {
  return _internal_has_msg_dpc();
}
inline void ArchState::clear_msg_dpc() {
  if (GetArenaNoVirtual() == nullptr && msg_dpc_ != nullptr) {
    delete msg_dpc_;
  }
  msg_dpc_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_dpc() const {
  const ::BasicCSR* p = msg_dpc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_dpc() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_dpc)
  return _internal_msg_dpc();
}
inline ::BasicCSR* ArchState::release_msg_dpc() {
  // @@protoc_insertion_point(field_release:ArchState.msg_dpc)
  
  ::BasicCSR* temp = msg_dpc_;
  msg_dpc_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_dpc() {
  
  if (msg_dpc_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_dpc_ = p;
  }
  return msg_dpc_;
}
inline ::BasicCSR* ArchState::mutable_msg_dpc() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_dpc)
  return _internal_mutable_msg_dpc();
}
inline void ArchState::set_allocated_msg_dpc(::BasicCSR* msg_dpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_dpc_;
  }
  if (msg_dpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_dpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_dpc, submessage_arena);
    }
    
  } else {
    
  }
  msg_dpc_ = msg_dpc;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_dpc)
}

// .BasicCSR msg_dscratch0 = 58;
inline bool ArchState::_internal_has_msg_dscratch0() const {
  return this != internal_default_instance() && msg_dscratch0_ != nullptr;
}
inline bool ArchState::has_msg_dscratch0() const {
  return _internal_has_msg_dscratch0();
}
inline void ArchState::clear_msg_dscratch0() {
  if (GetArenaNoVirtual() == nullptr && msg_dscratch0_ != nullptr) {
    delete msg_dscratch0_;
  }
  msg_dscratch0_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_dscratch0() const {
  const ::BasicCSR* p = msg_dscratch0_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_dscratch0() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_dscratch0)
  return _internal_msg_dscratch0();
}
inline ::BasicCSR* ArchState::release_msg_dscratch0() {
  // @@protoc_insertion_point(field_release:ArchState.msg_dscratch0)
  
  ::BasicCSR* temp = msg_dscratch0_;
  msg_dscratch0_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_dscratch0() {
  
  if (msg_dscratch0_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_dscratch0_ = p;
  }
  return msg_dscratch0_;
}
inline ::BasicCSR* ArchState::mutable_msg_dscratch0() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_dscratch0)
  return _internal_mutable_msg_dscratch0();
}
inline void ArchState::set_allocated_msg_dscratch0(::BasicCSR* msg_dscratch0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_dscratch0_;
  }
  if (msg_dscratch0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_dscratch0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_dscratch0, submessage_arena);
    }
    
  } else {
    
  }
  msg_dscratch0_ = msg_dscratch0;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_dscratch0)
}

// .BasicCSR msg_dscratch1 = 59;
inline bool ArchState::_internal_has_msg_dscratch1() const {
  return this != internal_default_instance() && msg_dscratch1_ != nullptr;
}
inline bool ArchState::has_msg_dscratch1() const {
  return _internal_has_msg_dscratch1();
}
inline void ArchState::clear_msg_dscratch1() {
  if (GetArenaNoVirtual() == nullptr && msg_dscratch1_ != nullptr) {
    delete msg_dscratch1_;
  }
  msg_dscratch1_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_dscratch1() const {
  const ::BasicCSR* p = msg_dscratch1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_dscratch1() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_dscratch1)
  return _internal_msg_dscratch1();
}
inline ::BasicCSR* ArchState::release_msg_dscratch1() {
  // @@protoc_insertion_point(field_release:ArchState.msg_dscratch1)
  
  ::BasicCSR* temp = msg_dscratch1_;
  msg_dscratch1_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_dscratch1() {
  
  if (msg_dscratch1_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_dscratch1_ = p;
  }
  return msg_dscratch1_;
}
inline ::BasicCSR* ArchState::mutable_msg_dscratch1() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_dscratch1)
  return _internal_mutable_msg_dscratch1();
}
inline void ArchState::set_allocated_msg_dscratch1(::BasicCSR* msg_dscratch1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_dscratch1_;
  }
  if (msg_dscratch1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_dscratch1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_dscratch1, submessage_arena);
    }
    
  } else {
    
  }
  msg_dscratch1_ = msg_dscratch1;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_dscratch1)
}

// .DCSR msg_dcsr = 60;
inline bool ArchState::_internal_has_msg_dcsr() const {
  return this != internal_default_instance() && msg_dcsr_ != nullptr;
}
inline bool ArchState::has_msg_dcsr() const {
  return _internal_has_msg_dcsr();
}
inline void ArchState::clear_msg_dcsr() {
  if (GetArenaNoVirtual() == nullptr && msg_dcsr_ != nullptr) {
    delete msg_dcsr_;
  }
  msg_dcsr_ = nullptr;
}
inline const ::DCSR& ArchState::_internal_msg_dcsr() const {
  const ::DCSR* p = msg_dcsr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DCSR*>(
      &::_DCSR_default_instance_);
}
inline const ::DCSR& ArchState::msg_dcsr() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_dcsr)
  return _internal_msg_dcsr();
}
inline ::DCSR* ArchState::release_msg_dcsr() {
  // @@protoc_insertion_point(field_release:ArchState.msg_dcsr)
  
  ::DCSR* temp = msg_dcsr_;
  msg_dcsr_ = nullptr;
  return temp;
}
inline ::DCSR* ArchState::_internal_mutable_msg_dcsr() {
  
  if (msg_dcsr_ == nullptr) {
    auto* p = CreateMaybeMessage<::DCSR>(GetArenaNoVirtual());
    msg_dcsr_ = p;
  }
  return msg_dcsr_;
}
inline ::DCSR* ArchState::mutable_msg_dcsr() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_dcsr)
  return _internal_mutable_msg_dcsr();
}
inline void ArchState::set_allocated_msg_dcsr(::DCSR* msg_dcsr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_dcsr_;
  }
  if (msg_dcsr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_dcsr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_dcsr, submessage_arena);
    }
    
  } else {
    
  }
  msg_dcsr_ = msg_dcsr;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_dcsr)
}

// .BasicCSR msg_tselect = 61;
inline bool ArchState::_internal_has_msg_tselect() const {
  return this != internal_default_instance() && msg_tselect_ != nullptr;
}
inline bool ArchState::has_msg_tselect() const {
  return _internal_has_msg_tselect();
}
inline void ArchState::clear_msg_tselect() {
  if (GetArenaNoVirtual() == nullptr && msg_tselect_ != nullptr) {
    delete msg_tselect_;
  }
  msg_tselect_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_tselect() const {
  const ::BasicCSR* p = msg_tselect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_tselect() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_tselect)
  return _internal_msg_tselect();
}
inline ::BasicCSR* ArchState::release_msg_tselect() {
  // @@protoc_insertion_point(field_release:ArchState.msg_tselect)
  
  ::BasicCSR* temp = msg_tselect_;
  msg_tselect_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_tselect() {
  
  if (msg_tselect_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_tselect_ = p;
  }
  return msg_tselect_;
}
inline ::BasicCSR* ArchState::mutable_msg_tselect() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_tselect)
  return _internal_mutable_msg_tselect();
}
inline void ArchState::set_allocated_msg_tselect(::BasicCSR* msg_tselect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_tselect_;
  }
  if (msg_tselect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_tselect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_tselect, submessage_arena);
    }
    
  } else {
    
  }
  msg_tselect_ = msg_tselect;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_tselect)
}

// .MaskedCSR msg_scontext = 66;
inline bool ArchState::_internal_has_msg_scontext() const {
  return this != internal_default_instance() && msg_scontext_ != nullptr;
}
inline bool ArchState::has_msg_scontext() const {
  return _internal_has_msg_scontext();
}
inline void ArchState::clear_msg_scontext() {
  if (GetArenaNoVirtual() == nullptr && msg_scontext_ != nullptr) {
    delete msg_scontext_;
  }
  msg_scontext_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_scontext() const {
  const ::MaskedCSR* p = msg_scontext_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_scontext() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_scontext)
  return _internal_msg_scontext();
}
inline ::MaskedCSR* ArchState::release_msg_scontext() {
  // @@protoc_insertion_point(field_release:ArchState.msg_scontext)
  
  ::MaskedCSR* temp = msg_scontext_;
  msg_scontext_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_scontext() {
  
  if (msg_scontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_scontext_ = p;
  }
  return msg_scontext_;
}
inline ::MaskedCSR* ArchState::mutable_msg_scontext() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_scontext)
  return _internal_mutable_msg_scontext();
}
inline void ArchState::set_allocated_msg_scontext(::MaskedCSR* msg_scontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_scontext_;
  }
  if (msg_scontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_scontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_scontext, submessage_arena);
    }
    
  } else {
    
  }
  msg_scontext_ = msg_scontext;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_scontext)
}

// .MaskedCSR msg_hcontext = 67;
inline bool ArchState::_internal_has_msg_hcontext() const {
  return this != internal_default_instance() && msg_hcontext_ != nullptr;
}
inline bool ArchState::has_msg_hcontext() const {
  return _internal_has_msg_hcontext();
}
inline void ArchState::clear_msg_hcontext() {
  if (GetArenaNoVirtual() == nullptr && msg_hcontext_ != nullptr) {
    delete msg_hcontext_;
  }
  msg_hcontext_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_hcontext() const {
  const ::MaskedCSR* p = msg_hcontext_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_hcontext() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hcontext)
  return _internal_msg_hcontext();
}
inline ::MaskedCSR* ArchState::release_msg_hcontext() {
  // @@protoc_insertion_point(field_release:ArchState.msg_hcontext)
  
  ::MaskedCSR* temp = msg_hcontext_;
  msg_hcontext_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_hcontext() {
  
  if (msg_hcontext_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_hcontext_ = p;
  }
  return msg_hcontext_;
}
inline ::MaskedCSR* ArchState::mutable_msg_hcontext() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hcontext)
  return _internal_mutable_msg_hcontext();
}
inline void ArchState::set_allocated_msg_hcontext(::MaskedCSR* msg_hcontext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_hcontext_;
  }
  if (msg_hcontext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_hcontext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_hcontext, submessage_arena);
    }
    
  } else {
    
  }
  msg_hcontext_ = msg_hcontext;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_hcontext)
}

// .BasicCSR msg_mseccfg = 69;
inline bool ArchState::_internal_has_msg_mseccfg() const {
  return this != internal_default_instance() && msg_mseccfg_ != nullptr;
}
inline bool ArchState::has_msg_mseccfg() const {
  return _internal_has_msg_mseccfg();
}
inline void ArchState::clear_msg_mseccfg() {
  if (GetArenaNoVirtual() == nullptr && msg_mseccfg_ != nullptr) {
    delete msg_mseccfg_;
  }
  msg_mseccfg_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mseccfg() const {
  const ::BasicCSR* p = msg_mseccfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mseccfg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mseccfg)
  return _internal_msg_mseccfg();
}
inline ::BasicCSR* ArchState::release_msg_mseccfg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mseccfg)
  
  ::BasicCSR* temp = msg_mseccfg_;
  msg_mseccfg_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mseccfg() {
  
  if (msg_mseccfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mseccfg_ = p;
  }
  return msg_mseccfg_;
}
inline ::BasicCSR* ArchState::mutable_msg_mseccfg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mseccfg)
  return _internal_mutable_msg_mseccfg();
}
inline void ArchState::set_allocated_msg_mseccfg(::BasicCSR* msg_mseccfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mseccfg_;
  }
  if (msg_mseccfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mseccfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mseccfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_mseccfg_ = msg_mseccfg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mseccfg)
}

// repeated .PmpCSR msg_pmpaddr = 70;
inline int ArchState::_internal_msg_pmpaddr_size() const {
  return msg_pmpaddr_.size();
}
inline int ArchState::msg_pmpaddr_size() const {
  return _internal_msg_pmpaddr_size();
}
inline void ArchState::clear_msg_pmpaddr() {
  msg_pmpaddr_.Clear();
}
inline ::PmpCSR* ArchState::mutable_msg_pmpaddr(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_pmpaddr)
  return msg_pmpaddr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PmpCSR >*
ArchState::mutable_msg_pmpaddr() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_pmpaddr)
  return &msg_pmpaddr_;
}
inline const ::PmpCSR& ArchState::_internal_msg_pmpaddr(int index) const {
  return msg_pmpaddr_.Get(index);
}
inline const ::PmpCSR& ArchState::msg_pmpaddr(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_pmpaddr)
  return _internal_msg_pmpaddr(index);
}
inline ::PmpCSR* ArchState::_internal_add_msg_pmpaddr() {
  return msg_pmpaddr_.Add();
}
inline ::PmpCSR* ArchState::add_msg_pmpaddr() {
  // @@protoc_insertion_point(field_add:ArchState.msg_pmpaddr)
  return _internal_add_msg_pmpaddr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PmpCSR >&
ArchState::msg_pmpaddr() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_pmpaddr)
  return msg_pmpaddr_;
}

// .MaskedCSR msg_fflags = 72;
inline bool ArchState::_internal_has_msg_fflags() const {
  return this != internal_default_instance() && msg_fflags_ != nullptr;
}
inline bool ArchState::has_msg_fflags() const {
  return _internal_has_msg_fflags();
}
inline void ArchState::clear_msg_fflags() {
  if (GetArenaNoVirtual() == nullptr && msg_fflags_ != nullptr) {
    delete msg_fflags_;
  }
  msg_fflags_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_fflags() const {
  const ::MaskedCSR* p = msg_fflags_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_fflags() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_fflags)
  return _internal_msg_fflags();
}
inline ::MaskedCSR* ArchState::release_msg_fflags() {
  // @@protoc_insertion_point(field_release:ArchState.msg_fflags)
  
  ::MaskedCSR* temp = msg_fflags_;
  msg_fflags_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_fflags() {
  
  if (msg_fflags_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_fflags_ = p;
  }
  return msg_fflags_;
}
inline ::MaskedCSR* ArchState::mutable_msg_fflags() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_fflags)
  return _internal_mutable_msg_fflags();
}
inline void ArchState::set_allocated_msg_fflags(::MaskedCSR* msg_fflags) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_fflags_;
  }
  if (msg_fflags) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_fflags = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_fflags, submessage_arena);
    }
    
  } else {
    
  }
  msg_fflags_ = msg_fflags;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_fflags)
}

// .MaskedCSR msg_frm = 73;
inline bool ArchState::_internal_has_msg_frm() const {
  return this != internal_default_instance() && msg_frm_ != nullptr;
}
inline bool ArchState::has_msg_frm() const {
  return _internal_has_msg_frm();
}
inline void ArchState::clear_msg_frm() {
  if (GetArenaNoVirtual() == nullptr && msg_frm_ != nullptr) {
    delete msg_frm_;
  }
  msg_frm_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_frm() const {
  const ::MaskedCSR* p = msg_frm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_frm() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_frm)
  return _internal_msg_frm();
}
inline ::MaskedCSR* ArchState::release_msg_frm() {
  // @@protoc_insertion_point(field_release:ArchState.msg_frm)
  
  ::MaskedCSR* temp = msg_frm_;
  msg_frm_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_frm() {
  
  if (msg_frm_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_frm_ = p;
  }
  return msg_frm_;
}
inline ::MaskedCSR* ArchState::mutable_msg_frm() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_frm)
  return _internal_mutable_msg_frm();
}
inline void ArchState::set_allocated_msg_frm(::MaskedCSR* msg_frm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_frm_;
  }
  if (msg_frm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_frm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_frm, submessage_arena);
    }
    
  } else {
    
  }
  msg_frm_ = msg_frm;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_frm)
}

// .MaskedCSR msg_senvcfg = 82;
inline bool ArchState::_internal_has_msg_senvcfg() const {
  return this != internal_default_instance() && msg_senvcfg_ != nullptr;
}
inline bool ArchState::has_msg_senvcfg() const {
  return _internal_has_msg_senvcfg();
}
inline void ArchState::clear_msg_senvcfg() {
  if (GetArenaNoVirtual() == nullptr && msg_senvcfg_ != nullptr) {
    delete msg_senvcfg_;
  }
  msg_senvcfg_ = nullptr;
}
inline const ::MaskedCSR& ArchState::_internal_msg_senvcfg() const {
  const ::MaskedCSR* p = msg_senvcfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MaskedCSR*>(
      &::_MaskedCSR_default_instance_);
}
inline const ::MaskedCSR& ArchState::msg_senvcfg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_senvcfg)
  return _internal_msg_senvcfg();
}
inline ::MaskedCSR* ArchState::release_msg_senvcfg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_senvcfg)
  
  ::MaskedCSR* temp = msg_senvcfg_;
  msg_senvcfg_ = nullptr;
  return temp;
}
inline ::MaskedCSR* ArchState::_internal_mutable_msg_senvcfg() {
  
  if (msg_senvcfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::MaskedCSR>(GetArenaNoVirtual());
    msg_senvcfg_ = p;
  }
  return msg_senvcfg_;
}
inline ::MaskedCSR* ArchState::mutable_msg_senvcfg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_senvcfg)
  return _internal_mutable_msg_senvcfg();
}
inline void ArchState::set_allocated_msg_senvcfg(::MaskedCSR* msg_senvcfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_senvcfg_;
  }
  if (msg_senvcfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_senvcfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_senvcfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_senvcfg_ = msg_senvcfg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_senvcfg)
}

// .HenvcfgCSR msg_henvcfg = 83;
inline bool ArchState::_internal_has_msg_henvcfg() const {
  return this != internal_default_instance() && msg_henvcfg_ != nullptr;
}
inline bool ArchState::has_msg_henvcfg() const {
  return _internal_has_msg_henvcfg();
}
inline void ArchState::clear_msg_henvcfg() {
  if (GetArenaNoVirtual() == nullptr && msg_henvcfg_ != nullptr) {
    delete msg_henvcfg_;
  }
  msg_henvcfg_ = nullptr;
}
inline const ::HenvcfgCSR& ArchState::_internal_msg_henvcfg() const {
  const ::HenvcfgCSR* p = msg_henvcfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::HenvcfgCSR*>(
      &::_HenvcfgCSR_default_instance_);
}
inline const ::HenvcfgCSR& ArchState::msg_henvcfg() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_henvcfg)
  return _internal_msg_henvcfg();
}
inline ::HenvcfgCSR* ArchState::release_msg_henvcfg() {
  // @@protoc_insertion_point(field_release:ArchState.msg_henvcfg)
  
  ::HenvcfgCSR* temp = msg_henvcfg_;
  msg_henvcfg_ = nullptr;
  return temp;
}
inline ::HenvcfgCSR* ArchState::_internal_mutable_msg_henvcfg() {
  
  if (msg_henvcfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::HenvcfgCSR>(GetArenaNoVirtual());
    msg_henvcfg_ = p;
  }
  return msg_henvcfg_;
}
inline ::HenvcfgCSR* ArchState::mutable_msg_henvcfg() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_henvcfg)
  return _internal_mutable_msg_henvcfg();
}
inline void ArchState::set_allocated_msg_henvcfg(::HenvcfgCSR* msg_henvcfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_henvcfg_;
  }
  if (msg_henvcfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_henvcfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_henvcfg, submessage_arena);
    }
    
  } else {
    
  }
  msg_henvcfg_ = msg_henvcfg;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_henvcfg)
}

// repeated .MaskedCSR msg_mstateen = 84;
inline int ArchState::_internal_msg_mstateen_size() const {
  return msg_mstateen_.size();
}
inline int ArchState::msg_mstateen_size() const {
  return _internal_msg_mstateen_size();
}
inline void ArchState::clear_msg_mstateen() {
  msg_mstateen_.Clear();
}
inline ::MaskedCSR* ArchState::mutable_msg_mstateen(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mstateen)
  return msg_mstateen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MaskedCSR >*
ArchState::mutable_msg_mstateen() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_mstateen)
  return &msg_mstateen_;
}
inline const ::MaskedCSR& ArchState::_internal_msg_mstateen(int index) const {
  return msg_mstateen_.Get(index);
}
inline const ::MaskedCSR& ArchState::msg_mstateen(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mstateen)
  return _internal_msg_mstateen(index);
}
inline ::MaskedCSR* ArchState::_internal_add_msg_mstateen() {
  return msg_mstateen_.Add();
}
inline ::MaskedCSR* ArchState::add_msg_mstateen() {
  // @@protoc_insertion_point(field_add:ArchState.msg_mstateen)
  return _internal_add_msg_mstateen();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MaskedCSR >&
ArchState::msg_mstateen() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_mstateen)
  return msg_mstateen_;
}

// repeated .HstateenCSR msg_sstateen = 85;
inline int ArchState::_internal_msg_sstateen_size() const {
  return msg_sstateen_.size();
}
inline int ArchState::msg_sstateen_size() const {
  return _internal_msg_sstateen_size();
}
inline void ArchState::clear_msg_sstateen() {
  msg_sstateen_.Clear();
}
inline ::HstateenCSR* ArchState::mutable_msg_sstateen(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_sstateen)
  return msg_sstateen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >*
ArchState::mutable_msg_sstateen() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_sstateen)
  return &msg_sstateen_;
}
inline const ::HstateenCSR& ArchState::_internal_msg_sstateen(int index) const {
  return msg_sstateen_.Get(index);
}
inline const ::HstateenCSR& ArchState::msg_sstateen(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_sstateen)
  return _internal_msg_sstateen(index);
}
inline ::HstateenCSR* ArchState::_internal_add_msg_sstateen() {
  return msg_sstateen_.Add();
}
inline ::HstateenCSR* ArchState::add_msg_sstateen() {
  // @@protoc_insertion_point(field_add:ArchState.msg_sstateen)
  return _internal_add_msg_sstateen();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >&
ArchState::msg_sstateen() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_sstateen)
  return msg_sstateen_;
}

// repeated .HstateenCSR msg_hstateen = 86;
inline int ArchState::_internal_msg_hstateen_size() const {
  return msg_hstateen_.size();
}
inline int ArchState::msg_hstateen_size() const {
  return _internal_msg_hstateen_size();
}
inline void ArchState::clear_msg_hstateen() {
  msg_hstateen_.Clear();
}
inline ::HstateenCSR* ArchState::mutable_msg_hstateen(int index) {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_hstateen)
  return msg_hstateen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >*
ArchState::mutable_msg_hstateen() {
  // @@protoc_insertion_point(field_mutable_list:ArchState.msg_hstateen)
  return &msg_hstateen_;
}
inline const ::HstateenCSR& ArchState::_internal_msg_hstateen(int index) const {
  return msg_hstateen_.Get(index);
}
inline const ::HstateenCSR& ArchState::msg_hstateen(int index) const {
  // @@protoc_insertion_point(field_get:ArchState.msg_hstateen)
  return _internal_msg_hstateen(index);
}
inline ::HstateenCSR* ArchState::_internal_add_msg_hstateen() {
  return msg_hstateen_.Add();
}
inline ::HstateenCSR* ArchState::add_msg_hstateen() {
  // @@protoc_insertion_point(field_add:ArchState.msg_hstateen)
  return _internal_add_msg_hstateen();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HstateenCSR >&
ArchState::msg_hstateen() const {
  // @@protoc_insertion_point(field_list:ArchState.msg_hstateen)
  return msg_hstateen_;
}

// .BasicCSR msg_mnscratch = 87;
inline bool ArchState::_internal_has_msg_mnscratch() const {
  return this != internal_default_instance() && msg_mnscratch_ != nullptr;
}
inline bool ArchState::has_msg_mnscratch() const {
  return _internal_has_msg_mnscratch();
}
inline void ArchState::clear_msg_mnscratch() {
  if (GetArenaNoVirtual() == nullptr && msg_mnscratch_ != nullptr) {
    delete msg_mnscratch_;
  }
  msg_mnscratch_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mnscratch() const {
  const ::BasicCSR* p = msg_mnscratch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mnscratch() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mnscratch)
  return _internal_msg_mnscratch();
}
inline ::BasicCSR* ArchState::release_msg_mnscratch() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mnscratch)
  
  ::BasicCSR* temp = msg_mnscratch_;
  msg_mnscratch_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mnscratch() {
  
  if (msg_mnscratch_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mnscratch_ = p;
  }
  return msg_mnscratch_;
}
inline ::BasicCSR* ArchState::mutable_msg_mnscratch() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mnscratch)
  return _internal_mutable_msg_mnscratch();
}
inline void ArchState::set_allocated_msg_mnscratch(::BasicCSR* msg_mnscratch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mnscratch_;
  }
  if (msg_mnscratch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mnscratch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mnscratch, submessage_arena);
    }
    
  } else {
    
  }
  msg_mnscratch_ = msg_mnscratch;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mnscratch)
}

// .BasicCSR msg_mnepc = 88;
inline bool ArchState::_internal_has_msg_mnepc() const {
  return this != internal_default_instance() && msg_mnepc_ != nullptr;
}
inline bool ArchState::has_msg_mnepc() const {
  return _internal_has_msg_mnepc();
}
inline void ArchState::clear_msg_mnepc() {
  if (GetArenaNoVirtual() == nullptr && msg_mnepc_ != nullptr) {
    delete msg_mnepc_;
  }
  msg_mnepc_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mnepc() const {
  const ::BasicCSR* p = msg_mnepc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mnepc() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mnepc)
  return _internal_msg_mnepc();
}
inline ::BasicCSR* ArchState::release_msg_mnepc() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mnepc)
  
  ::BasicCSR* temp = msg_mnepc_;
  msg_mnepc_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mnepc() {
  
  if (msg_mnepc_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mnepc_ = p;
  }
  return msg_mnepc_;
}
inline ::BasicCSR* ArchState::mutable_msg_mnepc() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mnepc)
  return _internal_mutable_msg_mnepc();
}
inline void ArchState::set_allocated_msg_mnepc(::BasicCSR* msg_mnepc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mnepc_;
  }
  if (msg_mnepc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mnepc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mnepc, submessage_arena);
    }
    
  } else {
    
  }
  msg_mnepc_ = msg_mnepc;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mnepc)
}

// .BasicCSR msg_mnstatus = 90;
inline bool ArchState::_internal_has_msg_mnstatus() const {
  return this != internal_default_instance() && msg_mnstatus_ != nullptr;
}
inline bool ArchState::has_msg_mnstatus() const {
  return _internal_has_msg_mnstatus();
}
inline void ArchState::clear_msg_mnstatus() {
  if (GetArenaNoVirtual() == nullptr && msg_mnstatus_ != nullptr) {
    delete msg_mnstatus_;
  }
  msg_mnstatus_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_mnstatus() const {
  const ::BasicCSR* p = msg_mnstatus_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_mnstatus() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_mnstatus)
  return _internal_msg_mnstatus();
}
inline ::BasicCSR* ArchState::release_msg_mnstatus() {
  // @@protoc_insertion_point(field_release:ArchState.msg_mnstatus)
  
  ::BasicCSR* temp = msg_mnstatus_;
  msg_mnstatus_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_mnstatus() {
  
  if (msg_mnstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_mnstatus_ = p;
  }
  return msg_mnstatus_;
}
inline ::BasicCSR* ArchState::mutable_msg_mnstatus() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_mnstatus)
  return _internal_mutable_msg_mnstatus();
}
inline void ArchState::set_allocated_msg_mnstatus(::BasicCSR* msg_mnstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_mnstatus_;
  }
  if (msg_mnstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_mnstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_mnstatus, submessage_arena);
    }
    
  } else {
    
  }
  msg_mnstatus_ = msg_mnstatus;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_mnstatus)
}

// .StimecmpCSR msg_stimecmp = 91;
inline bool ArchState::_internal_has_msg_stimecmp() const {
  return this != internal_default_instance() && msg_stimecmp_ != nullptr;
}
inline bool ArchState::has_msg_stimecmp() const {
  return _internal_has_msg_stimecmp();
}
inline void ArchState::clear_msg_stimecmp() {
  if (GetArenaNoVirtual() == nullptr && msg_stimecmp_ != nullptr) {
    delete msg_stimecmp_;
  }
  msg_stimecmp_ = nullptr;
}
inline const ::StimecmpCSR& ArchState::_internal_msg_stimecmp() const {
  const ::StimecmpCSR* p = msg_stimecmp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::StimecmpCSR*>(
      &::_StimecmpCSR_default_instance_);
}
inline const ::StimecmpCSR& ArchState::msg_stimecmp() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_stimecmp)
  return _internal_msg_stimecmp();
}
inline ::StimecmpCSR* ArchState::release_msg_stimecmp() {
  // @@protoc_insertion_point(field_release:ArchState.msg_stimecmp)
  
  ::StimecmpCSR* temp = msg_stimecmp_;
  msg_stimecmp_ = nullptr;
  return temp;
}
inline ::StimecmpCSR* ArchState::_internal_mutable_msg_stimecmp() {
  
  if (msg_stimecmp_ == nullptr) {
    auto* p = CreateMaybeMessage<::StimecmpCSR>(GetArenaNoVirtual());
    msg_stimecmp_ = p;
  }
  return msg_stimecmp_;
}
inline ::StimecmpCSR* ArchState::mutable_msg_stimecmp() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_stimecmp)
  return _internal_mutable_msg_stimecmp();
}
inline void ArchState::set_allocated_msg_stimecmp(::StimecmpCSR* msg_stimecmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_stimecmp_;
  }
  if (msg_stimecmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_stimecmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_stimecmp, submessage_arena);
    }
    
  } else {
    
  }
  msg_stimecmp_ = msg_stimecmp;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_stimecmp)
}

// .StimecmpCSR msg_vstimecmp = 92;
inline bool ArchState::_internal_has_msg_vstimecmp() const {
  return this != internal_default_instance() && msg_vstimecmp_ != nullptr;
}
inline bool ArchState::has_msg_vstimecmp() const {
  return _internal_has_msg_vstimecmp();
}
inline void ArchState::clear_msg_vstimecmp() {
  if (GetArenaNoVirtual() == nullptr && msg_vstimecmp_ != nullptr) {
    delete msg_vstimecmp_;
  }
  msg_vstimecmp_ = nullptr;
}
inline const ::StimecmpCSR& ArchState::_internal_msg_vstimecmp() const {
  const ::StimecmpCSR* p = msg_vstimecmp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::StimecmpCSR*>(
      &::_StimecmpCSR_default_instance_);
}
inline const ::StimecmpCSR& ArchState::msg_vstimecmp() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_vstimecmp)
  return _internal_msg_vstimecmp();
}
inline ::StimecmpCSR* ArchState::release_msg_vstimecmp() {
  // @@protoc_insertion_point(field_release:ArchState.msg_vstimecmp)
  
  ::StimecmpCSR* temp = msg_vstimecmp_;
  msg_vstimecmp_ = nullptr;
  return temp;
}
inline ::StimecmpCSR* ArchState::_internal_mutable_msg_vstimecmp() {
  
  if (msg_vstimecmp_ == nullptr) {
    auto* p = CreateMaybeMessage<::StimecmpCSR>(GetArenaNoVirtual());
    msg_vstimecmp_ = p;
  }
  return msg_vstimecmp_;
}
inline ::StimecmpCSR* ArchState::mutable_msg_vstimecmp() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_vstimecmp)
  return _internal_mutable_msg_vstimecmp();
}
inline void ArchState::set_allocated_msg_vstimecmp(::StimecmpCSR* msg_vstimecmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_vstimecmp_;
  }
  if (msg_vstimecmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_vstimecmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_vstimecmp, submessage_arena);
    }
    
  } else {
    
  }
  msg_vstimecmp_ = msg_vstimecmp;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_vstimecmp)
}

// .BasicCSR msg_jvt = 93;
inline bool ArchState::_internal_has_msg_jvt() const {
  return this != internal_default_instance() && msg_jvt_ != nullptr;
}
inline bool ArchState::has_msg_jvt() const {
  return _internal_has_msg_jvt();
}
inline void ArchState::clear_msg_jvt() {
  if (GetArenaNoVirtual() == nullptr && msg_jvt_ != nullptr) {
    delete msg_jvt_;
  }
  msg_jvt_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_jvt() const {
  const ::BasicCSR* p = msg_jvt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_jvt() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_jvt)
  return _internal_msg_jvt();
}
inline ::BasicCSR* ArchState::release_msg_jvt() {
  // @@protoc_insertion_point(field_release:ArchState.msg_jvt)
  
  ::BasicCSR* temp = msg_jvt_;
  msg_jvt_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_jvt() {
  
  if (msg_jvt_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_jvt_ = p;
  }
  return msg_jvt_;
}
inline ::BasicCSR* ArchState::mutable_msg_jvt() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_jvt)
  return _internal_mutable_msg_jvt();
}
inline void ArchState::set_allocated_msg_jvt(::BasicCSR* msg_jvt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_jvt_;
  }
  if (msg_jvt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_jvt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_jvt, submessage_arena);
    }
    
  } else {
    
  }
  msg_jvt_ = msg_jvt;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_jvt)
}

// .BasicCSR msg_miselect = 94;
inline bool ArchState::_internal_has_msg_miselect() const {
  return this != internal_default_instance() && msg_miselect_ != nullptr;
}
inline bool ArchState::has_msg_miselect() const {
  return _internal_has_msg_miselect();
}
inline void ArchState::clear_msg_miselect() {
  if (GetArenaNoVirtual() == nullptr && msg_miselect_ != nullptr) {
    delete msg_miselect_;
  }
  msg_miselect_ = nullptr;
}
inline const ::BasicCSR& ArchState::_internal_msg_miselect() const {
  const ::BasicCSR* p = msg_miselect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BasicCSR*>(
      &::_BasicCSR_default_instance_);
}
inline const ::BasicCSR& ArchState::msg_miselect() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_miselect)
  return _internal_msg_miselect();
}
inline ::BasicCSR* ArchState::release_msg_miselect() {
  // @@protoc_insertion_point(field_release:ArchState.msg_miselect)
  
  ::BasicCSR* temp = msg_miselect_;
  msg_miselect_ = nullptr;
  return temp;
}
inline ::BasicCSR* ArchState::_internal_mutable_msg_miselect() {
  
  if (msg_miselect_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicCSR>(GetArenaNoVirtual());
    msg_miselect_ = p;
  }
  return msg_miselect_;
}
inline ::BasicCSR* ArchState::mutable_msg_miselect() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_miselect)
  return _internal_mutable_msg_miselect();
}
inline void ArchState::set_allocated_msg_miselect(::BasicCSR* msg_miselect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_miselect_;
  }
  if (msg_miselect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_miselect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_miselect, submessage_arena);
    }
    
  } else {
    
  }
  msg_miselect_ = msg_miselect;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_miselect)
}

// .VirtBasicCSR msg_siselect = 101;
inline bool ArchState::_internal_has_msg_siselect() const {
  return this != internal_default_instance() && msg_siselect_ != nullptr;
}
inline bool ArchState::has_msg_siselect() const {
  return _internal_has_msg_siselect();
}
inline void ArchState::clear_msg_siselect() {
  if (GetArenaNoVirtual() == nullptr && msg_siselect_ != nullptr) {
    delete msg_siselect_;
  }
  msg_siselect_ = nullptr;
}
inline const ::VirtBasicCSR& ArchState::_internal_msg_siselect() const {
  const ::VirtBasicCSR* p = msg_siselect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VirtBasicCSR*>(
      &::_VirtBasicCSR_default_instance_);
}
inline const ::VirtBasicCSR& ArchState::msg_siselect() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_siselect)
  return _internal_msg_siselect();
}
inline ::VirtBasicCSR* ArchState::release_msg_siselect() {
  // @@protoc_insertion_point(field_release:ArchState.msg_siselect)
  
  ::VirtBasicCSR* temp = msg_siselect_;
  msg_siselect_ = nullptr;
  return temp;
}
inline ::VirtBasicCSR* ArchState::_internal_mutable_msg_siselect() {
  
  if (msg_siselect_ == nullptr) {
    auto* p = CreateMaybeMessage<::VirtBasicCSR>(GetArenaNoVirtual());
    msg_siselect_ = p;
  }
  return msg_siselect_;
}
inline ::VirtBasicCSR* ArchState::mutable_msg_siselect() {
  // @@protoc_insertion_point(field_mutable:ArchState.msg_siselect)
  return _internal_mutable_msg_siselect();
}
inline void ArchState::set_allocated_msg_siselect(::VirtBasicCSR* msg_siselect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_siselect_;
  }
  if (msg_siselect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg_siselect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_siselect, submessage_arena);
    }
    
  } else {
    
  }
  msg_siselect_ = msg_siselect;
  // @@protoc_insertion_point(field_set_allocated:ArchState.msg_siselect)
}

// bool msg_debug_mode = 116;
inline void ArchState::clear_msg_debug_mode() {
  msg_debug_mode_ = false;
}
inline bool ArchState::_internal_msg_debug_mode() const {
  return msg_debug_mode_;
}
inline bool ArchState::msg_debug_mode() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_debug_mode)
  return _internal_msg_debug_mode();
}
inline void ArchState::_internal_set_msg_debug_mode(bool value) {
  
  msg_debug_mode_ = value;
}
inline void ArchState::set_msg_debug_mode(bool value) {
  _internal_set_msg_debug_mode(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_debug_mode)
}

// bool msg_serialized = 117;
inline void ArchState::clear_msg_serialized() {
  msg_serialized_ = false;
}
inline bool ArchState::_internal_msg_serialized() const {
  return msg_serialized_;
}
inline bool ArchState::msg_serialized() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_serialized)
  return _internal_msg_serialized();
}
inline void ArchState::_internal_set_msg_serialized(bool value) {
  
  msg_serialized_ = value;
}
inline void ArchState::set_msg_serialized(bool value) {
  _internal_set_msg_serialized(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_serialized)
}

// uint32 msg_single_step = 118;
inline void ArchState::clear_msg_single_step() {
  msg_single_step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArchState::_internal_msg_single_step() const {
  return msg_single_step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ArchState::msg_single_step() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_single_step)
  return _internal_msg_single_step();
}
inline void ArchState::_internal_set_msg_single_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_single_step_ = value;
}
inline void ArchState::set_msg_single_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_single_step(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_single_step)
}

// uint64 msg_last_inst_priv = 119;
inline void ArchState::clear_msg_last_inst_priv() {
  msg_last_inst_priv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::_internal_msg_last_inst_priv() const {
  return msg_last_inst_priv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ArchState::msg_last_inst_priv() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_last_inst_priv)
  return _internal_msg_last_inst_priv();
}
inline void ArchState::_internal_set_msg_last_inst_priv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_last_inst_priv_ = value;
}
inline void ArchState::set_msg_last_inst_priv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_last_inst_priv(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_last_inst_priv)
}

// int32 msg_last_inst_xlen = 120;
inline void ArchState::clear_msg_last_inst_xlen() {
  msg_last_inst_xlen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchState::_internal_msg_last_inst_xlen() const {
  return msg_last_inst_xlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchState::msg_last_inst_xlen() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_last_inst_xlen)
  return _internal_msg_last_inst_xlen();
}
inline void ArchState::_internal_set_msg_last_inst_xlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_last_inst_xlen_ = value;
}
inline void ArchState::set_msg_last_inst_xlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_last_inst_xlen(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_last_inst_xlen)
}

// int32 msg_last_inst_flen = 121;
inline void ArchState::clear_msg_last_inst_flen() {
  msg_last_inst_flen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchState::_internal_msg_last_inst_flen() const {
  return msg_last_inst_flen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchState::msg_last_inst_flen() const {
  // @@protoc_insertion_point(field_get:ArchState.msg_last_inst_flen)
  return _internal_msg_last_inst_flen();
}
inline void ArchState::_internal_set_msg_last_inst_flen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_last_inst_flen_ = value;
}
inline void ArchState::set_msg_last_inst_flen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_last_inst_flen(value);
  // @@protoc_insertion_point(field_set:ArchState.msg_last_inst_flen)
}

// -------------------------------------------------------------------

// Page

// uint64 msg_ppn = 1;
inline void Page::clear_msg_ppn() {
  msg_ppn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Page::_internal_msg_ppn() const {
  return msg_ppn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Page::msg_ppn() const {
  // @@protoc_insertion_point(field_get:Page.msg_ppn)
  return _internal_msg_ppn();
}
inline void Page::_internal_set_msg_ppn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_ppn_ = value;
}
inline void Page::set_msg_ppn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msg_ppn(value);
  // @@protoc_insertion_point(field_set:Page.msg_ppn)
}

// bytes msg_bytes = 2;
inline void Page::clear_msg_bytes() {
  msg_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Page::msg_bytes() const {
  // @@protoc_insertion_point(field_get:Page.msg_bytes)
  return _internal_msg_bytes();
}
inline void Page::set_msg_bytes(const std::string& value) {
  _internal_set_msg_bytes(value);
  // @@protoc_insertion_point(field_set:Page.msg_bytes)
}
inline std::string* Page::mutable_msg_bytes() {
  // @@protoc_insertion_point(field_mutable:Page.msg_bytes)
  return _internal_mutable_msg_bytes();
}
inline const std::string& Page::_internal_msg_bytes() const {
  return msg_bytes_.GetNoArena();
}
inline void Page::_internal_set_msg_bytes(const std::string& value) {
  
  msg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Page::set_msg_bytes(std::string&& value) {
  
  msg_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Page.msg_bytes)
}
inline void Page::set_msg_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Page.msg_bytes)
}
inline void Page::set_msg_bytes(const void* value, size_t size) {
  
  msg_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Page.msg_bytes)
}
inline std::string* Page::_internal_mutable_msg_bytes() {
  
  return msg_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Page::release_msg_bytes() {
  // @@protoc_insertion_point(field_release:Page.msg_bytes)
  
  return msg_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_msg_bytes(std::string* msg_bytes) {
  if (msg_bytes != nullptr) {
    
  } else {
    
  }
  msg_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_bytes);
  // @@protoc_insertion_point(field_set_allocated:Page.msg_bytes)
}

// -------------------------------------------------------------------

// SimState

// repeated .ArchState msg_arch_state = 1;
inline int SimState::_internal_msg_arch_state_size() const {
  return msg_arch_state_.size();
}
inline int SimState::msg_arch_state_size() const {
  return _internal_msg_arch_state_size();
}
inline void SimState::clear_msg_arch_state() {
  msg_arch_state_.Clear();
}
inline ::ArchState* SimState::mutable_msg_arch_state(int index) {
  // @@protoc_insertion_point(field_mutable:SimState.msg_arch_state)
  return msg_arch_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArchState >*
SimState::mutable_msg_arch_state() {
  // @@protoc_insertion_point(field_mutable_list:SimState.msg_arch_state)
  return &msg_arch_state_;
}
inline const ::ArchState& SimState::_internal_msg_arch_state(int index) const {
  return msg_arch_state_.Get(index);
}
inline const ::ArchState& SimState::msg_arch_state(int index) const {
  // @@protoc_insertion_point(field_get:SimState.msg_arch_state)
  return _internal_msg_arch_state(index);
}
inline ::ArchState* SimState::_internal_add_msg_arch_state() {
  return msg_arch_state_.Add();
}
inline ::ArchState* SimState::add_msg_arch_state() {
  // @@protoc_insertion_point(field_add:SimState.msg_arch_state)
  return _internal_add_msg_arch_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ArchState >&
SimState::msg_arch_state() const {
  // @@protoc_insertion_point(field_list:SimState.msg_arch_state)
  return msg_arch_state_;
}

// repeated .Page msg_sparse_mm = 2;
inline int SimState::_internal_msg_sparse_mm_size() const {
  return msg_sparse_mm_.size();
}
inline int SimState::msg_sparse_mm_size() const {
  return _internal_msg_sparse_mm_size();
}
inline void SimState::clear_msg_sparse_mm() {
  msg_sparse_mm_.Clear();
}
inline ::Page* SimState::mutable_msg_sparse_mm(int index) {
  // @@protoc_insertion_point(field_mutable:SimState.msg_sparse_mm)
  return msg_sparse_mm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Page >*
SimState::mutable_msg_sparse_mm() {
  // @@protoc_insertion_point(field_mutable_list:SimState.msg_sparse_mm)
  return &msg_sparse_mm_;
}
inline const ::Page& SimState::_internal_msg_sparse_mm(int index) const {
  return msg_sparse_mm_.Get(index);
}
inline const ::Page& SimState::msg_sparse_mm(int index) const {
  // @@protoc_insertion_point(field_get:SimState.msg_sparse_mm)
  return _internal_msg_sparse_mm(index);
}
inline ::Page* SimState::_internal_add_msg_sparse_mm() {
  return msg_sparse_mm_.Add();
}
inline ::Page* SimState::add_msg_sparse_mm() {
  // @@protoc_insertion_point(field_add:SimState.msg_sparse_mm)
  return _internal_add_msg_sparse_mm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Page >&
SimState::msg_sparse_mm() const {
  // @@protoc_insertion_point(field_list:SimState.msg_sparse_mm)
  return msg_sparse_mm_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_arch_2dstate_2eproto
