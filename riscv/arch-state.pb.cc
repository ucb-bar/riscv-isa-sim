// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arch-state.proto

#include "arch-state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ArchState_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseStatusCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLINT_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float128_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HenvcfgCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HidelegCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HstateenCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaskedCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedelegCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MisaCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MstatusCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalUInt64_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLIC_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PLICContext_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Page_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PmpCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmcntrpmfCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SstatusCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SstatusProxyCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StimecmpCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Map_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VirtBasicCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VsstatusCSR_arch_2dstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_arch_2dstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WideCntrCSR_arch_2dstate_2eproto;
class CSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSR> _instance;
} _CSR_default_instance_;
class BasicCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicCSR> _instance;
} _BasicCSR_default_instance_;
class MisaCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MisaCSR> _instance;
} _MisaCSR_default_instance_;
class SatpCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SatpCSR> _instance;
} _SatpCSR_default_instance_;
class VirtBasicCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtBasicCSR> _instance;
} _VirtBasicCSR_default_instance_;
class BaseStatusCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseStatusCSR> _instance;
} _BaseStatusCSR_default_instance_;
class MstatusCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MstatusCSR> _instance;
} _MstatusCSR_default_instance_;
class SstatusProxyCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SstatusProxyCSR> _instance;
} _SstatusProxyCSR_default_instance_;
class VsstatusCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VsstatusCSR> _instance;
} _VsstatusCSR_default_instance_;
class SstatusCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SstatusCSR> _instance;
} _SstatusCSR_default_instance_;
class MaskedCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaskedCSR> _instance;
} _MaskedCSR_default_instance_;
class OptionalUInt64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OptionalUInt64> _instance;
} _OptionalUInt64_default_instance_;
class SmcntrpmfCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SmcntrpmfCSR> _instance;
} _SmcntrpmfCSR_default_instance_;
class WideCntrCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WideCntrCSR> _instance;
} _WideCntrCSR_default_instance_;
class MedelegCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MedelegCSR> _instance;
} _MedelegCSR_default_instance_;
class HstateenCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HstateenCSR> _instance;
} _HstateenCSR_default_instance_;
class TimeProxyCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeProxyCSR> _instance;
} _TimeProxyCSR_default_instance_;
class DCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCSR> _instance;
} _DCSR_default_instance_;
class PmpCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PmpCSR> _instance;
} _PmpCSR_default_instance_;
class StimecmpCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StimecmpCSR> _instance;
} _StimecmpCSR_default_instance_;
class HidelegCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HidelegCSR> _instance;
} _HidelegCSR_default_instance_;
class McontextCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<McontextCSR> _instance;
} _McontextCSR_default_instance_;
class HenvcfgCSRDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HenvcfgCSR> _instance;
} _HenvcfgCSR_default_instance_;
class Float128DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Float128> _instance;
} _Float128_default_instance_;
class ArchStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArchState> _instance;
} _ArchState_default_instance_;
class PageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Page> _instance;
} _Page_default_instance_;
class UInt64MapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UInt64Map> _instance;
} _UInt64Map_default_instance_;
class CLINTDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLINT> _instance;
} _CLINT_default_instance_;
class PLICContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLICContext> _instance;
} _PLICContext_default_instance_;
class PLICDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLIC> _instance;
} _PLIC_default_instance_;
class SimStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimState> _instance;
} _SimState_default_instance_;
static void InitDefaultsscc_info_ArchState_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ArchState_default_instance_;
    new (ptr) ::ArchState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ArchState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_ArchState_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, 0, InitDefaultsscc_info_ArchState_arch_2dstate_2eproto}, {
      &scc_info_Float128_arch_2dstate_2eproto.base,
      &scc_info_MisaCSR_arch_2dstate_2eproto.base,
      &scc_info_MstatusCSR_arch_2dstate_2eproto.base,
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,
      &scc_info_WideCntrCSR_arch_2dstate_2eproto.base,
      &scc_info_MedelegCSR_arch_2dstate_2eproto.base,
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,
      &scc_info_VirtBasicCSR_arch_2dstate_2eproto.base,
      &scc_info_HidelegCSR_arch_2dstate_2eproto.base,
      &scc_info_SstatusCSR_arch_2dstate_2eproto.base,
      &scc_info_DCSR_arch_2dstate_2eproto.base,
      &scc_info_PmpCSR_arch_2dstate_2eproto.base,
      &scc_info_HenvcfgCSR_arch_2dstate_2eproto.base,
      &scc_info_HstateenCSR_arch_2dstate_2eproto.base,
      &scc_info_StimecmpCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_BaseStatusCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BaseStatusCSR_default_instance_;
    new (ptr) ::BaseStatusCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BaseStatusCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseStatusCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseStatusCSR_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_BasicCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BasicCSR_default_instance_;
    new (ptr) ::BasicCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BasicCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicCSR_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_CLINT_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLINT_default_instance_;
    new (ptr) ::CLINT();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLINT::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLINT_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CLINT_arch_2dstate_2eproto}, {
      &scc_info_UInt64Map_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_CSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CSR_default_instance_;
    new (ptr) ::CSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSR_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_DCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DCSR_default_instance_;
    new (ptr) ::DCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DCSR_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_Float128_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Float128_default_instance_;
    new (ptr) ::Float128();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Float128::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Float128_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Float128_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_HenvcfgCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HenvcfgCSR_default_instance_;
    new (ptr) ::HenvcfgCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HenvcfgCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HenvcfgCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HenvcfgCSR_arch_2dstate_2eproto}, {
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_HidelegCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HidelegCSR_default_instance_;
    new (ptr) ::HidelegCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HidelegCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HidelegCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HidelegCSR_arch_2dstate_2eproto}, {
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_HstateenCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HstateenCSR_default_instance_;
    new (ptr) ::HstateenCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HstateenCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HstateenCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HstateenCSR_arch_2dstate_2eproto}, {
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_MaskedCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MaskedCSR_default_instance_;
    new (ptr) ::MaskedCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MaskedCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MaskedCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MaskedCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_McontextCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_McontextCSR_default_instance_;
    new (ptr) ::McontextCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::McontextCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_McontextCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_McontextCSR_arch_2dstate_2eproto}, {
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_MedelegCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MedelegCSR_default_instance_;
    new (ptr) ::MedelegCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MedelegCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MedelegCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MedelegCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_MisaCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MisaCSR_default_instance_;
    new (ptr) ::MisaCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MisaCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MisaCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MisaCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_MstatusCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MstatusCSR_default_instance_;
    new (ptr) ::MstatusCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MstatusCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MstatusCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MstatusCSR_arch_2dstate_2eproto}, {
      &scc_info_BaseStatusCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_OptionalUInt64_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OptionalUInt64_default_instance_;
    new (ptr) ::OptionalUInt64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OptionalUInt64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OptionalUInt64_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OptionalUInt64_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_PLIC_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PLIC_default_instance_;
    new (ptr) ::PLIC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PLIC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLIC_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PLIC_arch_2dstate_2eproto}, {
      &scc_info_PLICContext_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_PLICContext_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PLICContext_default_instance_;
    new (ptr) ::PLICContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PLICContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PLICContext_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PLICContext_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_Page_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Page_default_instance_;
    new (ptr) ::Page();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Page::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Page_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Page_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_PmpCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PmpCSR_default_instance_;
    new (ptr) ::PmpCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PmpCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PmpCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PmpCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_SatpCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SatpCSR_default_instance_;
    new (ptr) ::SatpCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SatpCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SatpCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SatpCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_SimState_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimState_default_instance_;
    new (ptr) ::SimState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SimState_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SimState_arch_2dstate_2eproto}, {
      &scc_info_ArchState_arch_2dstate_2eproto.base,
      &scc_info_CLINT_arch_2dstate_2eproto.base,
      &scc_info_PLIC_arch_2dstate_2eproto.base,
      &scc_info_Page_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_SmcntrpmfCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SmcntrpmfCSR_default_instance_;
    new (ptr) ::SmcntrpmfCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SmcntrpmfCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SmcntrpmfCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SmcntrpmfCSR_arch_2dstate_2eproto}, {
      &scc_info_MaskedCSR_arch_2dstate_2eproto.base,
      &scc_info_OptionalUInt64_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_SstatusCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SstatusCSR_default_instance_;
    new (ptr) ::SstatusCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SstatusCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SstatusCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SstatusCSR_arch_2dstate_2eproto}, {
      &scc_info_SstatusProxyCSR_arch_2dstate_2eproto.base,
      &scc_info_VsstatusCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_SstatusProxyCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SstatusProxyCSR_default_instance_;
    new (ptr) ::SstatusProxyCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SstatusProxyCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SstatusProxyCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SstatusProxyCSR_arch_2dstate_2eproto}, {
      &scc_info_BaseStatusCSR_arch_2dstate_2eproto.base,
      &scc_info_MstatusCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_StimecmpCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StimecmpCSR_default_instance_;
    new (ptr) ::StimecmpCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StimecmpCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StimecmpCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StimecmpCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_TimeProxyCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TimeProxyCSR_default_instance_;
    new (ptr) ::TimeProxyCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TimeProxyCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeProxyCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeProxyCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_UInt64Map_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UInt64Map_default_instance_;
    new (ptr) ::UInt64Map();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UInt64Map::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt64Map_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UInt64Map_arch_2dstate_2eproto}, {}};

static void InitDefaultsscc_info_VirtBasicCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VirtBasicCSR_default_instance_;
    new (ptr) ::VirtBasicCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VirtBasicCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VirtBasicCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VirtBasicCSR_arch_2dstate_2eproto}, {
      &scc_info_BasicCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_VsstatusCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VsstatusCSR_default_instance_;
    new (ptr) ::VsstatusCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VsstatusCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VsstatusCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VsstatusCSR_arch_2dstate_2eproto}, {
      &scc_info_BaseStatusCSR_arch_2dstate_2eproto.base,}};

static void InitDefaultsscc_info_WideCntrCSR_arch_2dstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WideCntrCSR_default_instance_;
    new (ptr) ::WideCntrCSR();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WideCntrCSR::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WideCntrCSR_arch_2dstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WideCntrCSR_arch_2dstate_2eproto}, {
      &scc_info_SmcntrpmfCSR_arch_2dstate_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_arch_2dstate_2eproto[31];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_arch_2dstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_arch_2dstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_arch_2dstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSR, msg_addr_),
  PROTOBUF_FIELD_OFFSET(::CSR, msg_csr_priv_),
  PROTOBUF_FIELD_OFFSET(::CSR, msg_csr_read_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BasicCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BasicCSR, msg_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MisaCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MisaCSR, msg_basic_csr_),
  PROTOBUF_FIELD_OFFSET(::MisaCSR, msg_max_isa_),
  PROTOBUF_FIELD_OFFSET(::MisaCSR, msg_write_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SatpCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SatpCSR, msg_nonvirt_satp_csr_),
  PROTOBUF_FIELD_OFFSET(::SatpCSR, msg_virt_satp_csr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VirtBasicCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VirtBasicCSR, msg_nonvirt_csr_),
  PROTOBUF_FIELD_OFFSET(::VirtBasicCSR, msg_virt_csr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BaseStatusCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BaseStatusCSR, msg_has_page_),
  PROTOBUF_FIELD_OFFSET(::BaseStatusCSR, msg_sstatus_write_mask_),
  PROTOBUF_FIELD_OFFSET(::BaseStatusCSR, msg_sstatus_read_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MstatusCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MstatusCSR, msg_base_status_csr_),
  PROTOBUF_FIELD_OFFSET(::MstatusCSR, msg_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SstatusProxyCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SstatusProxyCSR, msg_base_status_csr_),
  PROTOBUF_FIELD_OFFSET(::SstatusProxyCSR, msg_mstatus_csr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VsstatusCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VsstatusCSR, msg_base_status_csr_),
  PROTOBUF_FIELD_OFFSET(::VsstatusCSR, msg_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SstatusCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SstatusCSR, msg_orig_sstatus_),
  PROTOBUF_FIELD_OFFSET(::SstatusCSR, msg_virt_sstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MaskedCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MaskedCSR, msg_basic_csr_),
  PROTOBUF_FIELD_OFFSET(::MaskedCSR, msg_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OptionalUInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OptionalUInt64, msg_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SmcntrpmfCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SmcntrpmfCSR, msg_masked_csr_),
  PROTOBUF_FIELD_OFFSET(::SmcntrpmfCSR, msg_prev_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WideCntrCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WideCntrCSR, msg_val_),
  PROTOBUF_FIELD_OFFSET(::WideCntrCSR, msg_config_csr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MedelegCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MedelegCSR, msg_basic_csr_),
  PROTOBUF_FIELD_OFFSET(::MedelegCSR, msg_hypervisor_exceptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HstateenCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HstateenCSR, msg_masked_csr_),
  PROTOBUF_FIELD_OFFSET(::HstateenCSR, msg_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TimeProxyCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TimeProxyCSR, msg_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_prv_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_step_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_ebreakm_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_ebreaks_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_ebreaku_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_ebreakvs_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_ebreakvu_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_halt_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_v_),
  PROTOBUF_FIELD_OFFSET(::DCSR, msg_cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PmpCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PmpCSR, msg_basic_csr_),
  PROTOBUF_FIELD_OFFSET(::PmpCSR, msg_cfg_),
  PROTOBUF_FIELD_OFFSET(::PmpCSR, msg_pmpidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StimecmpCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::StimecmpCSR, msg_basic_csr_),
  PROTOBUF_FIELD_OFFSET(::StimecmpCSR, msg_intr_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HidelegCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HidelegCSR, msg_hideleg_csr_),
  PROTOBUF_FIELD_OFFSET(::HidelegCSR, msg_mideleg_csr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::McontextCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::McontextCSR, msg_delegate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HenvcfgCSR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::HenvcfgCSR, msg_henvcfg_),
  PROTOBUF_FIELD_OFFSET(::HenvcfgCSR, msg_menvcfg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Float128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Float128, msg_0_),
  PROTOBUF_FIELD_OFFSET(::Float128, msg_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ArchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_pc_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_xpr_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_fpr_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_prv_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_prev_prv_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_prv_changed_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_v_changed_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_v_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_prev_v_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_misa_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mstatus_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mepc_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mtval_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mscratch_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mtvec_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mcause_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_minstret_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mcycle_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_time_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mevent_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mie_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mip_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_medeleg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mcounteren_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_scounteren_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_sepc_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_stval_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_sscratch_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_stvec_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_satp_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_scause_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mtval2_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mtinst_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hstatus_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hideleg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hedeleg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hcounteren_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_htimedelta_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_htval_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_htinst_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hgatp_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_sstatus_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_dpc_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_dscratch0_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_dscratch1_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_dcsr_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_tselect_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_scontext_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hcontext_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mseccfg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_pmpaddr_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_fflags_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_frm_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_senvcfg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_henvcfg_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mstateen_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_sstateen_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_hstateen_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mnscratch_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mnepc_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_mnstatus_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_stimecmp_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_vstimecmp_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_jvt_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_miselect_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_siselect_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_serialized_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_single_step_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_last_inst_priv_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_last_inst_xlen_),
  PROTOBUF_FIELD_OFFSET(::ArchState, msg_last_inst_flen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Page, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Page, msg_ppn_),
  PROTOBUF_FIELD_OFFSET(::Page, msg_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UInt64Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UInt64Map, msg_k_),
  PROTOBUF_FIELD_OFFSET(::UInt64Map, msg_v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CLINT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLINT, msg_mtime_),
  PROTOBUF_FIELD_OFFSET(::CLINT, msg_mtimecmp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PLICContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PLICContext, msg_priority_threshold_),
  PROTOBUF_FIELD_OFFSET(::PLICContext, msg_enable_),
  PROTOBUF_FIELD_OFFSET(::PLICContext, msg_pending_),
  PROTOBUF_FIELD_OFFSET(::PLICContext, msg_pending_priority_),
  PROTOBUF_FIELD_OFFSET(::PLICContext, msg_claimed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PLIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PLIC, msg_contexts_),
  PROTOBUF_FIELD_OFFSET(::PLIC, msg_priority_),
  PROTOBUF_FIELD_OFFSET(::PLIC, msg_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SimState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SimState, msg_arch_state_),
  PROTOBUF_FIELD_OFFSET(::SimState, msg_clint_),
  PROTOBUF_FIELD_OFFSET(::SimState, msg_plic_),
  PROTOBUF_FIELD_OFFSET(::SimState, msg_sparse_mm_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CSR)},
  { 8, -1, sizeof(::BasicCSR)},
  { 14, -1, sizeof(::MisaCSR)},
  { 22, -1, sizeof(::SatpCSR)},
  { 29, -1, sizeof(::VirtBasicCSR)},
  { 36, -1, sizeof(::BaseStatusCSR)},
  { 44, -1, sizeof(::MstatusCSR)},
  { 51, -1, sizeof(::SstatusProxyCSR)},
  { 58, -1, sizeof(::VsstatusCSR)},
  { 65, -1, sizeof(::SstatusCSR)},
  { 72, -1, sizeof(::MaskedCSR)},
  { 79, -1, sizeof(::OptionalUInt64)},
  { 85, -1, sizeof(::SmcntrpmfCSR)},
  { 92, -1, sizeof(::WideCntrCSR)},
  { 99, -1, sizeof(::MedelegCSR)},
  { 106, -1, sizeof(::HstateenCSR)},
  { 113, -1, sizeof(::TimeProxyCSR)},
  { 119, -1, sizeof(::DCSR)},
  { 134, -1, sizeof(::PmpCSR)},
  { 142, -1, sizeof(::StimecmpCSR)},
  { 149, -1, sizeof(::HidelegCSR)},
  { 156, -1, sizeof(::McontextCSR)},
  { 162, -1, sizeof(::HenvcfgCSR)},
  { 169, -1, sizeof(::Float128)},
  { 176, -1, sizeof(::ArchState)},
  { 253, -1, sizeof(::Page)},
  { 260, -1, sizeof(::UInt64Map)},
  { 267, -1, sizeof(::CLINT)},
  { 274, -1, sizeof(::PLICContext)},
  { 284, -1, sizeof(::PLIC)},
  { 292, -1, sizeof(::SimState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BasicCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MisaCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SatpCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VirtBasicCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BaseStatusCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MstatusCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SstatusProxyCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VsstatusCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SstatusCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MaskedCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OptionalUInt64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SmcntrpmfCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WideCntrCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MedelegCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HstateenCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TimeProxyCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PmpCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StimecmpCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HidelegCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_McontextCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_HenvcfgCSR_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Float128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ArchState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Page_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UInt64Map_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLINT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PLICContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PLIC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SimState_default_instance_),
};

const char descriptor_table_protodef_arch_2dstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020arch-state.proto\"H\n\003CSR\022\020\n\010msg_addr\030\001 "
  "\001(\004\022\024\n\014msg_csr_priv\030\002 \001(\r\022\031\n\021msg_csr_rea"
  "d_only\030\003 \001(\010\"\033\n\010BasicCSR\022\017\n\007msg_val\030\001 \001("
  "\004\"X\n\007MisaCSR\022 \n\rmsg_basic_csr\030\001 \001(\0132\t.Ba"
  "sicCSR\022\023\n\013msg_max_isa\030\002 \001(\004\022\026\n\016msg_write"
  "_mask\030\003 \001(\004\"X\n\007SatpCSR\022\'\n\024msg_nonvirt_sa"
  "tp_csr\030\001 \001(\0132\t.BasicCSR\022$\n\021msg_virt_satp"
  "_csr\030\002 \001(\0132\t.BasicCSR\"S\n\014VirtBasicCSR\022\"\n"
  "\017msg_nonvirt_csr\030\001 \001(\0132\t.BasicCSR\022\037\n\014msg"
  "_virt_csr\030\002 \001(\0132\t.BasicCSR\"d\n\rBaseStatus"
  "CSR\022\024\n\014msg_has_page\030\001 \001(\010\022\036\n\026msg_sstatus"
  "_write_mask\030\002 \001(\004\022\035\n\025msg_sstatus_read_ma"
  "sk\030\003 \001(\004\"J\n\nMstatusCSR\022+\n\023msg_base_statu"
  "s_csr\030\001 \001(\0132\016.BaseStatusCSR\022\017\n\007msg_val\030\002"
  " \001(\004\"d\n\017SstatusProxyCSR\022+\n\023msg_base_stat"
  "us_csr\030\001 \001(\0132\016.BaseStatusCSR\022$\n\017msg_msta"
  "tus_csr\030\002 \001(\0132\013.MstatusCSR\"K\n\013VsstatusCS"
  "R\022+\n\023msg_base_status_csr\030\001 \001(\0132\016.BaseSta"
  "tusCSR\022\017\n\007msg_val\030\002 \001(\004\"`\n\nSstatusCSR\022*\n"
  "\020msg_orig_sstatus\030\001 \001(\0132\020.SstatusProxyCS"
  "R\022&\n\020msg_virt_sstatus\030\002 \001(\0132\014.VsstatusCS"
  "R\"\?\n\tMaskedCSR\022 \n\rmsg_basic_csr\030\001 \001(\0132\t."
  "BasicCSR\022\020\n\010msg_mask\030\002 \001(\004\"!\n\016OptionalUI"
  "nt64\022\017\n\007msg_val\030\001 \001(\004\"Y\n\014SmcntrpmfCSR\022\"\n"
  "\016msg_masked_csr\030\001 \001(\0132\n.MaskedCSR\022%\n\014msg"
  "_prev_val\030\002 \001(\0132\017.OptionalUInt64\"E\n\013Wide"
  "CntrCSR\022\017\n\007msg_val\030\001 \001(\004\022%\n\016msg_config_c"
  "sr\030\002 \001(\0132\r.SmcntrpmfCSR\"Q\n\nMedelegCSR\022 \n"
  "\rmsg_basic_csr\030\001 \001(\0132\t.BasicCSR\022!\n\031msg_h"
  "ypervisor_exceptions\030\002 \001(\004\"D\n\013HstateenCS"
  "R\022\"\n\016msg_masked_csr\030\001 \001(\0132\n.MaskedCSR\022\021\n"
  "\tmsg_index\030\002 \001(\r\"+\n\014TimeProxyCSR\022\033\n\010msg_"
  "time\030\001 \001(\0132\t.BasicCSR\"\310\001\n\004DCSR\022\017\n\007msg_pr"
  "v\030\001 \001(\r\022\020\n\010msg_step\030\002 \001(\010\022\023\n\013msg_ebreakm"
  "\030\003 \001(\010\022\023\n\013msg_ebreaks\030\004 \001(\010\022\023\n\013msg_ebrea"
  "ku\030\005 \001(\010\022\024\n\014msg_ebreakvs\030\006 \001(\010\022\024\n\014msg_eb"
  "reakvu\030\007 \001(\010\022\020\n\010msg_halt\030\010 \001(\010\022\r\n\005msg_v\030"
  "\t \001(\010\022\021\n\tmsg_cause\030\n \001(\r\"O\n\006PmpCSR\022 \n\rms"
  "g_basic_csr\030\001 \001(\0132\t.BasicCSR\022\017\n\007msg_cfg\030"
  "\002 \001(\r\022\022\n\nmsg_pmpidx\030\003 \001(\004\"F\n\013StimecmpCSR"
  "\022 \n\rmsg_basic_csr\030\001 \001(\0132\t.BasicCSR\022\025\n\rms"
  "g_intr_mask\030\002 \001(\004\"U\n\nHidelegCSR\022#\n\017msg_h"
  "ideleg_csr\030\001 \001(\0132\n.MaskedCSR\022\"\n\017msg_mide"
  "leg_csr\030\002 \001(\0132\t.BasicCSR\"/\n\013McontextCSR\022"
  " \n\014msg_delegate\030\002 \001(\0132\n.MaskedCSR\"N\n\nHen"
  "vcfgCSR\022\037\n\013msg_henvcfg\030\001 \001(\0132\n.MaskedCSR"
  "\022\037\n\013msg_menvcfg\030\002 \001(\0132\n.MaskedCSR\"(\n\010Flo"
  "at128\022\r\n\005msg_0\030\001 \001(\004\022\r\n\005msg_1\030\002 \001(\004\"\237\021\n\t"
  "ArchState\022\016\n\006msg_pc\030\001 \001(\004\022\017\n\007msg_XPR\030\002 \003"
  "(\004\022\032\n\007msg_FPR\030\003 \003(\0132\t.Float128\022\017\n\007msg_pr"
  "v\030\004 \001(\004\022\024\n\014msg_prev_prv\030\005 \001(\004\022\027\n\017msg_prv"
  "_changed\030\006 \001(\010\022\025\n\rmsg_v_changed\030\007 \001(\010\022\r\n"
  "\005msg_v\030\010 \001(\010\022\022\n\nmsg_prev_v\030\t \001(\010\022\032\n\010msg_"
  "misa\030\n \001(\0132\010.MisaCSR\022 \n\013msg_mstatus\030\013 \001("
  "\0132\013.MstatusCSR\022\033\n\010msg_mepc\030\014 \001(\0132\t.Basic"
  "CSR\022\034\n\tmsg_mtval\030\r \001(\0132\t.BasicCSR\022\037\n\014msg"
  "_mscratch\030\016 \001(\0132\t.BasicCSR\022\034\n\tmsg_mtvec\030"
  "\017 \001(\0132\t.BasicCSR\022\035\n\nmsg_mcause\030\020 \001(\0132\t.B"
  "asicCSR\022\"\n\014msg_minstret\030\021 \001(\0132\014.WideCntr"
  "CSR\022 \n\nmsg_mcycle\030\022 \001(\0132\014.WideCntrCSR\022\033\n"
  "\010msg_time\030\023 \001(\0132\t.BasicCSR\022\035\n\nmsg_mevent"
  "\030\024 \003(\0132\t.BasicCSR\022\032\n\007msg_mie\030\031 \001(\0132\t.Bas"
  "icCSR\022\032\n\007msg_mip\030\032 \001(\0132\t.BasicCSR\022 \n\013msg"
  "_medeleg\030\" \001(\0132\013.MedelegCSR\022\"\n\016msg_mcoun"
  "teren\030$ \001(\0132\n.MaskedCSR\022\"\n\016msg_scountere"
  "n\030% \001(\0132\n.MaskedCSR\022\037\n\010msg_sepc\030& \001(\0132\r."
  "VirtBasicCSR\022 \n\tmsg_stval\030\' \001(\0132\r.VirtBa"
  "sicCSR\022#\n\014msg_sscratch\030( \001(\0132\r.VirtBasic"
  "CSR\022 \n\tmsg_stvec\030) \001(\0132\r.VirtBasicCSR\022\037\n"
  "\010msg_satp\030* \001(\0132\r.VirtBasicCSR\022!\n\nmsg_sc"
  "ause\030+ \001(\0132\r.VirtBasicCSR\022\035\n\nmsg_mtval2\030"
  ", \001(\0132\t.BasicCSR\022\035\n\nmsg_mtinst\030- \001(\0132\t.B"
  "asicCSR\022\037\n\013msg_hstatus\030. \001(\0132\n.MaskedCSR"
  "\022 \n\013msg_hideleg\0301 \001(\0132\013.HidelegCSR\022\037\n\013ms"
  "g_hedeleg\0302 \001(\0132\n.MaskedCSR\022\"\n\016msg_hcoun"
  "teren\0303 \001(\0132\n.MaskedCSR\022!\n\016msg_htimedelt"
  "a\0304 \001(\0132\t.BasicCSR\022\034\n\tmsg_htval\0305 \001(\0132\t."
  "BasicCSR\022\035\n\nmsg_htinst\0306 \001(\0132\t.BasicCSR\022"
  "\034\n\tmsg_hgatp\0307 \001(\0132\t.BasicCSR\022 \n\013msg_sst"
  "atus\0308 \001(\0132\013.SstatusCSR\022\032\n\007msg_dpc\0309 \001(\013"
  "2\t.BasicCSR\022 \n\rmsg_dscratch0\030: \001(\0132\t.Bas"
  "icCSR\022 \n\rmsg_dscratch1\030; \001(\0132\t.BasicCSR\022"
  "\027\n\010msg_dcsr\030< \001(\0132\005.DCSR\022\036\n\013msg_tselect\030"
  "= \001(\0132\t.BasicCSR\022 \n\014msg_scontext\030B \001(\0132\n"
  ".MaskedCSR\022 \n\014msg_hcontext\030C \001(\0132\n.Maske"
  "dCSR\022\036\n\013msg_mseccfg\030E \001(\0132\t.BasicCSR\022\034\n\013"
  "msg_pmpaddr\030F \003(\0132\007.PmpCSR\022\036\n\nmsg_fflags"
  "\030H \001(\0132\n.MaskedCSR\022\033\n\007msg_frm\030I \001(\0132\n.Ma"
  "skedCSR\022\037\n\013msg_senvcfg\030R \001(\0132\n.MaskedCSR"
  "\022 \n\013msg_henvcfg\030S \001(\0132\013.HenvcfgCSR\022 \n\014ms"
  "g_mstateen\030T \003(\0132\n.MaskedCSR\022\"\n\014msg_ssta"
  "teen\030U \003(\0132\014.HstateenCSR\022\"\n\014msg_hstateen"
  "\030V \003(\0132\014.HstateenCSR\022 \n\rmsg_mnscratch\030W "
  "\001(\0132\t.BasicCSR\022\034\n\tmsg_mnepc\030X \001(\0132\t.Basi"
  "cCSR\022\037\n\014msg_mnstatus\030Z \001(\0132\t.BasicCSR\022\"\n"
  "\014msg_stimecmp\030[ \001(\0132\014.StimecmpCSR\022#\n\rmsg"
  "_vstimecmp\030\\ \001(\0132\014.StimecmpCSR\022\032\n\007msg_jv"
  "t\030] \001(\0132\t.BasicCSR\022\037\n\014msg_miselect\030^ \001(\013"
  "2\t.BasicCSR\022#\n\014msg_siselect\030e \001(\0132\r.Virt"
  "BasicCSR\022\026\n\016msg_debug_mode\030t \001(\010\022\026\n\016msg_"
  "serialized\030u \001(\010\022\027\n\017msg_single_step\030v \001("
  "\r\022\032\n\022msg_last_inst_priv\030w \001(\004\022\032\n\022msg_las"
  "t_inst_xlen\030x \001(\005\022\032\n\022msg_last_inst_flen\030"
  "y \001(\005\"*\n\004Page\022\017\n\007msg_ppn\030\001 \001(\004\022\021\n\tmsg_by"
  "tes\030\002 \001(\014\")\n\tUInt64Map\022\r\n\005msg_k\030\001 \001(\004\022\r\n"
  "\005msg_v\030\002 \001(\004\"<\n\005CLINT\022\021\n\tmsg_mtime\030\001 \001(\004"
  "\022 \n\014msg_mtimecmp\030\002 \003(\0132\n.UInt64Map\"\211\001\n\013P"
  "LICContext\022\036\n\026msg_priority_threshold\030\001 \001"
  "(\r\022\022\n\nmsg_enable\030\002 \003(\r\022\023\n\013msg_pending\030\003 "
  "\003(\r\022\034\n\024msg_pending_priority\030\004 \003(\r\022\023\n\013msg"
  "_claimed\030\005 \003(\r\"S\n\004PLIC\022\"\n\014msg_contexts\030\001"
  " \003(\0132\014.PLICContext\022\024\n\014msg_priority\030\002 \003(\r"
  "\022\021\n\tmsg_level\030\003 \003(\r\"\200\001\n\010SimState\022\"\n\016msg_"
  "arch_state\030\001 \003(\0132\n.ArchState\022\031\n\tmsg_clin"
  "t\030\002 \001(\0132\006.CLINT\022\027\n\010msg_plic\030\003 \001(\0132\005.PLIC"
  "\022\034\n\rmsg_sparse_mm\030\004 \003(\0132\005.Pageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_arch_2dstate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_arch_2dstate_2eproto_sccs[31] = {
  &scc_info_ArchState_arch_2dstate_2eproto.base,
  &scc_info_BaseStatusCSR_arch_2dstate_2eproto.base,
  &scc_info_BasicCSR_arch_2dstate_2eproto.base,
  &scc_info_CLINT_arch_2dstate_2eproto.base,
  &scc_info_CSR_arch_2dstate_2eproto.base,
  &scc_info_DCSR_arch_2dstate_2eproto.base,
  &scc_info_Float128_arch_2dstate_2eproto.base,
  &scc_info_HenvcfgCSR_arch_2dstate_2eproto.base,
  &scc_info_HidelegCSR_arch_2dstate_2eproto.base,
  &scc_info_HstateenCSR_arch_2dstate_2eproto.base,
  &scc_info_MaskedCSR_arch_2dstate_2eproto.base,
  &scc_info_McontextCSR_arch_2dstate_2eproto.base,
  &scc_info_MedelegCSR_arch_2dstate_2eproto.base,
  &scc_info_MisaCSR_arch_2dstate_2eproto.base,
  &scc_info_MstatusCSR_arch_2dstate_2eproto.base,
  &scc_info_OptionalUInt64_arch_2dstate_2eproto.base,
  &scc_info_PLIC_arch_2dstate_2eproto.base,
  &scc_info_PLICContext_arch_2dstate_2eproto.base,
  &scc_info_Page_arch_2dstate_2eproto.base,
  &scc_info_PmpCSR_arch_2dstate_2eproto.base,
  &scc_info_SatpCSR_arch_2dstate_2eproto.base,
  &scc_info_SimState_arch_2dstate_2eproto.base,
  &scc_info_SmcntrpmfCSR_arch_2dstate_2eproto.base,
  &scc_info_SstatusCSR_arch_2dstate_2eproto.base,
  &scc_info_SstatusProxyCSR_arch_2dstate_2eproto.base,
  &scc_info_StimecmpCSR_arch_2dstate_2eproto.base,
  &scc_info_TimeProxyCSR_arch_2dstate_2eproto.base,
  &scc_info_UInt64Map_arch_2dstate_2eproto.base,
  &scc_info_VirtBasicCSR_arch_2dstate_2eproto.base,
  &scc_info_VsstatusCSR_arch_2dstate_2eproto.base,
  &scc_info_WideCntrCSR_arch_2dstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_arch_2dstate_2eproto_once;
static bool descriptor_table_arch_2dstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_arch_2dstate_2eproto = {
  &descriptor_table_arch_2dstate_2eproto_initialized, descriptor_table_protodef_arch_2dstate_2eproto, "arch-state.proto", 4638,
  &descriptor_table_arch_2dstate_2eproto_once, descriptor_table_arch_2dstate_2eproto_sccs, descriptor_table_arch_2dstate_2eproto_deps, 31, 0,
  schemas, file_default_instances, TableStruct_arch_2dstate_2eproto::offsets,
  file_level_metadata_arch_2dstate_2eproto, 31, file_level_enum_descriptors_arch_2dstate_2eproto, file_level_service_descriptors_arch_2dstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_arch_2dstate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_arch_2dstate_2eproto), true);

// ===================================================================

void CSR::InitAsDefaultInstance() {
}
class CSR::_Internal {
 public:
};

CSR::CSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSR)
}
CSR::CSR(const CSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_addr_, &from.msg_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_csr_read_only_) -
    reinterpret_cast<char*>(&msg_addr_)) + sizeof(msg_csr_read_only_));
  // @@protoc_insertion_point(copy_constructor:CSR)
}

void CSR::SharedCtor() {
  ::memset(&msg_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_csr_read_only_) -
      reinterpret_cast<char*>(&msg_addr_)) + sizeof(msg_csr_read_only_));
}

CSR::~CSR() {
  // @@protoc_insertion_point(destructor:CSR)
  SharedDtor();
}

void CSR::SharedDtor() {
}

void CSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSR& CSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void CSR::Clear() {
// @@protoc_insertion_point(message_clear_start:CSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_csr_read_only_) -
      reinterpret_cast<char*>(&msg_addr_)) + sizeof(msg_csr_read_only_));
  _internal_metadata_.Clear();
}

const char* CSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_csr_priv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_csr_priv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_csr_read_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_csr_read_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_addr = 1;
  if (this->msg_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_addr(), target);
  }

  // uint32 msg_csr_priv = 2;
  if (this->msg_csr_priv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_csr_priv(), target);
  }

  // bool msg_csr_read_only = 3;
  if (this->msg_csr_read_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_msg_csr_read_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSR)
  return target;
}

size_t CSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_addr = 1;
  if (this->msg_addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_addr());
  }

  // uint32 msg_csr_priv = 2;
  if (this->msg_csr_priv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_csr_priv());
  }

  // bool msg_csr_read_only = 3;
  if (this->msg_csr_read_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSR)
  GOOGLE_DCHECK_NE(&from, this);
  const CSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSR)
    MergeFrom(*source);
  }
}

void CSR::MergeFrom(const CSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_addr() != 0) {
    _internal_set_msg_addr(from._internal_msg_addr());
  }
  if (from.msg_csr_priv() != 0) {
    _internal_set_msg_csr_priv(from._internal_msg_csr_priv());
  }
  if (from.msg_csr_read_only() != 0) {
    _internal_set_msg_csr_read_only(from._internal_msg_csr_read_only());
  }
}

void CSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSR::CopyFrom(const CSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSR::IsInitialized() const {
  return true;
}

void CSR::InternalSwap(CSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_addr_, other->msg_addr_);
  swap(msg_csr_priv_, other->msg_csr_priv_);
  swap(msg_csr_read_only_, other->msg_csr_read_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicCSR::InitAsDefaultInstance() {
}
class BasicCSR::_Internal {
 public:
};

BasicCSR::BasicCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BasicCSR)
}
BasicCSR::BasicCSR(const BasicCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_val_ = from.msg_val_;
  // @@protoc_insertion_point(copy_constructor:BasicCSR)
}

void BasicCSR::SharedCtor() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}

BasicCSR::~BasicCSR() {
  // @@protoc_insertion_point(destructor:BasicCSR)
  SharedDtor();
}

void BasicCSR::SharedDtor() {
}

void BasicCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicCSR& BasicCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void BasicCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:BasicCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_val_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* BasicCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BasicCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BasicCSR)
  return target;
}

size_t BasicCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BasicCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BasicCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BasicCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BasicCSR)
    MergeFrom(*source);
  }
}

void BasicCSR::MergeFrom(const BasicCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BasicCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_val() != 0) {
    _internal_set_msg_val(from._internal_msg_val());
  }
}

void BasicCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BasicCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicCSR::CopyFrom(const BasicCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BasicCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicCSR::IsInitialized() const {
  return true;
}

void BasicCSR::InternalSwap(BasicCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_val_, other->msg_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MisaCSR::InitAsDefaultInstance() {
  ::_MisaCSR_default_instance_._instance.get_mutable()->msg_basic_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class MisaCSR::_Internal {
 public:
  static const ::BasicCSR& msg_basic_csr(const MisaCSR* msg);
};

const ::BasicCSR&
MisaCSR::_Internal::msg_basic_csr(const MisaCSR* msg) {
  return *msg->msg_basic_csr_;
}
MisaCSR::MisaCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MisaCSR)
}
MisaCSR::MisaCSR(const MisaCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_basic_csr()) {
    msg_basic_csr_ = new ::BasicCSR(*from.msg_basic_csr_);
  } else {
    msg_basic_csr_ = nullptr;
  }
  ::memcpy(&msg_max_isa_, &from.msg_max_isa_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_write_mask_) -
    reinterpret_cast<char*>(&msg_max_isa_)) + sizeof(msg_write_mask_));
  // @@protoc_insertion_point(copy_constructor:MisaCSR)
}

void MisaCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MisaCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_basic_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_write_mask_) -
      reinterpret_cast<char*>(&msg_basic_csr_)) + sizeof(msg_write_mask_));
}

MisaCSR::~MisaCSR() {
  // @@protoc_insertion_point(destructor:MisaCSR)
  SharedDtor();
}

void MisaCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_basic_csr_;
}

void MisaCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MisaCSR& MisaCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MisaCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void MisaCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:MisaCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
  ::memset(&msg_max_isa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_write_mask_) -
      reinterpret_cast<char*>(&msg_max_isa_)) + sizeof(msg_write_mask_));
  _internal_metadata_.Clear();
}

const char* MisaCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_basic_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_basic_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_max_isa = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_max_isa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_write_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_write_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MisaCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MisaCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_basic_csr(this), target, stream);
  }

  // uint64 msg_max_isa = 2;
  if (this->msg_max_isa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_max_isa(), target);
  }

  // uint64 msg_write_mask = 3;
  if (this->msg_write_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_write_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MisaCSR)
  return target;
}

size_t MisaCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MisaCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_basic_csr_);
  }

  // uint64 msg_max_isa = 2;
  if (this->msg_max_isa() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_max_isa());
  }

  // uint64 msg_write_mask = 3;
  if (this->msg_write_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_write_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MisaCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MisaCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const MisaCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MisaCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MisaCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MisaCSR)
    MergeFrom(*source);
  }
}

void MisaCSR::MergeFrom(const MisaCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MisaCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_basic_csr()) {
    _internal_mutable_msg_basic_csr()->::BasicCSR::MergeFrom(from._internal_msg_basic_csr());
  }
  if (from.msg_max_isa() != 0) {
    _internal_set_msg_max_isa(from._internal_msg_max_isa());
  }
  if (from.msg_write_mask() != 0) {
    _internal_set_msg_write_mask(from._internal_msg_write_mask());
  }
}

void MisaCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MisaCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MisaCSR::CopyFrom(const MisaCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MisaCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MisaCSR::IsInitialized() const {
  return true;
}

void MisaCSR::InternalSwap(MisaCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_basic_csr_, other->msg_basic_csr_);
  swap(msg_max_isa_, other->msg_max_isa_);
  swap(msg_write_mask_, other->msg_write_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MisaCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SatpCSR::InitAsDefaultInstance() {
  ::_SatpCSR_default_instance_._instance.get_mutable()->msg_nonvirt_satp_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_SatpCSR_default_instance_._instance.get_mutable()->msg_virt_satp_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class SatpCSR::_Internal {
 public:
  static const ::BasicCSR& msg_nonvirt_satp_csr(const SatpCSR* msg);
  static const ::BasicCSR& msg_virt_satp_csr(const SatpCSR* msg);
};

const ::BasicCSR&
SatpCSR::_Internal::msg_nonvirt_satp_csr(const SatpCSR* msg) {
  return *msg->msg_nonvirt_satp_csr_;
}
const ::BasicCSR&
SatpCSR::_Internal::msg_virt_satp_csr(const SatpCSR* msg) {
  return *msg->msg_virt_satp_csr_;
}
SatpCSR::SatpCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SatpCSR)
}
SatpCSR::SatpCSR(const SatpCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_nonvirt_satp_csr()) {
    msg_nonvirt_satp_csr_ = new ::BasicCSR(*from.msg_nonvirt_satp_csr_);
  } else {
    msg_nonvirt_satp_csr_ = nullptr;
  }
  if (from._internal_has_msg_virt_satp_csr()) {
    msg_virt_satp_csr_ = new ::BasicCSR(*from.msg_virt_satp_csr_);
  } else {
    msg_virt_satp_csr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SatpCSR)
}

void SatpCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SatpCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_nonvirt_satp_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_virt_satp_csr_) -
      reinterpret_cast<char*>(&msg_nonvirt_satp_csr_)) + sizeof(msg_virt_satp_csr_));
}

SatpCSR::~SatpCSR() {
  // @@protoc_insertion_point(destructor:SatpCSR)
  SharedDtor();
}

void SatpCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_nonvirt_satp_csr_;
  if (this != internal_default_instance()) delete msg_virt_satp_csr_;
}

void SatpCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SatpCSR& SatpCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SatpCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void SatpCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:SatpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_nonvirt_satp_csr_ != nullptr) {
    delete msg_nonvirt_satp_csr_;
  }
  msg_nonvirt_satp_csr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_virt_satp_csr_ != nullptr) {
    delete msg_virt_satp_csr_;
  }
  msg_virt_satp_csr_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SatpCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_nonvirt_satp_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_nonvirt_satp_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_virt_satp_csr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_virt_satp_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SatpCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SatpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_nonvirt_satp_csr = 1;
  if (this->has_msg_nonvirt_satp_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_nonvirt_satp_csr(this), target, stream);
  }

  // .BasicCSR msg_virt_satp_csr = 2;
  if (this->has_msg_virt_satp_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_virt_satp_csr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SatpCSR)
  return target;
}

size_t SatpCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SatpCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_nonvirt_satp_csr = 1;
  if (this->has_msg_nonvirt_satp_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_nonvirt_satp_csr_);
  }

  // .BasicCSR msg_virt_satp_csr = 2;
  if (this->has_msg_virt_satp_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_virt_satp_csr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SatpCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SatpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const SatpCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SatpCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SatpCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SatpCSR)
    MergeFrom(*source);
  }
}

void SatpCSR::MergeFrom(const SatpCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SatpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_nonvirt_satp_csr()) {
    _internal_mutable_msg_nonvirt_satp_csr()->::BasicCSR::MergeFrom(from._internal_msg_nonvirt_satp_csr());
  }
  if (from.has_msg_virt_satp_csr()) {
    _internal_mutable_msg_virt_satp_csr()->::BasicCSR::MergeFrom(from._internal_msg_virt_satp_csr());
  }
}

void SatpCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SatpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatpCSR::CopyFrom(const SatpCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SatpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatpCSR::IsInitialized() const {
  return true;
}

void SatpCSR::InternalSwap(SatpCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_nonvirt_satp_csr_, other->msg_nonvirt_satp_csr_);
  swap(msg_virt_satp_csr_, other->msg_virt_satp_csr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SatpCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtBasicCSR::InitAsDefaultInstance() {
  ::_VirtBasicCSR_default_instance_._instance.get_mutable()->msg_nonvirt_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_VirtBasicCSR_default_instance_._instance.get_mutable()->msg_virt_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class VirtBasicCSR::_Internal {
 public:
  static const ::BasicCSR& msg_nonvirt_csr(const VirtBasicCSR* msg);
  static const ::BasicCSR& msg_virt_csr(const VirtBasicCSR* msg);
};

const ::BasicCSR&
VirtBasicCSR::_Internal::msg_nonvirt_csr(const VirtBasicCSR* msg) {
  return *msg->msg_nonvirt_csr_;
}
const ::BasicCSR&
VirtBasicCSR::_Internal::msg_virt_csr(const VirtBasicCSR* msg) {
  return *msg->msg_virt_csr_;
}
VirtBasicCSR::VirtBasicCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VirtBasicCSR)
}
VirtBasicCSR::VirtBasicCSR(const VirtBasicCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_nonvirt_csr()) {
    msg_nonvirt_csr_ = new ::BasicCSR(*from.msg_nonvirt_csr_);
  } else {
    msg_nonvirt_csr_ = nullptr;
  }
  if (from._internal_has_msg_virt_csr()) {
    msg_virt_csr_ = new ::BasicCSR(*from.msg_virt_csr_);
  } else {
    msg_virt_csr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VirtBasicCSR)
}

void VirtBasicCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VirtBasicCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_nonvirt_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_virt_csr_) -
      reinterpret_cast<char*>(&msg_nonvirt_csr_)) + sizeof(msg_virt_csr_));
}

VirtBasicCSR::~VirtBasicCSR() {
  // @@protoc_insertion_point(destructor:VirtBasicCSR)
  SharedDtor();
}

void VirtBasicCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_nonvirt_csr_;
  if (this != internal_default_instance()) delete msg_virt_csr_;
}

void VirtBasicCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtBasicCSR& VirtBasicCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtBasicCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void VirtBasicCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:VirtBasicCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_nonvirt_csr_ != nullptr) {
    delete msg_nonvirt_csr_;
  }
  msg_nonvirt_csr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_virt_csr_ != nullptr) {
    delete msg_virt_csr_;
  }
  msg_virt_csr_ = nullptr;
  _internal_metadata_.Clear();
}

const char* VirtBasicCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_nonvirt_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_nonvirt_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_virt_csr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_virt_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtBasicCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VirtBasicCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_nonvirt_csr = 1;
  if (this->has_msg_nonvirt_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_nonvirt_csr(this), target, stream);
  }

  // .BasicCSR msg_virt_csr = 2;
  if (this->has_msg_virt_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_virt_csr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VirtBasicCSR)
  return target;
}

size_t VirtBasicCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VirtBasicCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_nonvirt_csr = 1;
  if (this->has_msg_nonvirt_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_nonvirt_csr_);
  }

  // .BasicCSR msg_virt_csr = 2;
  if (this->has_msg_virt_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_virt_csr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtBasicCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VirtBasicCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtBasicCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtBasicCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VirtBasicCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VirtBasicCSR)
    MergeFrom(*source);
  }
}

void VirtBasicCSR::MergeFrom(const VirtBasicCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VirtBasicCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_nonvirt_csr()) {
    _internal_mutable_msg_nonvirt_csr()->::BasicCSR::MergeFrom(from._internal_msg_nonvirt_csr());
  }
  if (from.has_msg_virt_csr()) {
    _internal_mutable_msg_virt_csr()->::BasicCSR::MergeFrom(from._internal_msg_virt_csr());
  }
}

void VirtBasicCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VirtBasicCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtBasicCSR::CopyFrom(const VirtBasicCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VirtBasicCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtBasicCSR::IsInitialized() const {
  return true;
}

void VirtBasicCSR::InternalSwap(VirtBasicCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_nonvirt_csr_, other->msg_nonvirt_csr_);
  swap(msg_virt_csr_, other->msg_virt_csr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtBasicCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseStatusCSR::InitAsDefaultInstance() {
}
class BaseStatusCSR::_Internal {
 public:
};

BaseStatusCSR::BaseStatusCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseStatusCSR)
}
BaseStatusCSR::BaseStatusCSR(const BaseStatusCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_sstatus_write_mask_, &from.msg_sstatus_write_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_has_page_) -
    reinterpret_cast<char*>(&msg_sstatus_write_mask_)) + sizeof(msg_has_page_));
  // @@protoc_insertion_point(copy_constructor:BaseStatusCSR)
}

void BaseStatusCSR::SharedCtor() {
  ::memset(&msg_sstatus_write_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_has_page_) -
      reinterpret_cast<char*>(&msg_sstatus_write_mask_)) + sizeof(msg_has_page_));
}

BaseStatusCSR::~BaseStatusCSR() {
  // @@protoc_insertion_point(destructor:BaseStatusCSR)
  SharedDtor();
}

void BaseStatusCSR::SharedDtor() {
}

void BaseStatusCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseStatusCSR& BaseStatusCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseStatusCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void BaseStatusCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseStatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_sstatus_write_mask_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_has_page_) -
      reinterpret_cast<char*>(&msg_sstatus_write_mask_)) + sizeof(msg_has_page_));
  _internal_metadata_.Clear();
}

const char* BaseStatusCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool msg_has_page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_has_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_sstatus_write_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_sstatus_write_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_sstatus_read_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_sstatus_read_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseStatusCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseStatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool msg_has_page = 1;
  if (this->msg_has_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_msg_has_page(), target);
  }

  // uint64 msg_sstatus_write_mask = 2;
  if (this->msg_sstatus_write_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_sstatus_write_mask(), target);
  }

  // uint64 msg_sstatus_read_mask = 3;
  if (this->msg_sstatus_read_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_sstatus_read_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseStatusCSR)
  return target;
}

size_t BaseStatusCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BaseStatusCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_sstatus_write_mask = 2;
  if (this->msg_sstatus_write_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_sstatus_write_mask());
  }

  // uint64 msg_sstatus_read_mask = 3;
  if (this->msg_sstatus_read_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_sstatus_read_mask());
  }

  // bool msg_has_page = 1;
  if (this->msg_has_page() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseStatusCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BaseStatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseStatusCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseStatusCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseStatusCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseStatusCSR)
    MergeFrom(*source);
  }
}

void BaseStatusCSR::MergeFrom(const BaseStatusCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BaseStatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_sstatus_write_mask() != 0) {
    _internal_set_msg_sstatus_write_mask(from._internal_msg_sstatus_write_mask());
  }
  if (from.msg_sstatus_read_mask() != 0) {
    _internal_set_msg_sstatus_read_mask(from._internal_msg_sstatus_read_mask());
  }
  if (from.msg_has_page() != 0) {
    _internal_set_msg_has_page(from._internal_msg_has_page());
  }
}

void BaseStatusCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BaseStatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStatusCSR::CopyFrom(const BaseStatusCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseStatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStatusCSR::IsInitialized() const {
  return true;
}

void BaseStatusCSR::InternalSwap(BaseStatusCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_sstatus_write_mask_, other->msg_sstatus_write_mask_);
  swap(msg_sstatus_read_mask_, other->msg_sstatus_read_mask_);
  swap(msg_has_page_, other->msg_has_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStatusCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MstatusCSR::InitAsDefaultInstance() {
  ::_MstatusCSR_default_instance_._instance.get_mutable()->msg_base_status_csr_ = const_cast< ::BaseStatusCSR*>(
      ::BaseStatusCSR::internal_default_instance());
}
class MstatusCSR::_Internal {
 public:
  static const ::BaseStatusCSR& msg_base_status_csr(const MstatusCSR* msg);
};

const ::BaseStatusCSR&
MstatusCSR::_Internal::msg_base_status_csr(const MstatusCSR* msg) {
  return *msg->msg_base_status_csr_;
}
MstatusCSR::MstatusCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MstatusCSR)
}
MstatusCSR::MstatusCSR(const MstatusCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_base_status_csr()) {
    msg_base_status_csr_ = new ::BaseStatusCSR(*from.msg_base_status_csr_);
  } else {
    msg_base_status_csr_ = nullptr;
  }
  msg_val_ = from.msg_val_;
  // @@protoc_insertion_point(copy_constructor:MstatusCSR)
}

void MstatusCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MstatusCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_base_status_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_val_) -
      reinterpret_cast<char*>(&msg_base_status_csr_)) + sizeof(msg_val_));
}

MstatusCSR::~MstatusCSR() {
  // @@protoc_insertion_point(destructor:MstatusCSR)
  SharedDtor();
}

void MstatusCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_base_status_csr_;
}

void MstatusCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MstatusCSR& MstatusCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MstatusCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void MstatusCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:MstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
  msg_val_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MstatusCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BaseStatusCSR msg_base_status_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_base_status_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MstatusCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_base_status_csr(this), target, stream);
  }

  // uint64 msg_val = 2;
  if (this->msg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MstatusCSR)
  return target;
}

size_t MstatusCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MstatusCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_base_status_csr_);
  }

  // uint64 msg_val = 2;
  if (this->msg_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MstatusCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const MstatusCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MstatusCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MstatusCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MstatusCSR)
    MergeFrom(*source);
  }
}

void MstatusCSR::MergeFrom(const MstatusCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_base_status_csr()) {
    _internal_mutable_msg_base_status_csr()->::BaseStatusCSR::MergeFrom(from._internal_msg_base_status_csr());
  }
  if (from.msg_val() != 0) {
    _internal_set_msg_val(from._internal_msg_val());
  }
}

void MstatusCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MstatusCSR::CopyFrom(const MstatusCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MstatusCSR::IsInitialized() const {
  return true;
}

void MstatusCSR::InternalSwap(MstatusCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_base_status_csr_, other->msg_base_status_csr_);
  swap(msg_val_, other->msg_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MstatusCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SstatusProxyCSR::InitAsDefaultInstance() {
  ::_SstatusProxyCSR_default_instance_._instance.get_mutable()->msg_base_status_csr_ = const_cast< ::BaseStatusCSR*>(
      ::BaseStatusCSR::internal_default_instance());
  ::_SstatusProxyCSR_default_instance_._instance.get_mutable()->msg_mstatus_csr_ = const_cast< ::MstatusCSR*>(
      ::MstatusCSR::internal_default_instance());
}
class SstatusProxyCSR::_Internal {
 public:
  static const ::BaseStatusCSR& msg_base_status_csr(const SstatusProxyCSR* msg);
  static const ::MstatusCSR& msg_mstatus_csr(const SstatusProxyCSR* msg);
};

const ::BaseStatusCSR&
SstatusProxyCSR::_Internal::msg_base_status_csr(const SstatusProxyCSR* msg) {
  return *msg->msg_base_status_csr_;
}
const ::MstatusCSR&
SstatusProxyCSR::_Internal::msg_mstatus_csr(const SstatusProxyCSR* msg) {
  return *msg->msg_mstatus_csr_;
}
SstatusProxyCSR::SstatusProxyCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SstatusProxyCSR)
}
SstatusProxyCSR::SstatusProxyCSR(const SstatusProxyCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_base_status_csr()) {
    msg_base_status_csr_ = new ::BaseStatusCSR(*from.msg_base_status_csr_);
  } else {
    msg_base_status_csr_ = nullptr;
  }
  if (from._internal_has_msg_mstatus_csr()) {
    msg_mstatus_csr_ = new ::MstatusCSR(*from.msg_mstatus_csr_);
  } else {
    msg_mstatus_csr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SstatusProxyCSR)
}

void SstatusProxyCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SstatusProxyCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_base_status_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_mstatus_csr_) -
      reinterpret_cast<char*>(&msg_base_status_csr_)) + sizeof(msg_mstatus_csr_));
}

SstatusProxyCSR::~SstatusProxyCSR() {
  // @@protoc_insertion_point(destructor:SstatusProxyCSR)
  SharedDtor();
}

void SstatusProxyCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_base_status_csr_;
  if (this != internal_default_instance()) delete msg_mstatus_csr_;
}

void SstatusProxyCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SstatusProxyCSR& SstatusProxyCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SstatusProxyCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void SstatusProxyCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:SstatusProxyCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mstatus_csr_ != nullptr) {
    delete msg_mstatus_csr_;
  }
  msg_mstatus_csr_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SstatusProxyCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BaseStatusCSR msg_base_status_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_base_status_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MstatusCSR msg_mstatus_csr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mstatus_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SstatusProxyCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SstatusProxyCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_base_status_csr(this), target, stream);
  }

  // .MstatusCSR msg_mstatus_csr = 2;
  if (this->has_msg_mstatus_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_mstatus_csr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SstatusProxyCSR)
  return target;
}

size_t SstatusProxyCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SstatusProxyCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_base_status_csr_);
  }

  // .MstatusCSR msg_mstatus_csr = 2;
  if (this->has_msg_mstatus_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mstatus_csr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SstatusProxyCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SstatusProxyCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const SstatusProxyCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SstatusProxyCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SstatusProxyCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SstatusProxyCSR)
    MergeFrom(*source);
  }
}

void SstatusProxyCSR::MergeFrom(const SstatusProxyCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SstatusProxyCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_base_status_csr()) {
    _internal_mutable_msg_base_status_csr()->::BaseStatusCSR::MergeFrom(from._internal_msg_base_status_csr());
  }
  if (from.has_msg_mstatus_csr()) {
    _internal_mutable_msg_mstatus_csr()->::MstatusCSR::MergeFrom(from._internal_msg_mstatus_csr());
  }
}

void SstatusProxyCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SstatusProxyCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SstatusProxyCSR::CopyFrom(const SstatusProxyCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SstatusProxyCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SstatusProxyCSR::IsInitialized() const {
  return true;
}

void SstatusProxyCSR::InternalSwap(SstatusProxyCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_base_status_csr_, other->msg_base_status_csr_);
  swap(msg_mstatus_csr_, other->msg_mstatus_csr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SstatusProxyCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VsstatusCSR::InitAsDefaultInstance() {
  ::_VsstatusCSR_default_instance_._instance.get_mutable()->msg_base_status_csr_ = const_cast< ::BaseStatusCSR*>(
      ::BaseStatusCSR::internal_default_instance());
}
class VsstatusCSR::_Internal {
 public:
  static const ::BaseStatusCSR& msg_base_status_csr(const VsstatusCSR* msg);
};

const ::BaseStatusCSR&
VsstatusCSR::_Internal::msg_base_status_csr(const VsstatusCSR* msg) {
  return *msg->msg_base_status_csr_;
}
VsstatusCSR::VsstatusCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VsstatusCSR)
}
VsstatusCSR::VsstatusCSR(const VsstatusCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_base_status_csr()) {
    msg_base_status_csr_ = new ::BaseStatusCSR(*from.msg_base_status_csr_);
  } else {
    msg_base_status_csr_ = nullptr;
  }
  msg_val_ = from.msg_val_;
  // @@protoc_insertion_point(copy_constructor:VsstatusCSR)
}

void VsstatusCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VsstatusCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_base_status_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_val_) -
      reinterpret_cast<char*>(&msg_base_status_csr_)) + sizeof(msg_val_));
}

VsstatusCSR::~VsstatusCSR() {
  // @@protoc_insertion_point(destructor:VsstatusCSR)
  SharedDtor();
}

void VsstatusCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_base_status_csr_;
}

void VsstatusCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VsstatusCSR& VsstatusCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VsstatusCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void VsstatusCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:VsstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_base_status_csr_ != nullptr) {
    delete msg_base_status_csr_;
  }
  msg_base_status_csr_ = nullptr;
  msg_val_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* VsstatusCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BaseStatusCSR msg_base_status_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_base_status_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VsstatusCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VsstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_base_status_csr(this), target, stream);
  }

  // uint64 msg_val = 2;
  if (this->msg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VsstatusCSR)
  return target;
}

size_t VsstatusCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VsstatusCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BaseStatusCSR msg_base_status_csr = 1;
  if (this->has_msg_base_status_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_base_status_csr_);
  }

  // uint64 msg_val = 2;
  if (this->msg_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VsstatusCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VsstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const VsstatusCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VsstatusCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VsstatusCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VsstatusCSR)
    MergeFrom(*source);
  }
}

void VsstatusCSR::MergeFrom(const VsstatusCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VsstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_base_status_csr()) {
    _internal_mutable_msg_base_status_csr()->::BaseStatusCSR::MergeFrom(from._internal_msg_base_status_csr());
  }
  if (from.msg_val() != 0) {
    _internal_set_msg_val(from._internal_msg_val());
  }
}

void VsstatusCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VsstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VsstatusCSR::CopyFrom(const VsstatusCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VsstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VsstatusCSR::IsInitialized() const {
  return true;
}

void VsstatusCSR::InternalSwap(VsstatusCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_base_status_csr_, other->msg_base_status_csr_);
  swap(msg_val_, other->msg_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VsstatusCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SstatusCSR::InitAsDefaultInstance() {
  ::_SstatusCSR_default_instance_._instance.get_mutable()->msg_orig_sstatus_ = const_cast< ::SstatusProxyCSR*>(
      ::SstatusProxyCSR::internal_default_instance());
  ::_SstatusCSR_default_instance_._instance.get_mutable()->msg_virt_sstatus_ = const_cast< ::VsstatusCSR*>(
      ::VsstatusCSR::internal_default_instance());
}
class SstatusCSR::_Internal {
 public:
  static const ::SstatusProxyCSR& msg_orig_sstatus(const SstatusCSR* msg);
  static const ::VsstatusCSR& msg_virt_sstatus(const SstatusCSR* msg);
};

const ::SstatusProxyCSR&
SstatusCSR::_Internal::msg_orig_sstatus(const SstatusCSR* msg) {
  return *msg->msg_orig_sstatus_;
}
const ::VsstatusCSR&
SstatusCSR::_Internal::msg_virt_sstatus(const SstatusCSR* msg) {
  return *msg->msg_virt_sstatus_;
}
SstatusCSR::SstatusCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SstatusCSR)
}
SstatusCSR::SstatusCSR(const SstatusCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_orig_sstatus()) {
    msg_orig_sstatus_ = new ::SstatusProxyCSR(*from.msg_orig_sstatus_);
  } else {
    msg_orig_sstatus_ = nullptr;
  }
  if (from._internal_has_msg_virt_sstatus()) {
    msg_virt_sstatus_ = new ::VsstatusCSR(*from.msg_virt_sstatus_);
  } else {
    msg_virt_sstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SstatusCSR)
}

void SstatusCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SstatusCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_orig_sstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_virt_sstatus_) -
      reinterpret_cast<char*>(&msg_orig_sstatus_)) + sizeof(msg_virt_sstatus_));
}

SstatusCSR::~SstatusCSR() {
  // @@protoc_insertion_point(destructor:SstatusCSR)
  SharedDtor();
}

void SstatusCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_orig_sstatus_;
  if (this != internal_default_instance()) delete msg_virt_sstatus_;
}

void SstatusCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SstatusCSR& SstatusCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SstatusCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void SstatusCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:SstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_orig_sstatus_ != nullptr) {
    delete msg_orig_sstatus_;
  }
  msg_orig_sstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_virt_sstatus_ != nullptr) {
    delete msg_virt_sstatus_;
  }
  msg_virt_sstatus_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SstatusCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SstatusProxyCSR msg_orig_sstatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_orig_sstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VsstatusCSR msg_virt_sstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_virt_sstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SstatusCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SstatusCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SstatusProxyCSR msg_orig_sstatus = 1;
  if (this->has_msg_orig_sstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_orig_sstatus(this), target, stream);
  }

  // .VsstatusCSR msg_virt_sstatus = 2;
  if (this->has_msg_virt_sstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_virt_sstatus(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SstatusCSR)
  return target;
}

size_t SstatusCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SstatusCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SstatusProxyCSR msg_orig_sstatus = 1;
  if (this->has_msg_orig_sstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_orig_sstatus_);
  }

  // .VsstatusCSR msg_virt_sstatus = 2;
  if (this->has_msg_virt_sstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_virt_sstatus_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SstatusCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const SstatusCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SstatusCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SstatusCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SstatusCSR)
    MergeFrom(*source);
  }
}

void SstatusCSR::MergeFrom(const SstatusCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SstatusCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_orig_sstatus()) {
    _internal_mutable_msg_orig_sstatus()->::SstatusProxyCSR::MergeFrom(from._internal_msg_orig_sstatus());
  }
  if (from.has_msg_virt_sstatus()) {
    _internal_mutable_msg_virt_sstatus()->::VsstatusCSR::MergeFrom(from._internal_msg_virt_sstatus());
  }
}

void SstatusCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SstatusCSR::CopyFrom(const SstatusCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SstatusCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SstatusCSR::IsInitialized() const {
  return true;
}

void SstatusCSR::InternalSwap(SstatusCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_orig_sstatus_, other->msg_orig_sstatus_);
  swap(msg_virt_sstatus_, other->msg_virt_sstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SstatusCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaskedCSR::InitAsDefaultInstance() {
  ::_MaskedCSR_default_instance_._instance.get_mutable()->msg_basic_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class MaskedCSR::_Internal {
 public:
  static const ::BasicCSR& msg_basic_csr(const MaskedCSR* msg);
};

const ::BasicCSR&
MaskedCSR::_Internal::msg_basic_csr(const MaskedCSR* msg) {
  return *msg->msg_basic_csr_;
}
MaskedCSR::MaskedCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MaskedCSR)
}
MaskedCSR::MaskedCSR(const MaskedCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_basic_csr()) {
    msg_basic_csr_ = new ::BasicCSR(*from.msg_basic_csr_);
  } else {
    msg_basic_csr_ = nullptr;
  }
  msg_mask_ = from.msg_mask_;
  // @@protoc_insertion_point(copy_constructor:MaskedCSR)
}

void MaskedCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaskedCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_basic_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_mask_) -
      reinterpret_cast<char*>(&msg_basic_csr_)) + sizeof(msg_mask_));
}

MaskedCSR::~MaskedCSR() {
  // @@protoc_insertion_point(destructor:MaskedCSR)
  SharedDtor();
}

void MaskedCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_basic_csr_;
}

void MaskedCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaskedCSR& MaskedCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaskedCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void MaskedCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:MaskedCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
  msg_mask_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MaskedCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_basic_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_basic_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaskedCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MaskedCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_basic_csr(this), target, stream);
  }

  // uint64 msg_mask = 2;
  if (this->msg_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MaskedCSR)
  return target;
}

size_t MaskedCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MaskedCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_basic_csr_);
  }

  // uint64 msg_mask = 2;
  if (this->msg_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaskedCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MaskedCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const MaskedCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaskedCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MaskedCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MaskedCSR)
    MergeFrom(*source);
  }
}

void MaskedCSR::MergeFrom(const MaskedCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MaskedCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_basic_csr()) {
    _internal_mutable_msg_basic_csr()->::BasicCSR::MergeFrom(from._internal_msg_basic_csr());
  }
  if (from.msg_mask() != 0) {
    _internal_set_msg_mask(from._internal_msg_mask());
  }
}

void MaskedCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MaskedCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskedCSR::CopyFrom(const MaskedCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MaskedCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskedCSR::IsInitialized() const {
  return true;
}

void MaskedCSR::InternalSwap(MaskedCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_basic_csr_, other->msg_basic_csr_);
  swap(msg_mask_, other->msg_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaskedCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OptionalUInt64::InitAsDefaultInstance() {
}
class OptionalUInt64::_Internal {
 public:
};

OptionalUInt64::OptionalUInt64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OptionalUInt64)
}
OptionalUInt64::OptionalUInt64(const OptionalUInt64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_val_ = from.msg_val_;
  // @@protoc_insertion_point(copy_constructor:OptionalUInt64)
}

void OptionalUInt64::SharedCtor() {
  msg_val_ = PROTOBUF_ULONGLONG(0);
}

OptionalUInt64::~OptionalUInt64() {
  // @@protoc_insertion_point(destructor:OptionalUInt64)
  SharedDtor();
}

void OptionalUInt64::SharedDtor() {
}

void OptionalUInt64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptionalUInt64& OptionalUInt64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OptionalUInt64_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void OptionalUInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:OptionalUInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_val_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* OptionalUInt64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OptionalUInt64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OptionalUInt64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OptionalUInt64)
  return target;
}

size_t OptionalUInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OptionalUInt64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptionalUInt64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OptionalUInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const OptionalUInt64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OptionalUInt64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OptionalUInt64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OptionalUInt64)
    MergeFrom(*source);
  }
}

void OptionalUInt64::MergeFrom(const OptionalUInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OptionalUInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_val() != 0) {
    _internal_set_msg_val(from._internal_msg_val());
  }
}

void OptionalUInt64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OptionalUInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptionalUInt64::CopyFrom(const OptionalUInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OptionalUInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalUInt64::IsInitialized() const {
  return true;
}

void OptionalUInt64::InternalSwap(OptionalUInt64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_val_, other->msg_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalUInt64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SmcntrpmfCSR::InitAsDefaultInstance() {
  ::_SmcntrpmfCSR_default_instance_._instance.get_mutable()->msg_masked_csr_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_SmcntrpmfCSR_default_instance_._instance.get_mutable()->msg_prev_val_ = const_cast< ::OptionalUInt64*>(
      ::OptionalUInt64::internal_default_instance());
}
class SmcntrpmfCSR::_Internal {
 public:
  static const ::MaskedCSR& msg_masked_csr(const SmcntrpmfCSR* msg);
  static const ::OptionalUInt64& msg_prev_val(const SmcntrpmfCSR* msg);
};

const ::MaskedCSR&
SmcntrpmfCSR::_Internal::msg_masked_csr(const SmcntrpmfCSR* msg) {
  return *msg->msg_masked_csr_;
}
const ::OptionalUInt64&
SmcntrpmfCSR::_Internal::msg_prev_val(const SmcntrpmfCSR* msg) {
  return *msg->msg_prev_val_;
}
SmcntrpmfCSR::SmcntrpmfCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SmcntrpmfCSR)
}
SmcntrpmfCSR::SmcntrpmfCSR(const SmcntrpmfCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_masked_csr()) {
    msg_masked_csr_ = new ::MaskedCSR(*from.msg_masked_csr_);
  } else {
    msg_masked_csr_ = nullptr;
  }
  if (from._internal_has_msg_prev_val()) {
    msg_prev_val_ = new ::OptionalUInt64(*from.msg_prev_val_);
  } else {
    msg_prev_val_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SmcntrpmfCSR)
}

void SmcntrpmfCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SmcntrpmfCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_masked_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_prev_val_) -
      reinterpret_cast<char*>(&msg_masked_csr_)) + sizeof(msg_prev_val_));
}

SmcntrpmfCSR::~SmcntrpmfCSR() {
  // @@protoc_insertion_point(destructor:SmcntrpmfCSR)
  SharedDtor();
}

void SmcntrpmfCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_masked_csr_;
  if (this != internal_default_instance()) delete msg_prev_val_;
}

void SmcntrpmfCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SmcntrpmfCSR& SmcntrpmfCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SmcntrpmfCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void SmcntrpmfCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:SmcntrpmfCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_masked_csr_ != nullptr) {
    delete msg_masked_csr_;
  }
  msg_masked_csr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_prev_val_ != nullptr) {
    delete msg_prev_val_;
  }
  msg_prev_val_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SmcntrpmfCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaskedCSR msg_masked_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_masked_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OptionalUInt64 msg_prev_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_prev_val(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SmcntrpmfCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SmcntrpmfCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaskedCSR msg_masked_csr = 1;
  if (this->has_msg_masked_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_masked_csr(this), target, stream);
  }

  // .OptionalUInt64 msg_prev_val = 2;
  if (this->has_msg_prev_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_prev_val(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SmcntrpmfCSR)
  return target;
}

size_t SmcntrpmfCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SmcntrpmfCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaskedCSR msg_masked_csr = 1;
  if (this->has_msg_masked_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_masked_csr_);
  }

  // .OptionalUInt64 msg_prev_val = 2;
  if (this->has_msg_prev_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_prev_val_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmcntrpmfCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SmcntrpmfCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const SmcntrpmfCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SmcntrpmfCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SmcntrpmfCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SmcntrpmfCSR)
    MergeFrom(*source);
  }
}

void SmcntrpmfCSR::MergeFrom(const SmcntrpmfCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SmcntrpmfCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_masked_csr()) {
    _internal_mutable_msg_masked_csr()->::MaskedCSR::MergeFrom(from._internal_msg_masked_csr());
  }
  if (from.has_msg_prev_val()) {
    _internal_mutable_msg_prev_val()->::OptionalUInt64::MergeFrom(from._internal_msg_prev_val());
  }
}

void SmcntrpmfCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SmcntrpmfCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmcntrpmfCSR::CopyFrom(const SmcntrpmfCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SmcntrpmfCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmcntrpmfCSR::IsInitialized() const {
  return true;
}

void SmcntrpmfCSR::InternalSwap(SmcntrpmfCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_masked_csr_, other->msg_masked_csr_);
  swap(msg_prev_val_, other->msg_prev_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmcntrpmfCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WideCntrCSR::InitAsDefaultInstance() {
  ::_WideCntrCSR_default_instance_._instance.get_mutable()->msg_config_csr_ = const_cast< ::SmcntrpmfCSR*>(
      ::SmcntrpmfCSR::internal_default_instance());
}
class WideCntrCSR::_Internal {
 public:
  static const ::SmcntrpmfCSR& msg_config_csr(const WideCntrCSR* msg);
};

const ::SmcntrpmfCSR&
WideCntrCSR::_Internal::msg_config_csr(const WideCntrCSR* msg) {
  return *msg->msg_config_csr_;
}
WideCntrCSR::WideCntrCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WideCntrCSR)
}
WideCntrCSR::WideCntrCSR(const WideCntrCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_config_csr()) {
    msg_config_csr_ = new ::SmcntrpmfCSR(*from.msg_config_csr_);
  } else {
    msg_config_csr_ = nullptr;
  }
  msg_val_ = from.msg_val_;
  // @@protoc_insertion_point(copy_constructor:WideCntrCSR)
}

void WideCntrCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WideCntrCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_config_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_val_) -
      reinterpret_cast<char*>(&msg_config_csr_)) + sizeof(msg_val_));
}

WideCntrCSR::~WideCntrCSR() {
  // @@protoc_insertion_point(destructor:WideCntrCSR)
  SharedDtor();
}

void WideCntrCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_config_csr_;
}

void WideCntrCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WideCntrCSR& WideCntrCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WideCntrCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void WideCntrCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:WideCntrCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_config_csr_ != nullptr) {
    delete msg_config_csr_;
  }
  msg_config_csr_ = nullptr;
  msg_val_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* WideCntrCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SmcntrpmfCSR msg_config_csr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_config_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WideCntrCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WideCntrCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_val(), target);
  }

  // .SmcntrpmfCSR msg_config_csr = 2;
  if (this->has_msg_config_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_config_csr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WideCntrCSR)
  return target;
}

size_t WideCntrCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WideCntrCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SmcntrpmfCSR msg_config_csr = 2;
  if (this->has_msg_config_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_config_csr_);
  }

  // uint64 msg_val = 1;
  if (this->msg_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_val());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WideCntrCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WideCntrCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const WideCntrCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WideCntrCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WideCntrCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WideCntrCSR)
    MergeFrom(*source);
  }
}

void WideCntrCSR::MergeFrom(const WideCntrCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WideCntrCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_config_csr()) {
    _internal_mutable_msg_config_csr()->::SmcntrpmfCSR::MergeFrom(from._internal_msg_config_csr());
  }
  if (from.msg_val() != 0) {
    _internal_set_msg_val(from._internal_msg_val());
  }
}

void WideCntrCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WideCntrCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WideCntrCSR::CopyFrom(const WideCntrCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WideCntrCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WideCntrCSR::IsInitialized() const {
  return true;
}

void WideCntrCSR::InternalSwap(WideCntrCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_config_csr_, other->msg_config_csr_);
  swap(msg_val_, other->msg_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WideCntrCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MedelegCSR::InitAsDefaultInstance() {
  ::_MedelegCSR_default_instance_._instance.get_mutable()->msg_basic_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class MedelegCSR::_Internal {
 public:
  static const ::BasicCSR& msg_basic_csr(const MedelegCSR* msg);
};

const ::BasicCSR&
MedelegCSR::_Internal::msg_basic_csr(const MedelegCSR* msg) {
  return *msg->msg_basic_csr_;
}
MedelegCSR::MedelegCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MedelegCSR)
}
MedelegCSR::MedelegCSR(const MedelegCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_basic_csr()) {
    msg_basic_csr_ = new ::BasicCSR(*from.msg_basic_csr_);
  } else {
    msg_basic_csr_ = nullptr;
  }
  msg_hypervisor_exceptions_ = from.msg_hypervisor_exceptions_;
  // @@protoc_insertion_point(copy_constructor:MedelegCSR)
}

void MedelegCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MedelegCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_basic_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_hypervisor_exceptions_) -
      reinterpret_cast<char*>(&msg_basic_csr_)) + sizeof(msg_hypervisor_exceptions_));
}

MedelegCSR::~MedelegCSR() {
  // @@protoc_insertion_point(destructor:MedelegCSR)
  SharedDtor();
}

void MedelegCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_basic_csr_;
}

void MedelegCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MedelegCSR& MedelegCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MedelegCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void MedelegCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:MedelegCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
  msg_hypervisor_exceptions_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MedelegCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_basic_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_basic_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_hypervisor_exceptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_hypervisor_exceptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MedelegCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MedelegCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_basic_csr(this), target, stream);
  }

  // uint64 msg_hypervisor_exceptions = 2;
  if (this->msg_hypervisor_exceptions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_hypervisor_exceptions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MedelegCSR)
  return target;
}

size_t MedelegCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MedelegCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_basic_csr_);
  }

  // uint64 msg_hypervisor_exceptions = 2;
  if (this->msg_hypervisor_exceptions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_hypervisor_exceptions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MedelegCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MedelegCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const MedelegCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MedelegCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MedelegCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MedelegCSR)
    MergeFrom(*source);
  }
}

void MedelegCSR::MergeFrom(const MedelegCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MedelegCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_basic_csr()) {
    _internal_mutable_msg_basic_csr()->::BasicCSR::MergeFrom(from._internal_msg_basic_csr());
  }
  if (from.msg_hypervisor_exceptions() != 0) {
    _internal_set_msg_hypervisor_exceptions(from._internal_msg_hypervisor_exceptions());
  }
}

void MedelegCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MedelegCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedelegCSR::CopyFrom(const MedelegCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MedelegCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedelegCSR::IsInitialized() const {
  return true;
}

void MedelegCSR::InternalSwap(MedelegCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_basic_csr_, other->msg_basic_csr_);
  swap(msg_hypervisor_exceptions_, other->msg_hypervisor_exceptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MedelegCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HstateenCSR::InitAsDefaultInstance() {
  ::_HstateenCSR_default_instance_._instance.get_mutable()->msg_masked_csr_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
}
class HstateenCSR::_Internal {
 public:
  static const ::MaskedCSR& msg_masked_csr(const HstateenCSR* msg);
};

const ::MaskedCSR&
HstateenCSR::_Internal::msg_masked_csr(const HstateenCSR* msg) {
  return *msg->msg_masked_csr_;
}
HstateenCSR::HstateenCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HstateenCSR)
}
HstateenCSR::HstateenCSR(const HstateenCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_masked_csr()) {
    msg_masked_csr_ = new ::MaskedCSR(*from.msg_masked_csr_);
  } else {
    msg_masked_csr_ = nullptr;
  }
  msg_index_ = from.msg_index_;
  // @@protoc_insertion_point(copy_constructor:HstateenCSR)
}

void HstateenCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HstateenCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_masked_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_index_) -
      reinterpret_cast<char*>(&msg_masked_csr_)) + sizeof(msg_index_));
}

HstateenCSR::~HstateenCSR() {
  // @@protoc_insertion_point(destructor:HstateenCSR)
  SharedDtor();
}

void HstateenCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_masked_csr_;
}

void HstateenCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HstateenCSR& HstateenCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HstateenCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void HstateenCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:HstateenCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_masked_csr_ != nullptr) {
    delete msg_masked_csr_;
  }
  msg_masked_csr_ = nullptr;
  msg_index_ = 0u;
  _internal_metadata_.Clear();
}

const char* HstateenCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaskedCSR msg_masked_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_masked_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HstateenCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HstateenCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaskedCSR msg_masked_csr = 1;
  if (this->has_msg_masked_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_masked_csr(this), target, stream);
  }

  // uint32 msg_index = 2;
  if (this->msg_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HstateenCSR)
  return target;
}

size_t HstateenCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HstateenCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaskedCSR msg_masked_csr = 1;
  if (this->has_msg_masked_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_masked_csr_);
  }

  // uint32 msg_index = 2;
  if (this->msg_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HstateenCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HstateenCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const HstateenCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HstateenCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HstateenCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HstateenCSR)
    MergeFrom(*source);
  }
}

void HstateenCSR::MergeFrom(const HstateenCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HstateenCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_masked_csr()) {
    _internal_mutable_msg_masked_csr()->::MaskedCSR::MergeFrom(from._internal_msg_masked_csr());
  }
  if (from.msg_index() != 0) {
    _internal_set_msg_index(from._internal_msg_index());
  }
}

void HstateenCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HstateenCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HstateenCSR::CopyFrom(const HstateenCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HstateenCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HstateenCSR::IsInitialized() const {
  return true;
}

void HstateenCSR::InternalSwap(HstateenCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_masked_csr_, other->msg_masked_csr_);
  swap(msg_index_, other->msg_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HstateenCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeProxyCSR::InitAsDefaultInstance() {
  ::_TimeProxyCSR_default_instance_._instance.get_mutable()->msg_time_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class TimeProxyCSR::_Internal {
 public:
  static const ::BasicCSR& msg_time(const TimeProxyCSR* msg);
};

const ::BasicCSR&
TimeProxyCSR::_Internal::msg_time(const TimeProxyCSR* msg) {
  return *msg->msg_time_;
}
TimeProxyCSR::TimeProxyCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimeProxyCSR)
}
TimeProxyCSR::TimeProxyCSR(const TimeProxyCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_time()) {
    msg_time_ = new ::BasicCSR(*from.msg_time_);
  } else {
    msg_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TimeProxyCSR)
}

void TimeProxyCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeProxyCSR_arch_2dstate_2eproto.base);
  msg_time_ = nullptr;
}

TimeProxyCSR::~TimeProxyCSR() {
  // @@protoc_insertion_point(destructor:TimeProxyCSR)
  SharedDtor();
}

void TimeProxyCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_time_;
}

void TimeProxyCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeProxyCSR& TimeProxyCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeProxyCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void TimeProxyCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:TimeProxyCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_time_ != nullptr) {
    delete msg_time_;
  }
  msg_time_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TimeProxyCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeProxyCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimeProxyCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_time = 1;
  if (this->has_msg_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimeProxyCSR)
  return target;
}

size_t TimeProxyCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimeProxyCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_time = 1;
  if (this->has_msg_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeProxyCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TimeProxyCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeProxyCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeProxyCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TimeProxyCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TimeProxyCSR)
    MergeFrom(*source);
  }
}

void TimeProxyCSR::MergeFrom(const TimeProxyCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimeProxyCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_time()) {
    _internal_mutable_msg_time()->::BasicCSR::MergeFrom(from._internal_msg_time());
  }
}

void TimeProxyCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TimeProxyCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeProxyCSR::CopyFrom(const TimeProxyCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimeProxyCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeProxyCSR::IsInitialized() const {
  return true;
}

void TimeProxyCSR::InternalSwap(TimeProxyCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_time_, other->msg_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeProxyCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DCSR::InitAsDefaultInstance() {
}
class DCSR::_Internal {
 public:
};

DCSR::DCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DCSR)
}
DCSR::DCSR(const DCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_prv_, &from.msg_prv_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cause_) -
    reinterpret_cast<char*>(&msg_prv_)) + sizeof(msg_cause_));
  // @@protoc_insertion_point(copy_constructor:DCSR)
}

void DCSR::SharedCtor() {
  ::memset(&msg_prv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cause_) -
      reinterpret_cast<char*>(&msg_prv_)) + sizeof(msg_cause_));
}

DCSR::~DCSR() {
  // @@protoc_insertion_point(destructor:DCSR)
  SharedDtor();
}

void DCSR::SharedDtor() {
}

void DCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCSR& DCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void DCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:DCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_prv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cause_) -
      reinterpret_cast<char*>(&msg_prv_)) + sizeof(msg_cause_));
  _internal_metadata_.Clear();
}

const char* DCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msg_prv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_prv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_ebreakm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_ebreakm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_ebreaks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_ebreaks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_ebreaku = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msg_ebreaku_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_ebreakvs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          msg_ebreakvs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_ebreakvu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          msg_ebreakvu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_halt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          msg_halt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_v = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          msg_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_cause = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          msg_cause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_prv = 1;
  if (this->msg_prv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_prv(), target);
  }

  // bool msg_step = 2;
  if (this->msg_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_msg_step(), target);
  }

  // bool msg_ebreakm = 3;
  if (this->msg_ebreakm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_msg_ebreakm(), target);
  }

  // bool msg_ebreaks = 4;
  if (this->msg_ebreaks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_msg_ebreaks(), target);
  }

  // bool msg_ebreaku = 5;
  if (this->msg_ebreaku() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_msg_ebreaku(), target);
  }

  // bool msg_ebreakvs = 6;
  if (this->msg_ebreakvs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_msg_ebreakvs(), target);
  }

  // bool msg_ebreakvu = 7;
  if (this->msg_ebreakvu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_msg_ebreakvu(), target);
  }

  // bool msg_halt = 8;
  if (this->msg_halt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_msg_halt(), target);
  }

  // bool msg_v = 9;
  if (this->msg_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_msg_v(), target);
  }

  // uint32 msg_cause = 10;
  if (this->msg_cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_msg_cause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DCSR)
  return target;
}

size_t DCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 msg_prv = 1;
  if (this->msg_prv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_prv());
  }

  // bool msg_step = 2;
  if (this->msg_step() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_ebreakm = 3;
  if (this->msg_ebreakm() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_ebreaks = 4;
  if (this->msg_ebreaks() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_ebreaku = 5;
  if (this->msg_ebreaku() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_ebreakvs = 6;
  if (this->msg_ebreakvs() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_ebreakvu = 7;
  if (this->msg_ebreakvu() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_halt = 8;
  if (this->msg_halt() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_v = 9;
  if (this->msg_v() != 0) {
    total_size += 1 + 1;
  }

  // uint32 msg_cause = 10;
  if (this->msg_cause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_cause());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const DCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DCSR)
    MergeFrom(*source);
  }
}

void DCSR::MergeFrom(const DCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_prv() != 0) {
    _internal_set_msg_prv(from._internal_msg_prv());
  }
  if (from.msg_step() != 0) {
    _internal_set_msg_step(from._internal_msg_step());
  }
  if (from.msg_ebreakm() != 0) {
    _internal_set_msg_ebreakm(from._internal_msg_ebreakm());
  }
  if (from.msg_ebreaks() != 0) {
    _internal_set_msg_ebreaks(from._internal_msg_ebreaks());
  }
  if (from.msg_ebreaku() != 0) {
    _internal_set_msg_ebreaku(from._internal_msg_ebreaku());
  }
  if (from.msg_ebreakvs() != 0) {
    _internal_set_msg_ebreakvs(from._internal_msg_ebreakvs());
  }
  if (from.msg_ebreakvu() != 0) {
    _internal_set_msg_ebreakvu(from._internal_msg_ebreakvu());
  }
  if (from.msg_halt() != 0) {
    _internal_set_msg_halt(from._internal_msg_halt());
  }
  if (from.msg_v() != 0) {
    _internal_set_msg_v(from._internal_msg_v());
  }
  if (from.msg_cause() != 0) {
    _internal_set_msg_cause(from._internal_msg_cause());
  }
}

void DCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCSR::CopyFrom(const DCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCSR::IsInitialized() const {
  return true;
}

void DCSR::InternalSwap(DCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_prv_, other->msg_prv_);
  swap(msg_step_, other->msg_step_);
  swap(msg_ebreakm_, other->msg_ebreakm_);
  swap(msg_ebreaks_, other->msg_ebreaks_);
  swap(msg_ebreaku_, other->msg_ebreaku_);
  swap(msg_ebreakvs_, other->msg_ebreakvs_);
  swap(msg_ebreakvu_, other->msg_ebreakvu_);
  swap(msg_halt_, other->msg_halt_);
  swap(msg_v_, other->msg_v_);
  swap(msg_cause_, other->msg_cause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PmpCSR::InitAsDefaultInstance() {
  ::_PmpCSR_default_instance_._instance.get_mutable()->msg_basic_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class PmpCSR::_Internal {
 public:
  static const ::BasicCSR& msg_basic_csr(const PmpCSR* msg);
};

const ::BasicCSR&
PmpCSR::_Internal::msg_basic_csr(const PmpCSR* msg) {
  return *msg->msg_basic_csr_;
}
PmpCSR::PmpCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PmpCSR)
}
PmpCSR::PmpCSR(const PmpCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_basic_csr()) {
    msg_basic_csr_ = new ::BasicCSR(*from.msg_basic_csr_);
  } else {
    msg_basic_csr_ = nullptr;
  }
  ::memcpy(&msg_pmpidx_, &from.msg_pmpidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cfg_) -
    reinterpret_cast<char*>(&msg_pmpidx_)) + sizeof(msg_cfg_));
  // @@protoc_insertion_point(copy_constructor:PmpCSR)
}

void PmpCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PmpCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_basic_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cfg_) -
      reinterpret_cast<char*>(&msg_basic_csr_)) + sizeof(msg_cfg_));
}

PmpCSR::~PmpCSR() {
  // @@protoc_insertion_point(destructor:PmpCSR)
  SharedDtor();
}

void PmpCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_basic_csr_;
}

void PmpCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PmpCSR& PmpCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PmpCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void PmpCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:PmpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
  ::memset(&msg_pmpidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cfg_) -
      reinterpret_cast<char*>(&msg_pmpidx_)) + sizeof(msg_cfg_));
  _internal_metadata_.Clear();
}

const char* PmpCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_basic_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_basic_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_cfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_cfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_pmpidx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_pmpidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PmpCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PmpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_basic_csr(this), target, stream);
  }

  // uint32 msg_cfg = 2;
  if (this->msg_cfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_msg_cfg(), target);
  }

  // uint64 msg_pmpidx = 3;
  if (this->msg_pmpidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_pmpidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PmpCSR)
  return target;
}

size_t PmpCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PmpCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_basic_csr_);
  }

  // uint64 msg_pmpidx = 3;
  if (this->msg_pmpidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_pmpidx());
  }

  // uint32 msg_cfg = 2;
  if (this->msg_cfg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_cfg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PmpCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PmpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const PmpCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PmpCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PmpCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PmpCSR)
    MergeFrom(*source);
  }
}

void PmpCSR::MergeFrom(const PmpCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PmpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_basic_csr()) {
    _internal_mutable_msg_basic_csr()->::BasicCSR::MergeFrom(from._internal_msg_basic_csr());
  }
  if (from.msg_pmpidx() != 0) {
    _internal_set_msg_pmpidx(from._internal_msg_pmpidx());
  }
  if (from.msg_cfg() != 0) {
    _internal_set_msg_cfg(from._internal_msg_cfg());
  }
}

void PmpCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PmpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmpCSR::CopyFrom(const PmpCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PmpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmpCSR::IsInitialized() const {
  return true;
}

void PmpCSR::InternalSwap(PmpCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_basic_csr_, other->msg_basic_csr_);
  swap(msg_pmpidx_, other->msg_pmpidx_);
  swap(msg_cfg_, other->msg_cfg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PmpCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StimecmpCSR::InitAsDefaultInstance() {
  ::_StimecmpCSR_default_instance_._instance.get_mutable()->msg_basic_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class StimecmpCSR::_Internal {
 public:
  static const ::BasicCSR& msg_basic_csr(const StimecmpCSR* msg);
};

const ::BasicCSR&
StimecmpCSR::_Internal::msg_basic_csr(const StimecmpCSR* msg) {
  return *msg->msg_basic_csr_;
}
StimecmpCSR::StimecmpCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StimecmpCSR)
}
StimecmpCSR::StimecmpCSR(const StimecmpCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_basic_csr()) {
    msg_basic_csr_ = new ::BasicCSR(*from.msg_basic_csr_);
  } else {
    msg_basic_csr_ = nullptr;
  }
  msg_intr_mask_ = from.msg_intr_mask_;
  // @@protoc_insertion_point(copy_constructor:StimecmpCSR)
}

void StimecmpCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StimecmpCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_basic_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_intr_mask_) -
      reinterpret_cast<char*>(&msg_basic_csr_)) + sizeof(msg_intr_mask_));
}

StimecmpCSR::~StimecmpCSR() {
  // @@protoc_insertion_point(destructor:StimecmpCSR)
  SharedDtor();
}

void StimecmpCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_basic_csr_;
}

void StimecmpCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StimecmpCSR& StimecmpCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StimecmpCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void StimecmpCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:StimecmpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_basic_csr_ != nullptr) {
    delete msg_basic_csr_;
  }
  msg_basic_csr_ = nullptr;
  msg_intr_mask_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* StimecmpCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasicCSR msg_basic_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_basic_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_intr_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_intr_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StimecmpCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StimecmpCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_basic_csr(this), target, stream);
  }

  // uint64 msg_intr_mask = 2;
  if (this->msg_intr_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_intr_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StimecmpCSR)
  return target;
}

size_t StimecmpCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StimecmpCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasicCSR msg_basic_csr = 1;
  if (this->has_msg_basic_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_basic_csr_);
  }

  // uint64 msg_intr_mask = 2;
  if (this->msg_intr_mask() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_intr_mask());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StimecmpCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StimecmpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const StimecmpCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StimecmpCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StimecmpCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StimecmpCSR)
    MergeFrom(*source);
  }
}

void StimecmpCSR::MergeFrom(const StimecmpCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StimecmpCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_basic_csr()) {
    _internal_mutable_msg_basic_csr()->::BasicCSR::MergeFrom(from._internal_msg_basic_csr());
  }
  if (from.msg_intr_mask() != 0) {
    _internal_set_msg_intr_mask(from._internal_msg_intr_mask());
  }
}

void StimecmpCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StimecmpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StimecmpCSR::CopyFrom(const StimecmpCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StimecmpCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StimecmpCSR::IsInitialized() const {
  return true;
}

void StimecmpCSR::InternalSwap(StimecmpCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_basic_csr_, other->msg_basic_csr_);
  swap(msg_intr_mask_, other->msg_intr_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StimecmpCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HidelegCSR::InitAsDefaultInstance() {
  ::_HidelegCSR_default_instance_._instance.get_mutable()->msg_hideleg_csr_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_HidelegCSR_default_instance_._instance.get_mutable()->msg_mideleg_csr_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
}
class HidelegCSR::_Internal {
 public:
  static const ::MaskedCSR& msg_hideleg_csr(const HidelegCSR* msg);
  static const ::BasicCSR& msg_mideleg_csr(const HidelegCSR* msg);
};

const ::MaskedCSR&
HidelegCSR::_Internal::msg_hideleg_csr(const HidelegCSR* msg) {
  return *msg->msg_hideleg_csr_;
}
const ::BasicCSR&
HidelegCSR::_Internal::msg_mideleg_csr(const HidelegCSR* msg) {
  return *msg->msg_mideleg_csr_;
}
HidelegCSR::HidelegCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HidelegCSR)
}
HidelegCSR::HidelegCSR(const HidelegCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_hideleg_csr()) {
    msg_hideleg_csr_ = new ::MaskedCSR(*from.msg_hideleg_csr_);
  } else {
    msg_hideleg_csr_ = nullptr;
  }
  if (from._internal_has_msg_mideleg_csr()) {
    msg_mideleg_csr_ = new ::BasicCSR(*from.msg_mideleg_csr_);
  } else {
    msg_mideleg_csr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HidelegCSR)
}

void HidelegCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HidelegCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_hideleg_csr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_mideleg_csr_) -
      reinterpret_cast<char*>(&msg_hideleg_csr_)) + sizeof(msg_mideleg_csr_));
}

HidelegCSR::~HidelegCSR() {
  // @@protoc_insertion_point(destructor:HidelegCSR)
  SharedDtor();
}

void HidelegCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_hideleg_csr_;
  if (this != internal_default_instance()) delete msg_mideleg_csr_;
}

void HidelegCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HidelegCSR& HidelegCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HidelegCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void HidelegCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:HidelegCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_hideleg_csr_ != nullptr) {
    delete msg_hideleg_csr_;
  }
  msg_hideleg_csr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mideleg_csr_ != nullptr) {
    delete msg_mideleg_csr_;
  }
  msg_mideleg_csr_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HidelegCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaskedCSR msg_hideleg_csr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hideleg_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mideleg_csr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mideleg_csr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HidelegCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HidelegCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaskedCSR msg_hideleg_csr = 1;
  if (this->has_msg_hideleg_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_hideleg_csr(this), target, stream);
  }

  // .BasicCSR msg_mideleg_csr = 2;
  if (this->has_msg_mideleg_csr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_mideleg_csr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HidelegCSR)
  return target;
}

size_t HidelegCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HidelegCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaskedCSR msg_hideleg_csr = 1;
  if (this->has_msg_hideleg_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hideleg_csr_);
  }

  // .BasicCSR msg_mideleg_csr = 2;
  if (this->has_msg_mideleg_csr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mideleg_csr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HidelegCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HidelegCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const HidelegCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HidelegCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HidelegCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HidelegCSR)
    MergeFrom(*source);
  }
}

void HidelegCSR::MergeFrom(const HidelegCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HidelegCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_hideleg_csr()) {
    _internal_mutable_msg_hideleg_csr()->::MaskedCSR::MergeFrom(from._internal_msg_hideleg_csr());
  }
  if (from.has_msg_mideleg_csr()) {
    _internal_mutable_msg_mideleg_csr()->::BasicCSR::MergeFrom(from._internal_msg_mideleg_csr());
  }
}

void HidelegCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HidelegCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HidelegCSR::CopyFrom(const HidelegCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HidelegCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidelegCSR::IsInitialized() const {
  return true;
}

void HidelegCSR::InternalSwap(HidelegCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_hideleg_csr_, other->msg_hideleg_csr_);
  swap(msg_mideleg_csr_, other->msg_mideleg_csr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HidelegCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void McontextCSR::InitAsDefaultInstance() {
  ::_McontextCSR_default_instance_._instance.get_mutable()->msg_delegate_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
}
class McontextCSR::_Internal {
 public:
  static const ::MaskedCSR& msg_delegate(const McontextCSR* msg);
};

const ::MaskedCSR&
McontextCSR::_Internal::msg_delegate(const McontextCSR* msg) {
  return *msg->msg_delegate_;
}
McontextCSR::McontextCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:McontextCSR)
}
McontextCSR::McontextCSR(const McontextCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_delegate()) {
    msg_delegate_ = new ::MaskedCSR(*from.msg_delegate_);
  } else {
    msg_delegate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:McontextCSR)
}

void McontextCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_McontextCSR_arch_2dstate_2eproto.base);
  msg_delegate_ = nullptr;
}

McontextCSR::~McontextCSR() {
  // @@protoc_insertion_point(destructor:McontextCSR)
  SharedDtor();
}

void McontextCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_delegate_;
}

void McontextCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const McontextCSR& McontextCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_McontextCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void McontextCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:McontextCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_delegate_ != nullptr) {
    delete msg_delegate_;
  }
  msg_delegate_ = nullptr;
  _internal_metadata_.Clear();
}

const char* McontextCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaskedCSR msg_delegate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_delegate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* McontextCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:McontextCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaskedCSR msg_delegate = 2;
  if (this->has_msg_delegate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_delegate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:McontextCSR)
  return target;
}

size_t McontextCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:McontextCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaskedCSR msg_delegate = 2;
  if (this->has_msg_delegate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_delegate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void McontextCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:McontextCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const McontextCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<McontextCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:McontextCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:McontextCSR)
    MergeFrom(*source);
  }
}

void McontextCSR::MergeFrom(const McontextCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:McontextCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_delegate()) {
    _internal_mutable_msg_delegate()->::MaskedCSR::MergeFrom(from._internal_msg_delegate());
  }
}

void McontextCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:McontextCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McontextCSR::CopyFrom(const McontextCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:McontextCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McontextCSR::IsInitialized() const {
  return true;
}

void McontextCSR::InternalSwap(McontextCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_delegate_, other->msg_delegate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata McontextCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HenvcfgCSR::InitAsDefaultInstance() {
  ::_HenvcfgCSR_default_instance_._instance.get_mutable()->msg_henvcfg_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_HenvcfgCSR_default_instance_._instance.get_mutable()->msg_menvcfg_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
}
class HenvcfgCSR::_Internal {
 public:
  static const ::MaskedCSR& msg_henvcfg(const HenvcfgCSR* msg);
  static const ::MaskedCSR& msg_menvcfg(const HenvcfgCSR* msg);
};

const ::MaskedCSR&
HenvcfgCSR::_Internal::msg_henvcfg(const HenvcfgCSR* msg) {
  return *msg->msg_henvcfg_;
}
const ::MaskedCSR&
HenvcfgCSR::_Internal::msg_menvcfg(const HenvcfgCSR* msg) {
  return *msg->msg_menvcfg_;
}
HenvcfgCSR::HenvcfgCSR()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HenvcfgCSR)
}
HenvcfgCSR::HenvcfgCSR(const HenvcfgCSR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_henvcfg()) {
    msg_henvcfg_ = new ::MaskedCSR(*from.msg_henvcfg_);
  } else {
    msg_henvcfg_ = nullptr;
  }
  if (from._internal_has_msg_menvcfg()) {
    msg_menvcfg_ = new ::MaskedCSR(*from.msg_menvcfg_);
  } else {
    msg_menvcfg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HenvcfgCSR)
}

void HenvcfgCSR::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HenvcfgCSR_arch_2dstate_2eproto.base);
  ::memset(&msg_henvcfg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_menvcfg_) -
      reinterpret_cast<char*>(&msg_henvcfg_)) + sizeof(msg_menvcfg_));
}

HenvcfgCSR::~HenvcfgCSR() {
  // @@protoc_insertion_point(destructor:HenvcfgCSR)
  SharedDtor();
}

void HenvcfgCSR::SharedDtor() {
  if (this != internal_default_instance()) delete msg_henvcfg_;
  if (this != internal_default_instance()) delete msg_menvcfg_;
}

void HenvcfgCSR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HenvcfgCSR& HenvcfgCSR::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HenvcfgCSR_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void HenvcfgCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:HenvcfgCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_henvcfg_ != nullptr) {
    delete msg_henvcfg_;
  }
  msg_henvcfg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_menvcfg_ != nullptr) {
    delete msg_menvcfg_;
  }
  msg_menvcfg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HenvcfgCSR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MaskedCSR msg_henvcfg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_henvcfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_menvcfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_menvcfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HenvcfgCSR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HenvcfgCSR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MaskedCSR msg_henvcfg = 1;
  if (this->has_msg_henvcfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg_henvcfg(this), target, stream);
  }

  // .MaskedCSR msg_menvcfg = 2;
  if (this->has_msg_menvcfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_menvcfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HenvcfgCSR)
  return target;
}

size_t HenvcfgCSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HenvcfgCSR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MaskedCSR msg_henvcfg = 1;
  if (this->has_msg_henvcfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_henvcfg_);
  }

  // .MaskedCSR msg_menvcfg = 2;
  if (this->has_msg_menvcfg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_menvcfg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HenvcfgCSR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HenvcfgCSR)
  GOOGLE_DCHECK_NE(&from, this);
  const HenvcfgCSR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HenvcfgCSR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HenvcfgCSR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HenvcfgCSR)
    MergeFrom(*source);
  }
}

void HenvcfgCSR::MergeFrom(const HenvcfgCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HenvcfgCSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_henvcfg()) {
    _internal_mutable_msg_henvcfg()->::MaskedCSR::MergeFrom(from._internal_msg_henvcfg());
  }
  if (from.has_msg_menvcfg()) {
    _internal_mutable_msg_menvcfg()->::MaskedCSR::MergeFrom(from._internal_msg_menvcfg());
  }
}

void HenvcfgCSR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HenvcfgCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HenvcfgCSR::CopyFrom(const HenvcfgCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HenvcfgCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HenvcfgCSR::IsInitialized() const {
  return true;
}

void HenvcfgCSR::InternalSwap(HenvcfgCSR* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_henvcfg_, other->msg_henvcfg_);
  swap(msg_menvcfg_, other->msg_menvcfg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HenvcfgCSR::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Float128::InitAsDefaultInstance() {
}
class Float128::_Internal {
 public:
};

Float128::Float128()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Float128)
}
Float128::Float128(const Float128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_0_, &from.msg_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_1_) -
    reinterpret_cast<char*>(&msg_0_)) + sizeof(msg_1_));
  // @@protoc_insertion_point(copy_constructor:Float128)
}

void Float128::SharedCtor() {
  ::memset(&msg_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_1_) -
      reinterpret_cast<char*>(&msg_0_)) + sizeof(msg_1_));
}

Float128::~Float128() {
  // @@protoc_insertion_point(destructor:Float128)
  SharedDtor();
}

void Float128::SharedDtor() {
}

void Float128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Float128& Float128::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Float128_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void Float128::Clear() {
// @@protoc_insertion_point(message_clear_start:Float128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_1_) -
      reinterpret_cast<char*>(&msg_0_)) + sizeof(msg_1_));
  _internal_metadata_.Clear();
}

const char* Float128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Float128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Float128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_0 = 1;
  if (this->msg_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_0(), target);
  }

  // uint64 msg_1 = 2;
  if (this->msg_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Float128)
  return target;
}

size_t Float128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Float128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_0 = 1;
  if (this->msg_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_0());
  }

  // uint64 msg_1 = 2;
  if (this->msg_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Float128::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Float128)
  GOOGLE_DCHECK_NE(&from, this);
  const Float128* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Float128>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Float128)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Float128)
    MergeFrom(*source);
  }
}

void Float128::MergeFrom(const Float128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Float128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_0() != 0) {
    _internal_set_msg_0(from._internal_msg_0());
  }
  if (from.msg_1() != 0) {
    _internal_set_msg_1(from._internal_msg_1());
  }
}

void Float128::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Float128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float128::CopyFrom(const Float128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Float128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float128::IsInitialized() const {
  return true;
}

void Float128::InternalSwap(Float128* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_0_, other->msg_0_);
  swap(msg_1_, other->msg_1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Float128::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArchState::InitAsDefaultInstance() {
  ::_ArchState_default_instance_._instance.get_mutable()->msg_misa_ = const_cast< ::MisaCSR*>(
      ::MisaCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mstatus_ = const_cast< ::MstatusCSR*>(
      ::MstatusCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mepc_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mtval_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mscratch_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mtvec_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mcause_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_minstret_ = const_cast< ::WideCntrCSR*>(
      ::WideCntrCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mcycle_ = const_cast< ::WideCntrCSR*>(
      ::WideCntrCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_time_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mie_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mip_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_medeleg_ = const_cast< ::MedelegCSR*>(
      ::MedelegCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mcounteren_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_scounteren_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_sepc_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_stval_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_sscratch_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_stvec_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_satp_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_scause_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mtval2_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mtinst_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hstatus_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hideleg_ = const_cast< ::HidelegCSR*>(
      ::HidelegCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hedeleg_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hcounteren_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_htimedelta_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_htval_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_htinst_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hgatp_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_sstatus_ = const_cast< ::SstatusCSR*>(
      ::SstatusCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_dpc_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_dscratch0_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_dscratch1_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_dcsr_ = const_cast< ::DCSR*>(
      ::DCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_tselect_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_scontext_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_hcontext_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mseccfg_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_fflags_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_frm_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_senvcfg_ = const_cast< ::MaskedCSR*>(
      ::MaskedCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_henvcfg_ = const_cast< ::HenvcfgCSR*>(
      ::HenvcfgCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mnscratch_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mnepc_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_mnstatus_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_stimecmp_ = const_cast< ::StimecmpCSR*>(
      ::StimecmpCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_vstimecmp_ = const_cast< ::StimecmpCSR*>(
      ::StimecmpCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_jvt_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_miselect_ = const_cast< ::BasicCSR*>(
      ::BasicCSR::internal_default_instance());
  ::_ArchState_default_instance_._instance.get_mutable()->msg_siselect_ = const_cast< ::VirtBasicCSR*>(
      ::VirtBasicCSR::internal_default_instance());
}
class ArchState::_Internal {
 public:
  static const ::MisaCSR& msg_misa(const ArchState* msg);
  static const ::MstatusCSR& msg_mstatus(const ArchState* msg);
  static const ::BasicCSR& msg_mepc(const ArchState* msg);
  static const ::BasicCSR& msg_mtval(const ArchState* msg);
  static const ::BasicCSR& msg_mscratch(const ArchState* msg);
  static const ::BasicCSR& msg_mtvec(const ArchState* msg);
  static const ::BasicCSR& msg_mcause(const ArchState* msg);
  static const ::WideCntrCSR& msg_minstret(const ArchState* msg);
  static const ::WideCntrCSR& msg_mcycle(const ArchState* msg);
  static const ::BasicCSR& msg_time(const ArchState* msg);
  static const ::BasicCSR& msg_mie(const ArchState* msg);
  static const ::BasicCSR& msg_mip(const ArchState* msg);
  static const ::MedelegCSR& msg_medeleg(const ArchState* msg);
  static const ::MaskedCSR& msg_mcounteren(const ArchState* msg);
  static const ::MaskedCSR& msg_scounteren(const ArchState* msg);
  static const ::VirtBasicCSR& msg_sepc(const ArchState* msg);
  static const ::VirtBasicCSR& msg_stval(const ArchState* msg);
  static const ::VirtBasicCSR& msg_sscratch(const ArchState* msg);
  static const ::VirtBasicCSR& msg_stvec(const ArchState* msg);
  static const ::VirtBasicCSR& msg_satp(const ArchState* msg);
  static const ::VirtBasicCSR& msg_scause(const ArchState* msg);
  static const ::BasicCSR& msg_mtval2(const ArchState* msg);
  static const ::BasicCSR& msg_mtinst(const ArchState* msg);
  static const ::MaskedCSR& msg_hstatus(const ArchState* msg);
  static const ::HidelegCSR& msg_hideleg(const ArchState* msg);
  static const ::MaskedCSR& msg_hedeleg(const ArchState* msg);
  static const ::MaskedCSR& msg_hcounteren(const ArchState* msg);
  static const ::BasicCSR& msg_htimedelta(const ArchState* msg);
  static const ::BasicCSR& msg_htval(const ArchState* msg);
  static const ::BasicCSR& msg_htinst(const ArchState* msg);
  static const ::BasicCSR& msg_hgatp(const ArchState* msg);
  static const ::SstatusCSR& msg_sstatus(const ArchState* msg);
  static const ::BasicCSR& msg_dpc(const ArchState* msg);
  static const ::BasicCSR& msg_dscratch0(const ArchState* msg);
  static const ::BasicCSR& msg_dscratch1(const ArchState* msg);
  static const ::DCSR& msg_dcsr(const ArchState* msg);
  static const ::BasicCSR& msg_tselect(const ArchState* msg);
  static const ::MaskedCSR& msg_scontext(const ArchState* msg);
  static const ::MaskedCSR& msg_hcontext(const ArchState* msg);
  static const ::BasicCSR& msg_mseccfg(const ArchState* msg);
  static const ::MaskedCSR& msg_fflags(const ArchState* msg);
  static const ::MaskedCSR& msg_frm(const ArchState* msg);
  static const ::MaskedCSR& msg_senvcfg(const ArchState* msg);
  static const ::HenvcfgCSR& msg_henvcfg(const ArchState* msg);
  static const ::BasicCSR& msg_mnscratch(const ArchState* msg);
  static const ::BasicCSR& msg_mnepc(const ArchState* msg);
  static const ::BasicCSR& msg_mnstatus(const ArchState* msg);
  static const ::StimecmpCSR& msg_stimecmp(const ArchState* msg);
  static const ::StimecmpCSR& msg_vstimecmp(const ArchState* msg);
  static const ::BasicCSR& msg_jvt(const ArchState* msg);
  static const ::BasicCSR& msg_miselect(const ArchState* msg);
  static const ::VirtBasicCSR& msg_siselect(const ArchState* msg);
};

const ::MisaCSR&
ArchState::_Internal::msg_misa(const ArchState* msg) {
  return *msg->msg_misa_;
}
const ::MstatusCSR&
ArchState::_Internal::msg_mstatus(const ArchState* msg) {
  return *msg->msg_mstatus_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mepc(const ArchState* msg) {
  return *msg->msg_mepc_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mtval(const ArchState* msg) {
  return *msg->msg_mtval_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mscratch(const ArchState* msg) {
  return *msg->msg_mscratch_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mtvec(const ArchState* msg) {
  return *msg->msg_mtvec_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mcause(const ArchState* msg) {
  return *msg->msg_mcause_;
}
const ::WideCntrCSR&
ArchState::_Internal::msg_minstret(const ArchState* msg) {
  return *msg->msg_minstret_;
}
const ::WideCntrCSR&
ArchState::_Internal::msg_mcycle(const ArchState* msg) {
  return *msg->msg_mcycle_;
}
const ::BasicCSR&
ArchState::_Internal::msg_time(const ArchState* msg) {
  return *msg->msg_time_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mie(const ArchState* msg) {
  return *msg->msg_mie_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mip(const ArchState* msg) {
  return *msg->msg_mip_;
}
const ::MedelegCSR&
ArchState::_Internal::msg_medeleg(const ArchState* msg) {
  return *msg->msg_medeleg_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_mcounteren(const ArchState* msg) {
  return *msg->msg_mcounteren_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_scounteren(const ArchState* msg) {
  return *msg->msg_scounteren_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_sepc(const ArchState* msg) {
  return *msg->msg_sepc_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_stval(const ArchState* msg) {
  return *msg->msg_stval_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_sscratch(const ArchState* msg) {
  return *msg->msg_sscratch_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_stvec(const ArchState* msg) {
  return *msg->msg_stvec_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_satp(const ArchState* msg) {
  return *msg->msg_satp_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_scause(const ArchState* msg) {
  return *msg->msg_scause_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mtval2(const ArchState* msg) {
  return *msg->msg_mtval2_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mtinst(const ArchState* msg) {
  return *msg->msg_mtinst_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_hstatus(const ArchState* msg) {
  return *msg->msg_hstatus_;
}
const ::HidelegCSR&
ArchState::_Internal::msg_hideleg(const ArchState* msg) {
  return *msg->msg_hideleg_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_hedeleg(const ArchState* msg) {
  return *msg->msg_hedeleg_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_hcounteren(const ArchState* msg) {
  return *msg->msg_hcounteren_;
}
const ::BasicCSR&
ArchState::_Internal::msg_htimedelta(const ArchState* msg) {
  return *msg->msg_htimedelta_;
}
const ::BasicCSR&
ArchState::_Internal::msg_htval(const ArchState* msg) {
  return *msg->msg_htval_;
}
const ::BasicCSR&
ArchState::_Internal::msg_htinst(const ArchState* msg) {
  return *msg->msg_htinst_;
}
const ::BasicCSR&
ArchState::_Internal::msg_hgatp(const ArchState* msg) {
  return *msg->msg_hgatp_;
}
const ::SstatusCSR&
ArchState::_Internal::msg_sstatus(const ArchState* msg) {
  return *msg->msg_sstatus_;
}
const ::BasicCSR&
ArchState::_Internal::msg_dpc(const ArchState* msg) {
  return *msg->msg_dpc_;
}
const ::BasicCSR&
ArchState::_Internal::msg_dscratch0(const ArchState* msg) {
  return *msg->msg_dscratch0_;
}
const ::BasicCSR&
ArchState::_Internal::msg_dscratch1(const ArchState* msg) {
  return *msg->msg_dscratch1_;
}
const ::DCSR&
ArchState::_Internal::msg_dcsr(const ArchState* msg) {
  return *msg->msg_dcsr_;
}
const ::BasicCSR&
ArchState::_Internal::msg_tselect(const ArchState* msg) {
  return *msg->msg_tselect_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_scontext(const ArchState* msg) {
  return *msg->msg_scontext_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_hcontext(const ArchState* msg) {
  return *msg->msg_hcontext_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mseccfg(const ArchState* msg) {
  return *msg->msg_mseccfg_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_fflags(const ArchState* msg) {
  return *msg->msg_fflags_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_frm(const ArchState* msg) {
  return *msg->msg_frm_;
}
const ::MaskedCSR&
ArchState::_Internal::msg_senvcfg(const ArchState* msg) {
  return *msg->msg_senvcfg_;
}
const ::HenvcfgCSR&
ArchState::_Internal::msg_henvcfg(const ArchState* msg) {
  return *msg->msg_henvcfg_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mnscratch(const ArchState* msg) {
  return *msg->msg_mnscratch_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mnepc(const ArchState* msg) {
  return *msg->msg_mnepc_;
}
const ::BasicCSR&
ArchState::_Internal::msg_mnstatus(const ArchState* msg) {
  return *msg->msg_mnstatus_;
}
const ::StimecmpCSR&
ArchState::_Internal::msg_stimecmp(const ArchState* msg) {
  return *msg->msg_stimecmp_;
}
const ::StimecmpCSR&
ArchState::_Internal::msg_vstimecmp(const ArchState* msg) {
  return *msg->msg_vstimecmp_;
}
const ::BasicCSR&
ArchState::_Internal::msg_jvt(const ArchState* msg) {
  return *msg->msg_jvt_;
}
const ::BasicCSR&
ArchState::_Internal::msg_miselect(const ArchState* msg) {
  return *msg->msg_miselect_;
}
const ::VirtBasicCSR&
ArchState::_Internal::msg_siselect(const ArchState* msg) {
  return *msg->msg_siselect_;
}
ArchState::ArchState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ArchState)
}
ArchState::ArchState(const ArchState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_xpr_(from.msg_xpr_),
      msg_fpr_(from.msg_fpr_),
      msg_mevent_(from.msg_mevent_),
      msg_pmpaddr_(from.msg_pmpaddr_),
      msg_mstateen_(from.msg_mstateen_),
      msg_sstateen_(from.msg_sstateen_),
      msg_hstateen_(from.msg_hstateen_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_misa()) {
    msg_misa_ = new ::MisaCSR(*from.msg_misa_);
  } else {
    msg_misa_ = nullptr;
  }
  if (from._internal_has_msg_mstatus()) {
    msg_mstatus_ = new ::MstatusCSR(*from.msg_mstatus_);
  } else {
    msg_mstatus_ = nullptr;
  }
  if (from._internal_has_msg_mepc()) {
    msg_mepc_ = new ::BasicCSR(*from.msg_mepc_);
  } else {
    msg_mepc_ = nullptr;
  }
  if (from._internal_has_msg_mtval()) {
    msg_mtval_ = new ::BasicCSR(*from.msg_mtval_);
  } else {
    msg_mtval_ = nullptr;
  }
  if (from._internal_has_msg_mscratch()) {
    msg_mscratch_ = new ::BasicCSR(*from.msg_mscratch_);
  } else {
    msg_mscratch_ = nullptr;
  }
  if (from._internal_has_msg_mtvec()) {
    msg_mtvec_ = new ::BasicCSR(*from.msg_mtvec_);
  } else {
    msg_mtvec_ = nullptr;
  }
  if (from._internal_has_msg_mcause()) {
    msg_mcause_ = new ::BasicCSR(*from.msg_mcause_);
  } else {
    msg_mcause_ = nullptr;
  }
  if (from._internal_has_msg_minstret()) {
    msg_minstret_ = new ::WideCntrCSR(*from.msg_minstret_);
  } else {
    msg_minstret_ = nullptr;
  }
  if (from._internal_has_msg_mcycle()) {
    msg_mcycle_ = new ::WideCntrCSR(*from.msg_mcycle_);
  } else {
    msg_mcycle_ = nullptr;
  }
  if (from._internal_has_msg_time()) {
    msg_time_ = new ::BasicCSR(*from.msg_time_);
  } else {
    msg_time_ = nullptr;
  }
  if (from._internal_has_msg_mie()) {
    msg_mie_ = new ::BasicCSR(*from.msg_mie_);
  } else {
    msg_mie_ = nullptr;
  }
  if (from._internal_has_msg_mip()) {
    msg_mip_ = new ::BasicCSR(*from.msg_mip_);
  } else {
    msg_mip_ = nullptr;
  }
  if (from._internal_has_msg_medeleg()) {
    msg_medeleg_ = new ::MedelegCSR(*from.msg_medeleg_);
  } else {
    msg_medeleg_ = nullptr;
  }
  if (from._internal_has_msg_mcounteren()) {
    msg_mcounteren_ = new ::MaskedCSR(*from.msg_mcounteren_);
  } else {
    msg_mcounteren_ = nullptr;
  }
  if (from._internal_has_msg_scounteren()) {
    msg_scounteren_ = new ::MaskedCSR(*from.msg_scounteren_);
  } else {
    msg_scounteren_ = nullptr;
  }
  if (from._internal_has_msg_sepc()) {
    msg_sepc_ = new ::VirtBasicCSR(*from.msg_sepc_);
  } else {
    msg_sepc_ = nullptr;
  }
  if (from._internal_has_msg_stval()) {
    msg_stval_ = new ::VirtBasicCSR(*from.msg_stval_);
  } else {
    msg_stval_ = nullptr;
  }
  if (from._internal_has_msg_sscratch()) {
    msg_sscratch_ = new ::VirtBasicCSR(*from.msg_sscratch_);
  } else {
    msg_sscratch_ = nullptr;
  }
  if (from._internal_has_msg_stvec()) {
    msg_stvec_ = new ::VirtBasicCSR(*from.msg_stvec_);
  } else {
    msg_stvec_ = nullptr;
  }
  if (from._internal_has_msg_satp()) {
    msg_satp_ = new ::VirtBasicCSR(*from.msg_satp_);
  } else {
    msg_satp_ = nullptr;
  }
  if (from._internal_has_msg_scause()) {
    msg_scause_ = new ::VirtBasicCSR(*from.msg_scause_);
  } else {
    msg_scause_ = nullptr;
  }
  if (from._internal_has_msg_mtval2()) {
    msg_mtval2_ = new ::BasicCSR(*from.msg_mtval2_);
  } else {
    msg_mtval2_ = nullptr;
  }
  if (from._internal_has_msg_mtinst()) {
    msg_mtinst_ = new ::BasicCSR(*from.msg_mtinst_);
  } else {
    msg_mtinst_ = nullptr;
  }
  if (from._internal_has_msg_hstatus()) {
    msg_hstatus_ = new ::MaskedCSR(*from.msg_hstatus_);
  } else {
    msg_hstatus_ = nullptr;
  }
  if (from._internal_has_msg_hideleg()) {
    msg_hideleg_ = new ::HidelegCSR(*from.msg_hideleg_);
  } else {
    msg_hideleg_ = nullptr;
  }
  if (from._internal_has_msg_hedeleg()) {
    msg_hedeleg_ = new ::MaskedCSR(*from.msg_hedeleg_);
  } else {
    msg_hedeleg_ = nullptr;
  }
  if (from._internal_has_msg_hcounteren()) {
    msg_hcounteren_ = new ::MaskedCSR(*from.msg_hcounteren_);
  } else {
    msg_hcounteren_ = nullptr;
  }
  if (from._internal_has_msg_htimedelta()) {
    msg_htimedelta_ = new ::BasicCSR(*from.msg_htimedelta_);
  } else {
    msg_htimedelta_ = nullptr;
  }
  if (from._internal_has_msg_htval()) {
    msg_htval_ = new ::BasicCSR(*from.msg_htval_);
  } else {
    msg_htval_ = nullptr;
  }
  if (from._internal_has_msg_htinst()) {
    msg_htinst_ = new ::BasicCSR(*from.msg_htinst_);
  } else {
    msg_htinst_ = nullptr;
  }
  if (from._internal_has_msg_hgatp()) {
    msg_hgatp_ = new ::BasicCSR(*from.msg_hgatp_);
  } else {
    msg_hgatp_ = nullptr;
  }
  if (from._internal_has_msg_sstatus()) {
    msg_sstatus_ = new ::SstatusCSR(*from.msg_sstatus_);
  } else {
    msg_sstatus_ = nullptr;
  }
  if (from._internal_has_msg_dpc()) {
    msg_dpc_ = new ::BasicCSR(*from.msg_dpc_);
  } else {
    msg_dpc_ = nullptr;
  }
  if (from._internal_has_msg_dscratch0()) {
    msg_dscratch0_ = new ::BasicCSR(*from.msg_dscratch0_);
  } else {
    msg_dscratch0_ = nullptr;
  }
  if (from._internal_has_msg_dscratch1()) {
    msg_dscratch1_ = new ::BasicCSR(*from.msg_dscratch1_);
  } else {
    msg_dscratch1_ = nullptr;
  }
  if (from._internal_has_msg_dcsr()) {
    msg_dcsr_ = new ::DCSR(*from.msg_dcsr_);
  } else {
    msg_dcsr_ = nullptr;
  }
  if (from._internal_has_msg_tselect()) {
    msg_tselect_ = new ::BasicCSR(*from.msg_tselect_);
  } else {
    msg_tselect_ = nullptr;
  }
  if (from._internal_has_msg_scontext()) {
    msg_scontext_ = new ::MaskedCSR(*from.msg_scontext_);
  } else {
    msg_scontext_ = nullptr;
  }
  if (from._internal_has_msg_hcontext()) {
    msg_hcontext_ = new ::MaskedCSR(*from.msg_hcontext_);
  } else {
    msg_hcontext_ = nullptr;
  }
  if (from._internal_has_msg_mseccfg()) {
    msg_mseccfg_ = new ::BasicCSR(*from.msg_mseccfg_);
  } else {
    msg_mseccfg_ = nullptr;
  }
  if (from._internal_has_msg_fflags()) {
    msg_fflags_ = new ::MaskedCSR(*from.msg_fflags_);
  } else {
    msg_fflags_ = nullptr;
  }
  if (from._internal_has_msg_frm()) {
    msg_frm_ = new ::MaskedCSR(*from.msg_frm_);
  } else {
    msg_frm_ = nullptr;
  }
  if (from._internal_has_msg_senvcfg()) {
    msg_senvcfg_ = new ::MaskedCSR(*from.msg_senvcfg_);
  } else {
    msg_senvcfg_ = nullptr;
  }
  if (from._internal_has_msg_henvcfg()) {
    msg_henvcfg_ = new ::HenvcfgCSR(*from.msg_henvcfg_);
  } else {
    msg_henvcfg_ = nullptr;
  }
  if (from._internal_has_msg_mnscratch()) {
    msg_mnscratch_ = new ::BasicCSR(*from.msg_mnscratch_);
  } else {
    msg_mnscratch_ = nullptr;
  }
  if (from._internal_has_msg_mnepc()) {
    msg_mnepc_ = new ::BasicCSR(*from.msg_mnepc_);
  } else {
    msg_mnepc_ = nullptr;
  }
  if (from._internal_has_msg_mnstatus()) {
    msg_mnstatus_ = new ::BasicCSR(*from.msg_mnstatus_);
  } else {
    msg_mnstatus_ = nullptr;
  }
  if (from._internal_has_msg_stimecmp()) {
    msg_stimecmp_ = new ::StimecmpCSR(*from.msg_stimecmp_);
  } else {
    msg_stimecmp_ = nullptr;
  }
  if (from._internal_has_msg_vstimecmp()) {
    msg_vstimecmp_ = new ::StimecmpCSR(*from.msg_vstimecmp_);
  } else {
    msg_vstimecmp_ = nullptr;
  }
  if (from._internal_has_msg_jvt()) {
    msg_jvt_ = new ::BasicCSR(*from.msg_jvt_);
  } else {
    msg_jvt_ = nullptr;
  }
  if (from._internal_has_msg_miselect()) {
    msg_miselect_ = new ::BasicCSR(*from.msg_miselect_);
  } else {
    msg_miselect_ = nullptr;
  }
  if (from._internal_has_msg_siselect()) {
    msg_siselect_ = new ::VirtBasicCSR(*from.msg_siselect_);
  } else {
    msg_siselect_ = nullptr;
  }
  ::memcpy(&msg_pc_, &from.msg_pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_last_inst_xlen_) -
    reinterpret_cast<char*>(&msg_pc_)) + sizeof(msg_last_inst_xlen_));
  // @@protoc_insertion_point(copy_constructor:ArchState)
}

void ArchState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArchState_arch_2dstate_2eproto.base);
  ::memset(&msg_misa_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_last_inst_xlen_) -
      reinterpret_cast<char*>(&msg_misa_)) + sizeof(msg_last_inst_xlen_));
}

ArchState::~ArchState() {
  // @@protoc_insertion_point(destructor:ArchState)
  SharedDtor();
}

void ArchState::SharedDtor() {
  if (this != internal_default_instance()) delete msg_misa_;
  if (this != internal_default_instance()) delete msg_mstatus_;
  if (this != internal_default_instance()) delete msg_mepc_;
  if (this != internal_default_instance()) delete msg_mtval_;
  if (this != internal_default_instance()) delete msg_mscratch_;
  if (this != internal_default_instance()) delete msg_mtvec_;
  if (this != internal_default_instance()) delete msg_mcause_;
  if (this != internal_default_instance()) delete msg_minstret_;
  if (this != internal_default_instance()) delete msg_mcycle_;
  if (this != internal_default_instance()) delete msg_time_;
  if (this != internal_default_instance()) delete msg_mie_;
  if (this != internal_default_instance()) delete msg_mip_;
  if (this != internal_default_instance()) delete msg_medeleg_;
  if (this != internal_default_instance()) delete msg_mcounteren_;
  if (this != internal_default_instance()) delete msg_scounteren_;
  if (this != internal_default_instance()) delete msg_sepc_;
  if (this != internal_default_instance()) delete msg_stval_;
  if (this != internal_default_instance()) delete msg_sscratch_;
  if (this != internal_default_instance()) delete msg_stvec_;
  if (this != internal_default_instance()) delete msg_satp_;
  if (this != internal_default_instance()) delete msg_scause_;
  if (this != internal_default_instance()) delete msg_mtval2_;
  if (this != internal_default_instance()) delete msg_mtinst_;
  if (this != internal_default_instance()) delete msg_hstatus_;
  if (this != internal_default_instance()) delete msg_hideleg_;
  if (this != internal_default_instance()) delete msg_hedeleg_;
  if (this != internal_default_instance()) delete msg_hcounteren_;
  if (this != internal_default_instance()) delete msg_htimedelta_;
  if (this != internal_default_instance()) delete msg_htval_;
  if (this != internal_default_instance()) delete msg_htinst_;
  if (this != internal_default_instance()) delete msg_hgatp_;
  if (this != internal_default_instance()) delete msg_sstatus_;
  if (this != internal_default_instance()) delete msg_dpc_;
  if (this != internal_default_instance()) delete msg_dscratch0_;
  if (this != internal_default_instance()) delete msg_dscratch1_;
  if (this != internal_default_instance()) delete msg_dcsr_;
  if (this != internal_default_instance()) delete msg_tselect_;
  if (this != internal_default_instance()) delete msg_scontext_;
  if (this != internal_default_instance()) delete msg_hcontext_;
  if (this != internal_default_instance()) delete msg_mseccfg_;
  if (this != internal_default_instance()) delete msg_fflags_;
  if (this != internal_default_instance()) delete msg_frm_;
  if (this != internal_default_instance()) delete msg_senvcfg_;
  if (this != internal_default_instance()) delete msg_henvcfg_;
  if (this != internal_default_instance()) delete msg_mnscratch_;
  if (this != internal_default_instance()) delete msg_mnepc_;
  if (this != internal_default_instance()) delete msg_mnstatus_;
  if (this != internal_default_instance()) delete msg_stimecmp_;
  if (this != internal_default_instance()) delete msg_vstimecmp_;
  if (this != internal_default_instance()) delete msg_jvt_;
  if (this != internal_default_instance()) delete msg_miselect_;
  if (this != internal_default_instance()) delete msg_siselect_;
}

void ArchState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArchState& ArchState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArchState_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void ArchState::Clear() {
// @@protoc_insertion_point(message_clear_start:ArchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_xpr_.Clear();
  msg_fpr_.Clear();
  msg_mevent_.Clear();
  msg_pmpaddr_.Clear();
  msg_mstateen_.Clear();
  msg_sstateen_.Clear();
  msg_hstateen_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_misa_ != nullptr) {
    delete msg_misa_;
  }
  msg_misa_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mstatus_ != nullptr) {
    delete msg_mstatus_;
  }
  msg_mstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mepc_ != nullptr) {
    delete msg_mepc_;
  }
  msg_mepc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mtval_ != nullptr) {
    delete msg_mtval_;
  }
  msg_mtval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mscratch_ != nullptr) {
    delete msg_mscratch_;
  }
  msg_mscratch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mtvec_ != nullptr) {
    delete msg_mtvec_;
  }
  msg_mtvec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mcause_ != nullptr) {
    delete msg_mcause_;
  }
  msg_mcause_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_minstret_ != nullptr) {
    delete msg_minstret_;
  }
  msg_minstret_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mcycle_ != nullptr) {
    delete msg_mcycle_;
  }
  msg_mcycle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_time_ != nullptr) {
    delete msg_time_;
  }
  msg_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mie_ != nullptr) {
    delete msg_mie_;
  }
  msg_mie_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mip_ != nullptr) {
    delete msg_mip_;
  }
  msg_mip_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_medeleg_ != nullptr) {
    delete msg_medeleg_;
  }
  msg_medeleg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mcounteren_ != nullptr) {
    delete msg_mcounteren_;
  }
  msg_mcounteren_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_scounteren_ != nullptr) {
    delete msg_scounteren_;
  }
  msg_scounteren_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_sepc_ != nullptr) {
    delete msg_sepc_;
  }
  msg_sepc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_stval_ != nullptr) {
    delete msg_stval_;
  }
  msg_stval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_sscratch_ != nullptr) {
    delete msg_sscratch_;
  }
  msg_sscratch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_stvec_ != nullptr) {
    delete msg_stvec_;
  }
  msg_stvec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_satp_ != nullptr) {
    delete msg_satp_;
  }
  msg_satp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_scause_ != nullptr) {
    delete msg_scause_;
  }
  msg_scause_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mtval2_ != nullptr) {
    delete msg_mtval2_;
  }
  msg_mtval2_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mtinst_ != nullptr) {
    delete msg_mtinst_;
  }
  msg_mtinst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hstatus_ != nullptr) {
    delete msg_hstatus_;
  }
  msg_hstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hideleg_ != nullptr) {
    delete msg_hideleg_;
  }
  msg_hideleg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hedeleg_ != nullptr) {
    delete msg_hedeleg_;
  }
  msg_hedeleg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hcounteren_ != nullptr) {
    delete msg_hcounteren_;
  }
  msg_hcounteren_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_htimedelta_ != nullptr) {
    delete msg_htimedelta_;
  }
  msg_htimedelta_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_htval_ != nullptr) {
    delete msg_htval_;
  }
  msg_htval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_htinst_ != nullptr) {
    delete msg_htinst_;
  }
  msg_htinst_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hgatp_ != nullptr) {
    delete msg_hgatp_;
  }
  msg_hgatp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_sstatus_ != nullptr) {
    delete msg_sstatus_;
  }
  msg_sstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_dpc_ != nullptr) {
    delete msg_dpc_;
  }
  msg_dpc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_dscratch0_ != nullptr) {
    delete msg_dscratch0_;
  }
  msg_dscratch0_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_dscratch1_ != nullptr) {
    delete msg_dscratch1_;
  }
  msg_dscratch1_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_dcsr_ != nullptr) {
    delete msg_dcsr_;
  }
  msg_dcsr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_tselect_ != nullptr) {
    delete msg_tselect_;
  }
  msg_tselect_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_scontext_ != nullptr) {
    delete msg_scontext_;
  }
  msg_scontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_hcontext_ != nullptr) {
    delete msg_hcontext_;
  }
  msg_hcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mseccfg_ != nullptr) {
    delete msg_mseccfg_;
  }
  msg_mseccfg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_fflags_ != nullptr) {
    delete msg_fflags_;
  }
  msg_fflags_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_frm_ != nullptr) {
    delete msg_frm_;
  }
  msg_frm_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_senvcfg_ != nullptr) {
    delete msg_senvcfg_;
  }
  msg_senvcfg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_henvcfg_ != nullptr) {
    delete msg_henvcfg_;
  }
  msg_henvcfg_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mnscratch_ != nullptr) {
    delete msg_mnscratch_;
  }
  msg_mnscratch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mnepc_ != nullptr) {
    delete msg_mnepc_;
  }
  msg_mnepc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_mnstatus_ != nullptr) {
    delete msg_mnstatus_;
  }
  msg_mnstatus_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_stimecmp_ != nullptr) {
    delete msg_stimecmp_;
  }
  msg_stimecmp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_vstimecmp_ != nullptr) {
    delete msg_vstimecmp_;
  }
  msg_vstimecmp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_jvt_ != nullptr) {
    delete msg_jvt_;
  }
  msg_jvt_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_miselect_ != nullptr) {
    delete msg_miselect_;
  }
  msg_miselect_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_siselect_ != nullptr) {
    delete msg_siselect_;
  }
  msg_siselect_ = nullptr;
  ::memset(&msg_pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_last_inst_xlen_) -
      reinterpret_cast<char*>(&msg_pc_)) + sizeof(msg_last_inst_xlen_));
  _internal_metadata_.Clear();
}

const char* ArchState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_pc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 msg_XPR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_msg_xpr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_msg_xpr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Float128 msg_FPR = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_fpr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 msg_prv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          msg_prv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_prev_prv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          msg_prev_prv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_prv_changed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          msg_prv_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_v_changed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          msg_v_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          msg_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_prev_v = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          msg_prev_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MisaCSR msg_misa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_misa(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MstatusCSR msg_mstatus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mepc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mepc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mtval = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mtval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mscratch = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mscratch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mtvec = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mtvec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mcause = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mcause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WideCntrCSR msg_minstret = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_minstret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .WideCntrCSR msg_mcycle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mcycle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BasicCSR msg_mevent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_mevent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mie = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mie(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mip = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MedelegCSR msg_medeleg = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_medeleg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_mcounteren = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mcounteren(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_scounteren = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_scounteren(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_sepc = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_sepc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_stval = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_stval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_sscratch = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_sscratch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_stvec = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_stvec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_satp = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_satp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_scause = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_scause(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mtval2 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mtval2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mtinst = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mtinst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_hstatus = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HidelegCSR msg_hideleg = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hideleg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_hedeleg = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hedeleg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_hcounteren = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hcounteren(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_htimedelta = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_htimedelta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_htval = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_htval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_htinst = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_htinst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_hgatp = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hgatp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SstatusCSR msg_sstatus = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_sstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_dpc = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_dpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_dscratch0 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_dscratch0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_dscratch1 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_dscratch1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DCSR msg_dcsr = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_dcsr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_tselect = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_tselect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_scontext = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_scontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_hcontext = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_hcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mseccfg = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mseccfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PmpCSR msg_pmpaddr = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_pmpaddr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_fflags = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_fflags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_frm = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_frm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MaskedCSR msg_senvcfg = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_senvcfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .HenvcfgCSR msg_henvcfg = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_henvcfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MaskedCSR msg_mstateen = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_mstateen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<674>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HstateenCSR msg_sstateen = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_sstateen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<682>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .HstateenCSR msg_hstateen = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_hstateen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<690>(ptr));
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mnscratch = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mnscratch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mnepc = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mnepc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_mnstatus = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_mnstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StimecmpCSR msg_stimecmp = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_stimecmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StimecmpCSR msg_vstimecmp = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_vstimecmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_jvt = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_jvt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BasicCSR msg_miselect = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_miselect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VirtBasicCSR msg_siselect = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_siselect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_debug_mode = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          msg_debug_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool msg_serialized = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          msg_serialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_single_step = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          msg_single_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_last_inst_priv = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          msg_last_inst_priv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_last_inst_xlen = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          msg_last_inst_xlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msg_last_inst_flen = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          msg_last_inst_flen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArchState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArchState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_pc = 1;
  if (this->msg_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_pc(), target);
  }

  // repeated uint64 msg_XPR = 2;
  {
    int byte_size = _msg_xpr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_msg_xpr(), byte_size, target);
    }
  }

  // repeated .Float128 msg_FPR = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_fpr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_msg_fpr(i), target, stream);
  }

  // uint64 msg_prv = 4;
  if (this->msg_prv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_msg_prv(), target);
  }

  // uint64 msg_prev_prv = 5;
  if (this->msg_prev_prv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_msg_prev_prv(), target);
  }

  // bool msg_prv_changed = 6;
  if (this->msg_prv_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_msg_prv_changed(), target);
  }

  // bool msg_v_changed = 7;
  if (this->msg_v_changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_msg_v_changed(), target);
  }

  // bool msg_v = 8;
  if (this->msg_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_msg_v(), target);
  }

  // bool msg_prev_v = 9;
  if (this->msg_prev_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_msg_prev_v(), target);
  }

  // .MisaCSR msg_misa = 10;
  if (this->has_msg_misa()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::msg_misa(this), target, stream);
  }

  // .MstatusCSR msg_mstatus = 11;
  if (this->has_msg_mstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::msg_mstatus(this), target, stream);
  }

  // .BasicCSR msg_mepc = 12;
  if (this->has_msg_mepc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::msg_mepc(this), target, stream);
  }

  // .BasicCSR msg_mtval = 13;
  if (this->has_msg_mtval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::msg_mtval(this), target, stream);
  }

  // .BasicCSR msg_mscratch = 14;
  if (this->has_msg_mscratch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::msg_mscratch(this), target, stream);
  }

  // .BasicCSR msg_mtvec = 15;
  if (this->has_msg_mtvec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::msg_mtvec(this), target, stream);
  }

  // .BasicCSR msg_mcause = 16;
  if (this->has_msg_mcause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::msg_mcause(this), target, stream);
  }

  // .WideCntrCSR msg_minstret = 17;
  if (this->has_msg_minstret()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::msg_minstret(this), target, stream);
  }

  // .WideCntrCSR msg_mcycle = 18;
  if (this->has_msg_mcycle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::msg_mcycle(this), target, stream);
  }

  // .BasicCSR msg_time = 19;
  if (this->has_msg_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::msg_time(this), target, stream);
  }

  // repeated .BasicCSR msg_mevent = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_mevent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_msg_mevent(i), target, stream);
  }

  // .BasicCSR msg_mie = 25;
  if (this->has_msg_mie()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::msg_mie(this), target, stream);
  }

  // .BasicCSR msg_mip = 26;
  if (this->has_msg_mip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::msg_mip(this), target, stream);
  }

  // .MedelegCSR msg_medeleg = 34;
  if (this->has_msg_medeleg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::msg_medeleg(this), target, stream);
  }

  // .MaskedCSR msg_mcounteren = 36;
  if (this->has_msg_mcounteren()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::msg_mcounteren(this), target, stream);
  }

  // .MaskedCSR msg_scounteren = 37;
  if (this->has_msg_scounteren()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::msg_scounteren(this), target, stream);
  }

  // .VirtBasicCSR msg_sepc = 38;
  if (this->has_msg_sepc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::msg_sepc(this), target, stream);
  }

  // .VirtBasicCSR msg_stval = 39;
  if (this->has_msg_stval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::msg_stval(this), target, stream);
  }

  // .VirtBasicCSR msg_sscratch = 40;
  if (this->has_msg_sscratch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::msg_sscratch(this), target, stream);
  }

  // .VirtBasicCSR msg_stvec = 41;
  if (this->has_msg_stvec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::msg_stvec(this), target, stream);
  }

  // .VirtBasicCSR msg_satp = 42;
  if (this->has_msg_satp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::msg_satp(this), target, stream);
  }

  // .VirtBasicCSR msg_scause = 43;
  if (this->has_msg_scause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::msg_scause(this), target, stream);
  }

  // .BasicCSR msg_mtval2 = 44;
  if (this->has_msg_mtval2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::msg_mtval2(this), target, stream);
  }

  // .BasicCSR msg_mtinst = 45;
  if (this->has_msg_mtinst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::msg_mtinst(this), target, stream);
  }

  // .MaskedCSR msg_hstatus = 46;
  if (this->has_msg_hstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        46, _Internal::msg_hstatus(this), target, stream);
  }

  // .HidelegCSR msg_hideleg = 49;
  if (this->has_msg_hideleg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        49, _Internal::msg_hideleg(this), target, stream);
  }

  // .MaskedCSR msg_hedeleg = 50;
  if (this->has_msg_hedeleg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::msg_hedeleg(this), target, stream);
  }

  // .MaskedCSR msg_hcounteren = 51;
  if (this->has_msg_hcounteren()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::msg_hcounteren(this), target, stream);
  }

  // .BasicCSR msg_htimedelta = 52;
  if (this->has_msg_htimedelta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::msg_htimedelta(this), target, stream);
  }

  // .BasicCSR msg_htval = 53;
  if (this->has_msg_htval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::msg_htval(this), target, stream);
  }

  // .BasicCSR msg_htinst = 54;
  if (this->has_msg_htinst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::msg_htinst(this), target, stream);
  }

  // .BasicCSR msg_hgatp = 55;
  if (this->has_msg_hgatp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::msg_hgatp(this), target, stream);
  }

  // .SstatusCSR msg_sstatus = 56;
  if (this->has_msg_sstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        56, _Internal::msg_sstatus(this), target, stream);
  }

  // .BasicCSR msg_dpc = 57;
  if (this->has_msg_dpc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        57, _Internal::msg_dpc(this), target, stream);
  }

  // .BasicCSR msg_dscratch0 = 58;
  if (this->has_msg_dscratch0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        58, _Internal::msg_dscratch0(this), target, stream);
  }

  // .BasicCSR msg_dscratch1 = 59;
  if (this->has_msg_dscratch1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        59, _Internal::msg_dscratch1(this), target, stream);
  }

  // .DCSR msg_dcsr = 60;
  if (this->has_msg_dcsr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::msg_dcsr(this), target, stream);
  }

  // .BasicCSR msg_tselect = 61;
  if (this->has_msg_tselect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        61, _Internal::msg_tselect(this), target, stream);
  }

  // .MaskedCSR msg_scontext = 66;
  if (this->has_msg_scontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        66, _Internal::msg_scontext(this), target, stream);
  }

  // .MaskedCSR msg_hcontext = 67;
  if (this->has_msg_hcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        67, _Internal::msg_hcontext(this), target, stream);
  }

  // .BasicCSR msg_mseccfg = 69;
  if (this->has_msg_mseccfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::msg_mseccfg(this), target, stream);
  }

  // repeated .PmpCSR msg_pmpaddr = 70;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_pmpaddr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, this->_internal_msg_pmpaddr(i), target, stream);
  }

  // .MaskedCSR msg_fflags = 72;
  if (this->has_msg_fflags()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        72, _Internal::msg_fflags(this), target, stream);
  }

  // .MaskedCSR msg_frm = 73;
  if (this->has_msg_frm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        73, _Internal::msg_frm(this), target, stream);
  }

  // .MaskedCSR msg_senvcfg = 82;
  if (this->has_msg_senvcfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        82, _Internal::msg_senvcfg(this), target, stream);
  }

  // .HenvcfgCSR msg_henvcfg = 83;
  if (this->has_msg_henvcfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        83, _Internal::msg_henvcfg(this), target, stream);
  }

  // repeated .MaskedCSR msg_mstateen = 84;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_mstateen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, this->_internal_msg_mstateen(i), target, stream);
  }

  // repeated .HstateenCSR msg_sstateen = 85;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_sstateen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, this->_internal_msg_sstateen(i), target, stream);
  }

  // repeated .HstateenCSR msg_hstateen = 86;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_hstateen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, this->_internal_msg_hstateen(i), target, stream);
  }

  // .BasicCSR msg_mnscratch = 87;
  if (this->has_msg_mnscratch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        87, _Internal::msg_mnscratch(this), target, stream);
  }

  // .BasicCSR msg_mnepc = 88;
  if (this->has_msg_mnepc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        88, _Internal::msg_mnepc(this), target, stream);
  }

  // .BasicCSR msg_mnstatus = 90;
  if (this->has_msg_mnstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::msg_mnstatus(this), target, stream);
  }

  // .StimecmpCSR msg_stimecmp = 91;
  if (this->has_msg_stimecmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        91, _Internal::msg_stimecmp(this), target, stream);
  }

  // .StimecmpCSR msg_vstimecmp = 92;
  if (this->has_msg_vstimecmp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        92, _Internal::msg_vstimecmp(this), target, stream);
  }

  // .BasicCSR msg_jvt = 93;
  if (this->has_msg_jvt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        93, _Internal::msg_jvt(this), target, stream);
  }

  // .BasicCSR msg_miselect = 94;
  if (this->has_msg_miselect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        94, _Internal::msg_miselect(this), target, stream);
  }

  // .VirtBasicCSR msg_siselect = 101;
  if (this->has_msg_siselect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::msg_siselect(this), target, stream);
  }

  // bool msg_debug_mode = 116;
  if (this->msg_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(116, this->_internal_msg_debug_mode(), target);
  }

  // bool msg_serialized = 117;
  if (this->msg_serialized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_msg_serialized(), target);
  }

  // uint32 msg_single_step = 118;
  if (this->msg_single_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(118, this->_internal_msg_single_step(), target);
  }

  // uint64 msg_last_inst_priv = 119;
  if (this->msg_last_inst_priv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(119, this->_internal_msg_last_inst_priv(), target);
  }

  // int32 msg_last_inst_xlen = 120;
  if (this->msg_last_inst_xlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_msg_last_inst_xlen(), target);
  }

  // int32 msg_last_inst_flen = 121;
  if (this->msg_last_inst_flen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(121, this->_internal_msg_last_inst_flen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArchState)
  return target;
}

size_t ArchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ArchState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 msg_XPR = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->msg_xpr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_xpr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Float128 msg_FPR = 3;
  total_size += 1UL * this->_internal_msg_fpr_size();
  for (const auto& msg : this->msg_fpr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .BasicCSR msg_mevent = 20;
  total_size += 2UL * this->_internal_msg_mevent_size();
  for (const auto& msg : this->msg_mevent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PmpCSR msg_pmpaddr = 70;
  total_size += 2UL * this->_internal_msg_pmpaddr_size();
  for (const auto& msg : this->msg_pmpaddr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MaskedCSR msg_mstateen = 84;
  total_size += 2UL * this->_internal_msg_mstateen_size();
  for (const auto& msg : this->msg_mstateen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HstateenCSR msg_sstateen = 85;
  total_size += 2UL * this->_internal_msg_sstateen_size();
  for (const auto& msg : this->msg_sstateen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .HstateenCSR msg_hstateen = 86;
  total_size += 2UL * this->_internal_msg_hstateen_size();
  for (const auto& msg : this->msg_hstateen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MisaCSR msg_misa = 10;
  if (this->has_msg_misa()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_misa_);
  }

  // .MstatusCSR msg_mstatus = 11;
  if (this->has_msg_mstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mstatus_);
  }

  // .BasicCSR msg_mepc = 12;
  if (this->has_msg_mepc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mepc_);
  }

  // .BasicCSR msg_mtval = 13;
  if (this->has_msg_mtval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mtval_);
  }

  // .BasicCSR msg_mscratch = 14;
  if (this->has_msg_mscratch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mscratch_);
  }

  // .BasicCSR msg_mtvec = 15;
  if (this->has_msg_mtvec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mtvec_);
  }

  // .BasicCSR msg_mcause = 16;
  if (this->has_msg_mcause()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mcause_);
  }

  // .WideCntrCSR msg_minstret = 17;
  if (this->has_msg_minstret()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_minstret_);
  }

  // .WideCntrCSR msg_mcycle = 18;
  if (this->has_msg_mcycle()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mcycle_);
  }

  // .BasicCSR msg_time = 19;
  if (this->has_msg_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_time_);
  }

  // .BasicCSR msg_mie = 25;
  if (this->has_msg_mie()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mie_);
  }

  // .BasicCSR msg_mip = 26;
  if (this->has_msg_mip()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mip_);
  }

  // .MedelegCSR msg_medeleg = 34;
  if (this->has_msg_medeleg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_medeleg_);
  }

  // .MaskedCSR msg_mcounteren = 36;
  if (this->has_msg_mcounteren()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mcounteren_);
  }

  // .MaskedCSR msg_scounteren = 37;
  if (this->has_msg_scounteren()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_scounteren_);
  }

  // .VirtBasicCSR msg_sepc = 38;
  if (this->has_msg_sepc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_sepc_);
  }

  // .VirtBasicCSR msg_stval = 39;
  if (this->has_msg_stval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_stval_);
  }

  // .VirtBasicCSR msg_sscratch = 40;
  if (this->has_msg_sscratch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_sscratch_);
  }

  // .VirtBasicCSR msg_stvec = 41;
  if (this->has_msg_stvec()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_stvec_);
  }

  // .VirtBasicCSR msg_satp = 42;
  if (this->has_msg_satp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_satp_);
  }

  // .VirtBasicCSR msg_scause = 43;
  if (this->has_msg_scause()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_scause_);
  }

  // .BasicCSR msg_mtval2 = 44;
  if (this->has_msg_mtval2()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mtval2_);
  }

  // .BasicCSR msg_mtinst = 45;
  if (this->has_msg_mtinst()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mtinst_);
  }

  // .MaskedCSR msg_hstatus = 46;
  if (this->has_msg_hstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hstatus_);
  }

  // .HidelegCSR msg_hideleg = 49;
  if (this->has_msg_hideleg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hideleg_);
  }

  // .MaskedCSR msg_hedeleg = 50;
  if (this->has_msg_hedeleg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hedeleg_);
  }

  // .MaskedCSR msg_hcounteren = 51;
  if (this->has_msg_hcounteren()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hcounteren_);
  }

  // .BasicCSR msg_htimedelta = 52;
  if (this->has_msg_htimedelta()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_htimedelta_);
  }

  // .BasicCSR msg_htval = 53;
  if (this->has_msg_htval()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_htval_);
  }

  // .BasicCSR msg_htinst = 54;
  if (this->has_msg_htinst()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_htinst_);
  }

  // .BasicCSR msg_hgatp = 55;
  if (this->has_msg_hgatp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hgatp_);
  }

  // .SstatusCSR msg_sstatus = 56;
  if (this->has_msg_sstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_sstatus_);
  }

  // .BasicCSR msg_dpc = 57;
  if (this->has_msg_dpc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_dpc_);
  }

  // .BasicCSR msg_dscratch0 = 58;
  if (this->has_msg_dscratch0()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_dscratch0_);
  }

  // .BasicCSR msg_dscratch1 = 59;
  if (this->has_msg_dscratch1()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_dscratch1_);
  }

  // .DCSR msg_dcsr = 60;
  if (this->has_msg_dcsr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_dcsr_);
  }

  // .BasicCSR msg_tselect = 61;
  if (this->has_msg_tselect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_tselect_);
  }

  // .MaskedCSR msg_scontext = 66;
  if (this->has_msg_scontext()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_scontext_);
  }

  // .MaskedCSR msg_hcontext = 67;
  if (this->has_msg_hcontext()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_hcontext_);
  }

  // .BasicCSR msg_mseccfg = 69;
  if (this->has_msg_mseccfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mseccfg_);
  }

  // .MaskedCSR msg_fflags = 72;
  if (this->has_msg_fflags()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_fflags_);
  }

  // .MaskedCSR msg_frm = 73;
  if (this->has_msg_frm()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_frm_);
  }

  // .MaskedCSR msg_senvcfg = 82;
  if (this->has_msg_senvcfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_senvcfg_);
  }

  // .HenvcfgCSR msg_henvcfg = 83;
  if (this->has_msg_henvcfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_henvcfg_);
  }

  // .BasicCSR msg_mnscratch = 87;
  if (this->has_msg_mnscratch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mnscratch_);
  }

  // .BasicCSR msg_mnepc = 88;
  if (this->has_msg_mnepc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mnepc_);
  }

  // .BasicCSR msg_mnstatus = 90;
  if (this->has_msg_mnstatus()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_mnstatus_);
  }

  // .StimecmpCSR msg_stimecmp = 91;
  if (this->has_msg_stimecmp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_stimecmp_);
  }

  // .StimecmpCSR msg_vstimecmp = 92;
  if (this->has_msg_vstimecmp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_vstimecmp_);
  }

  // .BasicCSR msg_jvt = 93;
  if (this->has_msg_jvt()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_jvt_);
  }

  // .BasicCSR msg_miselect = 94;
  if (this->has_msg_miselect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_miselect_);
  }

  // .VirtBasicCSR msg_siselect = 101;
  if (this->has_msg_siselect()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_siselect_);
  }

  // uint64 msg_pc = 1;
  if (this->msg_pc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_pc());
  }

  // uint64 msg_prv = 4;
  if (this->msg_prv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_prv());
  }

  // uint64 msg_prev_prv = 5;
  if (this->msg_prev_prv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_prev_prv());
  }

  // bool msg_prv_changed = 6;
  if (this->msg_prv_changed() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_v_changed = 7;
  if (this->msg_v_changed() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_v = 8;
  if (this->msg_v() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_prev_v = 9;
  if (this->msg_prev_v() != 0) {
    total_size += 1 + 1;
  }

  // bool msg_debug_mode = 116;
  if (this->msg_debug_mode() != 0) {
    total_size += 2 + 1;
  }

  // bool msg_serialized = 117;
  if (this->msg_serialized() != 0) {
    total_size += 2 + 1;
  }

  // int32 msg_last_inst_flen = 121;
  if (this->msg_last_inst_flen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_last_inst_flen());
  }

  // uint64 msg_last_inst_priv = 119;
  if (this->msg_last_inst_priv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_last_inst_priv());
  }

  // uint32 msg_single_step = 118;
  if (this->msg_single_step() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_single_step());
  }

  // int32 msg_last_inst_xlen = 120;
  if (this->msg_last_inst_xlen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg_last_inst_xlen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArchState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ArchState)
  GOOGLE_DCHECK_NE(&from, this);
  const ArchState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArchState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ArchState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ArchState)
    MergeFrom(*source);
  }
}

void ArchState::MergeFrom(const ArchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ArchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_xpr_.MergeFrom(from.msg_xpr_);
  msg_fpr_.MergeFrom(from.msg_fpr_);
  msg_mevent_.MergeFrom(from.msg_mevent_);
  msg_pmpaddr_.MergeFrom(from.msg_pmpaddr_);
  msg_mstateen_.MergeFrom(from.msg_mstateen_);
  msg_sstateen_.MergeFrom(from.msg_sstateen_);
  msg_hstateen_.MergeFrom(from.msg_hstateen_);
  if (from.has_msg_misa()) {
    _internal_mutable_msg_misa()->::MisaCSR::MergeFrom(from._internal_msg_misa());
  }
  if (from.has_msg_mstatus()) {
    _internal_mutable_msg_mstatus()->::MstatusCSR::MergeFrom(from._internal_msg_mstatus());
  }
  if (from.has_msg_mepc()) {
    _internal_mutable_msg_mepc()->::BasicCSR::MergeFrom(from._internal_msg_mepc());
  }
  if (from.has_msg_mtval()) {
    _internal_mutable_msg_mtval()->::BasicCSR::MergeFrom(from._internal_msg_mtval());
  }
  if (from.has_msg_mscratch()) {
    _internal_mutable_msg_mscratch()->::BasicCSR::MergeFrom(from._internal_msg_mscratch());
  }
  if (from.has_msg_mtvec()) {
    _internal_mutable_msg_mtvec()->::BasicCSR::MergeFrom(from._internal_msg_mtvec());
  }
  if (from.has_msg_mcause()) {
    _internal_mutable_msg_mcause()->::BasicCSR::MergeFrom(from._internal_msg_mcause());
  }
  if (from.has_msg_minstret()) {
    _internal_mutable_msg_minstret()->::WideCntrCSR::MergeFrom(from._internal_msg_minstret());
  }
  if (from.has_msg_mcycle()) {
    _internal_mutable_msg_mcycle()->::WideCntrCSR::MergeFrom(from._internal_msg_mcycle());
  }
  if (from.has_msg_time()) {
    _internal_mutable_msg_time()->::BasicCSR::MergeFrom(from._internal_msg_time());
  }
  if (from.has_msg_mie()) {
    _internal_mutable_msg_mie()->::BasicCSR::MergeFrom(from._internal_msg_mie());
  }
  if (from.has_msg_mip()) {
    _internal_mutable_msg_mip()->::BasicCSR::MergeFrom(from._internal_msg_mip());
  }
  if (from.has_msg_medeleg()) {
    _internal_mutable_msg_medeleg()->::MedelegCSR::MergeFrom(from._internal_msg_medeleg());
  }
  if (from.has_msg_mcounteren()) {
    _internal_mutable_msg_mcounteren()->::MaskedCSR::MergeFrom(from._internal_msg_mcounteren());
  }
  if (from.has_msg_scounteren()) {
    _internal_mutable_msg_scounteren()->::MaskedCSR::MergeFrom(from._internal_msg_scounteren());
  }
  if (from.has_msg_sepc()) {
    _internal_mutable_msg_sepc()->::VirtBasicCSR::MergeFrom(from._internal_msg_sepc());
  }
  if (from.has_msg_stval()) {
    _internal_mutable_msg_stval()->::VirtBasicCSR::MergeFrom(from._internal_msg_stval());
  }
  if (from.has_msg_sscratch()) {
    _internal_mutable_msg_sscratch()->::VirtBasicCSR::MergeFrom(from._internal_msg_sscratch());
  }
  if (from.has_msg_stvec()) {
    _internal_mutable_msg_stvec()->::VirtBasicCSR::MergeFrom(from._internal_msg_stvec());
  }
  if (from.has_msg_satp()) {
    _internal_mutable_msg_satp()->::VirtBasicCSR::MergeFrom(from._internal_msg_satp());
  }
  if (from.has_msg_scause()) {
    _internal_mutable_msg_scause()->::VirtBasicCSR::MergeFrom(from._internal_msg_scause());
  }
  if (from.has_msg_mtval2()) {
    _internal_mutable_msg_mtval2()->::BasicCSR::MergeFrom(from._internal_msg_mtval2());
  }
  if (from.has_msg_mtinst()) {
    _internal_mutable_msg_mtinst()->::BasicCSR::MergeFrom(from._internal_msg_mtinst());
  }
  if (from.has_msg_hstatus()) {
    _internal_mutable_msg_hstatus()->::MaskedCSR::MergeFrom(from._internal_msg_hstatus());
  }
  if (from.has_msg_hideleg()) {
    _internal_mutable_msg_hideleg()->::HidelegCSR::MergeFrom(from._internal_msg_hideleg());
  }
  if (from.has_msg_hedeleg()) {
    _internal_mutable_msg_hedeleg()->::MaskedCSR::MergeFrom(from._internal_msg_hedeleg());
  }
  if (from.has_msg_hcounteren()) {
    _internal_mutable_msg_hcounteren()->::MaskedCSR::MergeFrom(from._internal_msg_hcounteren());
  }
  if (from.has_msg_htimedelta()) {
    _internal_mutable_msg_htimedelta()->::BasicCSR::MergeFrom(from._internal_msg_htimedelta());
  }
  if (from.has_msg_htval()) {
    _internal_mutable_msg_htval()->::BasicCSR::MergeFrom(from._internal_msg_htval());
  }
  if (from.has_msg_htinst()) {
    _internal_mutable_msg_htinst()->::BasicCSR::MergeFrom(from._internal_msg_htinst());
  }
  if (from.has_msg_hgatp()) {
    _internal_mutable_msg_hgatp()->::BasicCSR::MergeFrom(from._internal_msg_hgatp());
  }
  if (from.has_msg_sstatus()) {
    _internal_mutable_msg_sstatus()->::SstatusCSR::MergeFrom(from._internal_msg_sstatus());
  }
  if (from.has_msg_dpc()) {
    _internal_mutable_msg_dpc()->::BasicCSR::MergeFrom(from._internal_msg_dpc());
  }
  if (from.has_msg_dscratch0()) {
    _internal_mutable_msg_dscratch0()->::BasicCSR::MergeFrom(from._internal_msg_dscratch0());
  }
  if (from.has_msg_dscratch1()) {
    _internal_mutable_msg_dscratch1()->::BasicCSR::MergeFrom(from._internal_msg_dscratch1());
  }
  if (from.has_msg_dcsr()) {
    _internal_mutable_msg_dcsr()->::DCSR::MergeFrom(from._internal_msg_dcsr());
  }
  if (from.has_msg_tselect()) {
    _internal_mutable_msg_tselect()->::BasicCSR::MergeFrom(from._internal_msg_tselect());
  }
  if (from.has_msg_scontext()) {
    _internal_mutable_msg_scontext()->::MaskedCSR::MergeFrom(from._internal_msg_scontext());
  }
  if (from.has_msg_hcontext()) {
    _internal_mutable_msg_hcontext()->::MaskedCSR::MergeFrom(from._internal_msg_hcontext());
  }
  if (from.has_msg_mseccfg()) {
    _internal_mutable_msg_mseccfg()->::BasicCSR::MergeFrom(from._internal_msg_mseccfg());
  }
  if (from.has_msg_fflags()) {
    _internal_mutable_msg_fflags()->::MaskedCSR::MergeFrom(from._internal_msg_fflags());
  }
  if (from.has_msg_frm()) {
    _internal_mutable_msg_frm()->::MaskedCSR::MergeFrom(from._internal_msg_frm());
  }
  if (from.has_msg_senvcfg()) {
    _internal_mutable_msg_senvcfg()->::MaskedCSR::MergeFrom(from._internal_msg_senvcfg());
  }
  if (from.has_msg_henvcfg()) {
    _internal_mutable_msg_henvcfg()->::HenvcfgCSR::MergeFrom(from._internal_msg_henvcfg());
  }
  if (from.has_msg_mnscratch()) {
    _internal_mutable_msg_mnscratch()->::BasicCSR::MergeFrom(from._internal_msg_mnscratch());
  }
  if (from.has_msg_mnepc()) {
    _internal_mutable_msg_mnepc()->::BasicCSR::MergeFrom(from._internal_msg_mnepc());
  }
  if (from.has_msg_mnstatus()) {
    _internal_mutable_msg_mnstatus()->::BasicCSR::MergeFrom(from._internal_msg_mnstatus());
  }
  if (from.has_msg_stimecmp()) {
    _internal_mutable_msg_stimecmp()->::StimecmpCSR::MergeFrom(from._internal_msg_stimecmp());
  }
  if (from.has_msg_vstimecmp()) {
    _internal_mutable_msg_vstimecmp()->::StimecmpCSR::MergeFrom(from._internal_msg_vstimecmp());
  }
  if (from.has_msg_jvt()) {
    _internal_mutable_msg_jvt()->::BasicCSR::MergeFrom(from._internal_msg_jvt());
  }
  if (from.has_msg_miselect()) {
    _internal_mutable_msg_miselect()->::BasicCSR::MergeFrom(from._internal_msg_miselect());
  }
  if (from.has_msg_siselect()) {
    _internal_mutable_msg_siselect()->::VirtBasicCSR::MergeFrom(from._internal_msg_siselect());
  }
  if (from.msg_pc() != 0) {
    _internal_set_msg_pc(from._internal_msg_pc());
  }
  if (from.msg_prv() != 0) {
    _internal_set_msg_prv(from._internal_msg_prv());
  }
  if (from.msg_prev_prv() != 0) {
    _internal_set_msg_prev_prv(from._internal_msg_prev_prv());
  }
  if (from.msg_prv_changed() != 0) {
    _internal_set_msg_prv_changed(from._internal_msg_prv_changed());
  }
  if (from.msg_v_changed() != 0) {
    _internal_set_msg_v_changed(from._internal_msg_v_changed());
  }
  if (from.msg_v() != 0) {
    _internal_set_msg_v(from._internal_msg_v());
  }
  if (from.msg_prev_v() != 0) {
    _internal_set_msg_prev_v(from._internal_msg_prev_v());
  }
  if (from.msg_debug_mode() != 0) {
    _internal_set_msg_debug_mode(from._internal_msg_debug_mode());
  }
  if (from.msg_serialized() != 0) {
    _internal_set_msg_serialized(from._internal_msg_serialized());
  }
  if (from.msg_last_inst_flen() != 0) {
    _internal_set_msg_last_inst_flen(from._internal_msg_last_inst_flen());
  }
  if (from.msg_last_inst_priv() != 0) {
    _internal_set_msg_last_inst_priv(from._internal_msg_last_inst_priv());
  }
  if (from.msg_single_step() != 0) {
    _internal_set_msg_single_step(from._internal_msg_single_step());
  }
  if (from.msg_last_inst_xlen() != 0) {
    _internal_set_msg_last_inst_xlen(from._internal_msg_last_inst_xlen());
  }
}

void ArchState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ArchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchState::CopyFrom(const ArchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ArchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchState::IsInitialized() const {
  return true;
}

void ArchState::InternalSwap(ArchState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_xpr_.InternalSwap(&other->msg_xpr_);
  msg_fpr_.InternalSwap(&other->msg_fpr_);
  msg_mevent_.InternalSwap(&other->msg_mevent_);
  msg_pmpaddr_.InternalSwap(&other->msg_pmpaddr_);
  msg_mstateen_.InternalSwap(&other->msg_mstateen_);
  msg_sstateen_.InternalSwap(&other->msg_sstateen_);
  msg_hstateen_.InternalSwap(&other->msg_hstateen_);
  swap(msg_misa_, other->msg_misa_);
  swap(msg_mstatus_, other->msg_mstatus_);
  swap(msg_mepc_, other->msg_mepc_);
  swap(msg_mtval_, other->msg_mtval_);
  swap(msg_mscratch_, other->msg_mscratch_);
  swap(msg_mtvec_, other->msg_mtvec_);
  swap(msg_mcause_, other->msg_mcause_);
  swap(msg_minstret_, other->msg_minstret_);
  swap(msg_mcycle_, other->msg_mcycle_);
  swap(msg_time_, other->msg_time_);
  swap(msg_mie_, other->msg_mie_);
  swap(msg_mip_, other->msg_mip_);
  swap(msg_medeleg_, other->msg_medeleg_);
  swap(msg_mcounteren_, other->msg_mcounteren_);
  swap(msg_scounteren_, other->msg_scounteren_);
  swap(msg_sepc_, other->msg_sepc_);
  swap(msg_stval_, other->msg_stval_);
  swap(msg_sscratch_, other->msg_sscratch_);
  swap(msg_stvec_, other->msg_stvec_);
  swap(msg_satp_, other->msg_satp_);
  swap(msg_scause_, other->msg_scause_);
  swap(msg_mtval2_, other->msg_mtval2_);
  swap(msg_mtinst_, other->msg_mtinst_);
  swap(msg_hstatus_, other->msg_hstatus_);
  swap(msg_hideleg_, other->msg_hideleg_);
  swap(msg_hedeleg_, other->msg_hedeleg_);
  swap(msg_hcounteren_, other->msg_hcounteren_);
  swap(msg_htimedelta_, other->msg_htimedelta_);
  swap(msg_htval_, other->msg_htval_);
  swap(msg_htinst_, other->msg_htinst_);
  swap(msg_hgatp_, other->msg_hgatp_);
  swap(msg_sstatus_, other->msg_sstatus_);
  swap(msg_dpc_, other->msg_dpc_);
  swap(msg_dscratch0_, other->msg_dscratch0_);
  swap(msg_dscratch1_, other->msg_dscratch1_);
  swap(msg_dcsr_, other->msg_dcsr_);
  swap(msg_tselect_, other->msg_tselect_);
  swap(msg_scontext_, other->msg_scontext_);
  swap(msg_hcontext_, other->msg_hcontext_);
  swap(msg_mseccfg_, other->msg_mseccfg_);
  swap(msg_fflags_, other->msg_fflags_);
  swap(msg_frm_, other->msg_frm_);
  swap(msg_senvcfg_, other->msg_senvcfg_);
  swap(msg_henvcfg_, other->msg_henvcfg_);
  swap(msg_mnscratch_, other->msg_mnscratch_);
  swap(msg_mnepc_, other->msg_mnepc_);
  swap(msg_mnstatus_, other->msg_mnstatus_);
  swap(msg_stimecmp_, other->msg_stimecmp_);
  swap(msg_vstimecmp_, other->msg_vstimecmp_);
  swap(msg_jvt_, other->msg_jvt_);
  swap(msg_miselect_, other->msg_miselect_);
  swap(msg_siselect_, other->msg_siselect_);
  swap(msg_pc_, other->msg_pc_);
  swap(msg_prv_, other->msg_prv_);
  swap(msg_prev_prv_, other->msg_prev_prv_);
  swap(msg_prv_changed_, other->msg_prv_changed_);
  swap(msg_v_changed_, other->msg_v_changed_);
  swap(msg_v_, other->msg_v_);
  swap(msg_prev_v_, other->msg_prev_v_);
  swap(msg_debug_mode_, other->msg_debug_mode_);
  swap(msg_serialized_, other->msg_serialized_);
  swap(msg_last_inst_flen_, other->msg_last_inst_flen_);
  swap(msg_last_inst_priv_, other->msg_last_inst_priv_);
  swap(msg_single_step_, other->msg_single_step_);
  swap(msg_last_inst_xlen_, other->msg_last_inst_xlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArchState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Page::InitAsDefaultInstance() {
}
class Page::_Internal {
 public:
};

Page::Page()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Page)
}
Page::Page(const Page& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_bytes().empty()) {
    msg_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_bytes_);
  }
  msg_ppn_ = from.msg_ppn_;
  // @@protoc_insertion_point(copy_constructor:Page)
}

void Page::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Page_arch_2dstate_2eproto.base);
  msg_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_ppn_ = PROTOBUF_ULONGLONG(0);
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:Page)
  SharedDtor();
}

void Page::SharedDtor() {
  msg_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Page::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Page& Page::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Page_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void Page::Clear() {
// @@protoc_insertion_point(message_clear_start:Page)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_ppn_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Page::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_ppn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_ppn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Page::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Page)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_ppn = 1;
  if (this->msg_ppn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_ppn(), target);
  }

  // bytes msg_bytes = 2;
  if (this->msg_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Page)
  return target;
}

size_t Page::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Page)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_bytes = 2;
  if (this->msg_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_bytes());
  }

  // uint64 msg_ppn = 1;
  if (this->msg_ppn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_ppn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Page::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Page)
  GOOGLE_DCHECK_NE(&from, this);
  const Page* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Page>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Page)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Page)
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Page)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_bytes().size() > 0) {

    msg_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_bytes_);
  }
  if (from.msg_ppn() != 0) {
    _internal_set_msg_ppn(from._internal_msg_ppn());
  }
}

void Page::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Page)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {
  return true;
}

void Page::InternalSwap(Page* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_bytes_.Swap(&other->msg_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_ppn_, other->msg_ppn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Page::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UInt64Map::InitAsDefaultInstance() {
}
class UInt64Map::_Internal {
 public:
};

UInt64Map::UInt64Map()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UInt64Map)
}
UInt64Map::UInt64Map(const UInt64Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_k_, &from.msg_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_v_) -
    reinterpret_cast<char*>(&msg_k_)) + sizeof(msg_v_));
  // @@protoc_insertion_point(copy_constructor:UInt64Map)
}

void UInt64Map::SharedCtor() {
  ::memset(&msg_k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_v_) -
      reinterpret_cast<char*>(&msg_k_)) + sizeof(msg_v_));
}

UInt64Map::~UInt64Map() {
  // @@protoc_insertion_point(destructor:UInt64Map)
  SharedDtor();
}

void UInt64Map::SharedDtor() {
}

void UInt64Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UInt64Map& UInt64Map::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UInt64Map_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void UInt64Map::Clear() {
// @@protoc_insertion_point(message_clear_start:UInt64Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msg_k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_v_) -
      reinterpret_cast<char*>(&msg_k_)) + sizeof(msg_v_));
  _internal_metadata_.Clear();
}

const char* UInt64Map::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msg_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UInt64Map::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UInt64Map)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_k = 1;
  if (this->msg_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_k(), target);
  }

  // uint64 msg_v = 2;
  if (this->msg_v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msg_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UInt64Map)
  return target;
}

size_t UInt64Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UInt64Map)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 msg_k = 1;
  if (this->msg_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_k());
  }

  // uint64 msg_v = 2;
  if (this->msg_v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UInt64Map::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UInt64Map)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Map* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UInt64Map>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UInt64Map)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UInt64Map)
    MergeFrom(*source);
  }
}

void UInt64Map::MergeFrom(const UInt64Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UInt64Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_k() != 0) {
    _internal_set_msg_k(from._internal_msg_k());
  }
  if (from.msg_v() != 0) {
    _internal_set_msg_v(from._internal_msg_v());
  }
}

void UInt64Map::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UInt64Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Map::CopyFrom(const UInt64Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UInt64Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Map::IsInitialized() const {
  return true;
}

void UInt64Map::InternalSwap(UInt64Map* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_k_, other->msg_k_);
  swap(msg_v_, other->msg_v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UInt64Map::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLINT::InitAsDefaultInstance() {
}
class CLINT::_Internal {
 public:
};

CLINT::CLINT()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLINT)
}
CLINT::CLINT(const CLINT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_mtimecmp_(from.msg_mtimecmp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_mtime_ = from.msg_mtime_;
  // @@protoc_insertion_point(copy_constructor:CLINT)
}

void CLINT::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLINT_arch_2dstate_2eproto.base);
  msg_mtime_ = PROTOBUF_ULONGLONG(0);
}

CLINT::~CLINT() {
  // @@protoc_insertion_point(destructor:CLINT)
  SharedDtor();
}

void CLINT::SharedDtor() {
}

void CLINT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLINT& CLINT::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLINT_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void CLINT::Clear() {
// @@protoc_insertion_point(message_clear_start:CLINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_mtimecmp_.Clear();
  msg_mtime_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CLINT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 msg_mtime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_mtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .UInt64Map msg_mtimecmp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_mtimecmp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLINT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLINT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 msg_mtime = 1;
  if (this->msg_mtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_msg_mtime(), target);
  }

  // repeated .UInt64Map msg_mtimecmp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_mtimecmp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_msg_mtimecmp(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLINT)
  return target;
}

size_t CLINT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLINT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .UInt64Map msg_mtimecmp = 2;
  total_size += 1UL * this->_internal_msg_mtimecmp_size();
  for (const auto& msg : this->msg_mtimecmp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 msg_mtime = 1;
  if (this->msg_mtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msg_mtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLINT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLINT)
  GOOGLE_DCHECK_NE(&from, this);
  const CLINT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLINT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLINT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLINT)
    MergeFrom(*source);
  }
}

void CLINT::MergeFrom(const CLINT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLINT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_mtimecmp_.MergeFrom(from.msg_mtimecmp_);
  if (from.msg_mtime() != 0) {
    _internal_set_msg_mtime(from._internal_msg_mtime());
  }
}

void CLINT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLINT::CopyFrom(const CLINT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLINT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLINT::IsInitialized() const {
  return true;
}

void CLINT::InternalSwap(CLINT* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_mtimecmp_.InternalSwap(&other->msg_mtimecmp_);
  swap(msg_mtime_, other->msg_mtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLINT::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLICContext::InitAsDefaultInstance() {
}
class PLICContext::_Internal {
 public:
};

PLICContext::PLICContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PLICContext)
}
PLICContext::PLICContext(const PLICContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_enable_(from.msg_enable_),
      msg_pending_(from.msg_pending_),
      msg_pending_priority_(from.msg_pending_priority_),
      msg_claimed_(from.msg_claimed_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_priority_threshold_ = from.msg_priority_threshold_;
  // @@protoc_insertion_point(copy_constructor:PLICContext)
}

void PLICContext::SharedCtor() {
  msg_priority_threshold_ = 0u;
}

PLICContext::~PLICContext() {
  // @@protoc_insertion_point(destructor:PLICContext)
  SharedDtor();
}

void PLICContext::SharedDtor() {
}

void PLICContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLICContext& PLICContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLICContext_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void PLICContext::Clear() {
// @@protoc_insertion_point(message_clear_start:PLICContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_enable_.Clear();
  msg_pending_.Clear();
  msg_pending_priority_.Clear();
  msg_claimed_.Clear();
  msg_priority_threshold_ = 0u;
  _internal_metadata_.Clear();
}

const char* PLICContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msg_priority_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_priority_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_enable(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_msg_enable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_pending = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_pending(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_msg_pending(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_pending_priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_pending_priority(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_msg_pending_priority(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_claimed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_claimed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_msg_claimed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PLICContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PLICContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_priority_threshold = 1;
  if (this->msg_priority_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_priority_threshold(), target);
  }

  // repeated uint32 msg_enable = 2;
  {
    int byte_size = _msg_enable_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_msg_enable(), byte_size, target);
    }
  }

  // repeated uint32 msg_pending = 3;
  {
    int byte_size = _msg_pending_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_msg_pending(), byte_size, target);
    }
  }

  // repeated uint32 msg_pending_priority = 4;
  {
    int byte_size = _msg_pending_priority_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_msg_pending_priority(), byte_size, target);
    }
  }

  // repeated uint32 msg_claimed = 5;
  {
    int byte_size = _msg_claimed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_msg_claimed(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PLICContext)
  return target;
}

size_t PLICContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PLICContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 msg_enable = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_enable_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_enable_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 msg_pending = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_pending_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_pending_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 msg_pending_priority = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_pending_priority_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_pending_priority_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 msg_claimed = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_claimed_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_claimed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 msg_priority_threshold = 1;
  if (this->msg_priority_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_priority_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLICContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PLICContext)
  GOOGLE_DCHECK_NE(&from, this);
  const PLICContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLICContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PLICContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PLICContext)
    MergeFrom(*source);
  }
}

void PLICContext::MergeFrom(const PLICContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PLICContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_enable_.MergeFrom(from.msg_enable_);
  msg_pending_.MergeFrom(from.msg_pending_);
  msg_pending_priority_.MergeFrom(from.msg_pending_priority_);
  msg_claimed_.MergeFrom(from.msg_claimed_);
  if (from.msg_priority_threshold() != 0) {
    _internal_set_msg_priority_threshold(from._internal_msg_priority_threshold());
  }
}

void PLICContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PLICContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLICContext::CopyFrom(const PLICContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PLICContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLICContext::IsInitialized() const {
  return true;
}

void PLICContext::InternalSwap(PLICContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_enable_.InternalSwap(&other->msg_enable_);
  msg_pending_.InternalSwap(&other->msg_pending_);
  msg_pending_priority_.InternalSwap(&other->msg_pending_priority_);
  msg_claimed_.InternalSwap(&other->msg_claimed_);
  swap(msg_priority_threshold_, other->msg_priority_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PLICContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLIC::InitAsDefaultInstance() {
}
class PLIC::_Internal {
 public:
};

PLIC::PLIC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PLIC)
}
PLIC::PLIC(const PLIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_contexts_(from.msg_contexts_),
      msg_priority_(from.msg_priority_),
      msg_level_(from.msg_level_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PLIC)
}

void PLIC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PLIC_arch_2dstate_2eproto.base);
}

PLIC::~PLIC() {
  // @@protoc_insertion_point(destructor:PLIC)
  SharedDtor();
}

void PLIC::SharedDtor() {
}

void PLIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLIC& PLIC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLIC_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void PLIC::Clear() {
// @@protoc_insertion_point(message_clear_start:PLIC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_contexts_.Clear();
  msg_priority_.Clear();
  msg_level_.Clear();
  _internal_metadata_.Clear();
}

const char* PLIC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PLICContext msg_contexts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_priority(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_msg_priority(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 msg_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_msg_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PLIC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PLIC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PLICContext msg_contexts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_contexts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg_contexts(i), target, stream);
  }

  // repeated uint32 msg_priority = 2;
  {
    int byte_size = _msg_priority_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_msg_priority(), byte_size, target);
    }
  }

  // repeated uint32 msg_level = 3;
  {
    int byte_size = _msg_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_msg_level(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PLIC)
  return target;
}

size_t PLIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PLIC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PLICContext msg_contexts = 1;
  total_size += 1UL * this->_internal_msg_contexts_size();
  for (const auto& msg : this->msg_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 msg_priority = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_priority_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_priority_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 msg_level = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLIC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PLIC)
  GOOGLE_DCHECK_NE(&from, this);
  const PLIC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLIC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PLIC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PLIC)
    MergeFrom(*source);
  }
}

void PLIC::MergeFrom(const PLIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PLIC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_contexts_.MergeFrom(from.msg_contexts_);
  msg_priority_.MergeFrom(from.msg_priority_);
  msg_level_.MergeFrom(from.msg_level_);
}

void PLIC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PLIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLIC::CopyFrom(const PLIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PLIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLIC::IsInitialized() const {
  return true;
}

void PLIC::InternalSwap(PLIC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_contexts_.InternalSwap(&other->msg_contexts_);
  msg_priority_.InternalSwap(&other->msg_priority_);
  msg_level_.InternalSwap(&other->msg_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PLIC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimState::InitAsDefaultInstance() {
  ::_SimState_default_instance_._instance.get_mutable()->msg_clint_ = const_cast< ::CLINT*>(
      ::CLINT::internal_default_instance());
  ::_SimState_default_instance_._instance.get_mutable()->msg_plic_ = const_cast< ::PLIC*>(
      ::PLIC::internal_default_instance());
}
class SimState::_Internal {
 public:
  static const ::CLINT& msg_clint(const SimState* msg);
  static const ::PLIC& msg_plic(const SimState* msg);
};

const ::CLINT&
SimState::_Internal::msg_clint(const SimState* msg) {
  return *msg->msg_clint_;
}
const ::PLIC&
SimState::_Internal::msg_plic(const SimState* msg) {
  return *msg->msg_plic_;
}
SimState::SimState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimState)
}
SimState::SimState(const SimState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_arch_state_(from.msg_arch_state_),
      msg_sparse_mm_(from.msg_sparse_mm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg_clint()) {
    msg_clint_ = new ::CLINT(*from.msg_clint_);
  } else {
    msg_clint_ = nullptr;
  }
  if (from._internal_has_msg_plic()) {
    msg_plic_ = new ::PLIC(*from.msg_plic_);
  } else {
    msg_plic_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SimState)
}

void SimState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimState_arch_2dstate_2eproto.base);
  ::memset(&msg_clint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_plic_) -
      reinterpret_cast<char*>(&msg_clint_)) + sizeof(msg_plic_));
}

SimState::~SimState() {
  // @@protoc_insertion_point(destructor:SimState)
  SharedDtor();
}

void SimState::SharedDtor() {
  if (this != internal_default_instance()) delete msg_clint_;
  if (this != internal_default_instance()) delete msg_plic_;
}

void SimState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimState& SimState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimState_arch_2dstate_2eproto.base);
  return *internal_default_instance();
}


void SimState::Clear() {
// @@protoc_insertion_point(message_clear_start:SimState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_arch_state_.Clear();
  msg_sparse_mm_.Clear();
  if (GetArenaNoVirtual() == nullptr && msg_clint_ != nullptr) {
    delete msg_clint_;
  }
  msg_clint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && msg_plic_ != nullptr) {
    delete msg_plic_;
  }
  msg_plic_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SimState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ArchState msg_arch_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_arch_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .CLINT msg_clint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_clint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PLIC msg_plic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_plic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Page msg_sparse_mm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_sparse_mm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SimState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ArchState msg_arch_state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_arch_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg_arch_state(i), target, stream);
  }

  // .CLINT msg_clint = 2;
  if (this->has_msg_clint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msg_clint(this), target, stream);
  }

  // .PLIC msg_plic = 3;
  if (this->has_msg_plic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::msg_plic(this), target, stream);
  }

  // repeated .Page msg_sparse_mm = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_sparse_mm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msg_sparse_mm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimState)
  return target;
}

size_t SimState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ArchState msg_arch_state = 1;
  total_size += 1UL * this->_internal_msg_arch_state_size();
  for (const auto& msg : this->msg_arch_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Page msg_sparse_mm = 4;
  total_size += 1UL * this->_internal_msg_sparse_mm_size();
  for (const auto& msg : this->msg_sparse_mm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .CLINT msg_clint = 2;
  if (this->has_msg_clint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_clint_);
  }

  // .PLIC msg_plic = 3;
  if (this->has_msg_plic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_plic_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimState)
  GOOGLE_DCHECK_NE(&from, this);
  const SimState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimState)
    MergeFrom(*source);
  }
}

void SimState::MergeFrom(const SimState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_arch_state_.MergeFrom(from.msg_arch_state_);
  msg_sparse_mm_.MergeFrom(from.msg_sparse_mm_);
  if (from.has_msg_clint()) {
    _internal_mutable_msg_clint()->::CLINT::MergeFrom(from._internal_msg_clint());
  }
  if (from.has_msg_plic()) {
    _internal_mutable_msg_plic()->::PLIC::MergeFrom(from._internal_msg_plic());
  }
}

void SimState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimState::CopyFrom(const SimState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimState::IsInitialized() const {
  return true;
}

void SimState::InternalSwap(SimState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_arch_state_.InternalSwap(&other->msg_arch_state_);
  msg_sparse_mm_.InternalSwap(&other->msg_sparse_mm_);
  swap(msg_clint_, other->msg_clint_);
  swap(msg_plic_, other->msg_plic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSR* Arena::CreateMaybeMessage< ::CSR >(Arena* arena) {
  return Arena::CreateInternal< ::CSR >(arena);
}
template<> PROTOBUF_NOINLINE ::BasicCSR* Arena::CreateMaybeMessage< ::BasicCSR >(Arena* arena) {
  return Arena::CreateInternal< ::BasicCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::MisaCSR* Arena::CreateMaybeMessage< ::MisaCSR >(Arena* arena) {
  return Arena::CreateInternal< ::MisaCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::SatpCSR* Arena::CreateMaybeMessage< ::SatpCSR >(Arena* arena) {
  return Arena::CreateInternal< ::SatpCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::VirtBasicCSR* Arena::CreateMaybeMessage< ::VirtBasicCSR >(Arena* arena) {
  return Arena::CreateInternal< ::VirtBasicCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::BaseStatusCSR* Arena::CreateMaybeMessage< ::BaseStatusCSR >(Arena* arena) {
  return Arena::CreateInternal< ::BaseStatusCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::MstatusCSR* Arena::CreateMaybeMessage< ::MstatusCSR >(Arena* arena) {
  return Arena::CreateInternal< ::MstatusCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::SstatusProxyCSR* Arena::CreateMaybeMessage< ::SstatusProxyCSR >(Arena* arena) {
  return Arena::CreateInternal< ::SstatusProxyCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::VsstatusCSR* Arena::CreateMaybeMessage< ::VsstatusCSR >(Arena* arena) {
  return Arena::CreateInternal< ::VsstatusCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::SstatusCSR* Arena::CreateMaybeMessage< ::SstatusCSR >(Arena* arena) {
  return Arena::CreateInternal< ::SstatusCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::MaskedCSR* Arena::CreateMaybeMessage< ::MaskedCSR >(Arena* arena) {
  return Arena::CreateInternal< ::MaskedCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::OptionalUInt64* Arena::CreateMaybeMessage< ::OptionalUInt64 >(Arena* arena) {
  return Arena::CreateInternal< ::OptionalUInt64 >(arena);
}
template<> PROTOBUF_NOINLINE ::SmcntrpmfCSR* Arena::CreateMaybeMessage< ::SmcntrpmfCSR >(Arena* arena) {
  return Arena::CreateInternal< ::SmcntrpmfCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::WideCntrCSR* Arena::CreateMaybeMessage< ::WideCntrCSR >(Arena* arena) {
  return Arena::CreateInternal< ::WideCntrCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::MedelegCSR* Arena::CreateMaybeMessage< ::MedelegCSR >(Arena* arena) {
  return Arena::CreateInternal< ::MedelegCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::HstateenCSR* Arena::CreateMaybeMessage< ::HstateenCSR >(Arena* arena) {
  return Arena::CreateInternal< ::HstateenCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::TimeProxyCSR* Arena::CreateMaybeMessage< ::TimeProxyCSR >(Arena* arena) {
  return Arena::CreateInternal< ::TimeProxyCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::DCSR* Arena::CreateMaybeMessage< ::DCSR >(Arena* arena) {
  return Arena::CreateInternal< ::DCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::PmpCSR* Arena::CreateMaybeMessage< ::PmpCSR >(Arena* arena) {
  return Arena::CreateInternal< ::PmpCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::StimecmpCSR* Arena::CreateMaybeMessage< ::StimecmpCSR >(Arena* arena) {
  return Arena::CreateInternal< ::StimecmpCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::HidelegCSR* Arena::CreateMaybeMessage< ::HidelegCSR >(Arena* arena) {
  return Arena::CreateInternal< ::HidelegCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::McontextCSR* Arena::CreateMaybeMessage< ::McontextCSR >(Arena* arena) {
  return Arena::CreateInternal< ::McontextCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::HenvcfgCSR* Arena::CreateMaybeMessage< ::HenvcfgCSR >(Arena* arena) {
  return Arena::CreateInternal< ::HenvcfgCSR >(arena);
}
template<> PROTOBUF_NOINLINE ::Float128* Arena::CreateMaybeMessage< ::Float128 >(Arena* arena) {
  return Arena::CreateInternal< ::Float128 >(arena);
}
template<> PROTOBUF_NOINLINE ::ArchState* Arena::CreateMaybeMessage< ::ArchState >(Arena* arena) {
  return Arena::CreateInternal< ::ArchState >(arena);
}
template<> PROTOBUF_NOINLINE ::Page* Arena::CreateMaybeMessage< ::Page >(Arena* arena) {
  return Arena::CreateInternal< ::Page >(arena);
}
template<> PROTOBUF_NOINLINE ::UInt64Map* Arena::CreateMaybeMessage< ::UInt64Map >(Arena* arena) {
  return Arena::CreateInternal< ::UInt64Map >(arena);
}
template<> PROTOBUF_NOINLINE ::CLINT* Arena::CreateMaybeMessage< ::CLINT >(Arena* arena) {
  return Arena::CreateInternal< ::CLINT >(arena);
}
template<> PROTOBUF_NOINLINE ::PLICContext* Arena::CreateMaybeMessage< ::PLICContext >(Arena* arena) {
  return Arena::CreateInternal< ::PLICContext >(arena);
}
template<> PROTOBUF_NOINLINE ::PLIC* Arena::CreateMaybeMessage< ::PLIC >(Arena* arena) {
  return Arena::CreateInternal< ::PLIC >(arena);
}
template<> PROTOBUF_NOINLINE ::SimState* Arena::CreateMaybeMessage< ::SimState >(Arena* arena) {
  return Arena::CreateInternal< ::SimState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
